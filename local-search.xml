<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>密码学基础，算法自吐</title>
    <link href="/2025/04/01/ZJ9/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%8C%E7%AE%97%E6%B3%95%E8%87%AA%E5%90%90%EF%BC%8C%E9%9D%9E%E6%A0%87%E5%87%86%E5%8A%A0%E5%AF%86%E5%AF%B9%E6%8A%97%201c3a6f4b4daf803eb988f970e5d95436/"/>
    <url>/2025/04/01/ZJ9/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%8C%E7%AE%97%E6%B3%95%E8%87%AA%E5%90%90%EF%BC%8C%E9%9D%9E%E6%A0%87%E5%87%86%E5%8A%A0%E5%AF%86%E5%AF%B9%E6%8A%97%201c3a6f4b4daf803eb988f970e5d95436/</url>
    
    <content type="html"><![CDATA[<h1 id="密码学基础，算法自吐，非标准加密对抗"><a href="#密码学基础，算法自吐，非标准加密对抗" class="headerlink" title="密码学基础，算法自吐，非标准加密对抗"></a>密码学基础，算法自吐，非标准加密对抗</h1><h1 id="1-什么是密码学"><a href="#1-什么是密码学" class="headerlink" title="1.什么是密码学?"></a><strong>1.什么是密码学?</strong></h1><p>密码学(cryptography)是一种将信息表述为不可读的方式，并使用一种秘密的方法将信息恢复出来的科学。密码学提供的最基本的服务是数据机密性服务，就是使通信双方可以互相发送消息，并且避免他人窃取消息的内容。加密算法是密码学的核心。</p><ul><li><p>明文：原始消息</p></li><li><p>密文：加密后的消息</p></li><li><p>加密：从明文到密文的变换过程</p></li><li><p>解密：从密文到明文的变换过程</p></li><li><p>密钥：相用来完成加解密等过程的秘密信息</p><p>  <img src="http://pic.rmb.bdstatic.com/bjh/2115b905b61a6e036f43b84c8bcd545d.png"></p></li></ul><h1 id="2-常见编码"><a href="#2-常见编码" class="headerlink" title="2.常见编码"></a><strong>2.常见编码</strong></h1><p>在android studio中如果无法运行java对gradle文件进行一下修改</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011856496.png"></p><h2 id="1-Base64编码"><a href="#1-Base64编码" class="headerlink" title="1.Base64编码"></a><strong>1.Base64编码</strong></h2><p><a href="https://gchq.github.io/CyberChef/">CyberChef</a></p><p>定义:</p><p>Base64是一种用64个字符表示任意二进制数据的方法，是一种编码，并非加密字符编码，由 A-Z a-z 0-9 + / 和补充字符 “=” 组成，Base64编码后的字符数是4的倍数（不足会补”=”）</p><p>明文:</p><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">CC<span class="hljs-number">1313113</span>!<br></code></pre></td></tr></tbody></table></figure><p>密文:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Encoded string: <span class="hljs-attribute">Q0MxMzEzMTEzIQ</span>==<br></code></pre></td></tr></tbody></table></figure><p>逻辑实现:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64Example</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CC1313113!"</span>;<br><br>        <span class="hljs-comment">// 编码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encodedString</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(text.getBytes());<br>        System.out.println(<span class="hljs-string">"Encoded string: "</span> + encodedString);<br><br>        <span class="hljs-comment">// 解码</span><br>        <span class="hljs-type">byte</span>[] decodedBytes = Base64.getDecoder().decode(encodedString);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">decodedString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decodedBytes);<br>        System.out.println(<span class="hljs-string">"Decoded string: "</span> + decodedString);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011857105.png"></p><p>自实现base64：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64Example</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">//base64码表</span><br>&nbsp; &nbsp; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">base64Chars</span> <span class="hljs-operator">=</span> <span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;<br><br>&nbsp; &nbsp; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">originalInput</span> <span class="hljs-operator">=</span> <span class="hljs-string">"吾爱破解论坛"</span>;<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">// 编码</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">encodedString</span> <span class="hljs-operator">=</span> encodeBase64(originalInput.getBytes());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;System.out.println(<span class="hljs-string">"Encoded string: "</span> + encodedString);<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">// 解码</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">byte</span>[] decodedBytes = decodeBase64(encodedString);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">decodedString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decodedBytes);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;System.out.println(<span class="hljs-string">"Decoded string: "</span> + decodedString);<br>&nbsp; &nbsp; }<br><br>&nbsp; &nbsp; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encodeBase64</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] inputBytes)</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">int</span> <span class="hljs-variable">paddingCount</span> <span class="hljs-operator">=</span> (<span class="hljs-number">3</span> - inputBytes.length % <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inputBytes.length; i += <span class="hljs-number">3</span>) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ((inputBytes[i] &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">16</span>) | ((i + <span class="hljs-number">1</span> &lt; inputBytes.length ? inputBytes[i + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xFF</span> : <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-number">8</span>) | (i + <span class="hljs-number">2</span> &lt; inputBytes.length ? inputBytes[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xFF</span> : <span class="hljs-number">0</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sb.append(base64Chars.charAt((b &gt;&gt; <span class="hljs-number">18</span>) &amp; <span class="hljs-number">0x3F</span>)).append(base64Chars.charAt((b &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x3F</span>)).append(base64Chars.charAt((b &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x3F</span>)).append(base64Chars.charAt(b &amp; <span class="hljs-number">0x3F</span>));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paddingCount; i++) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sb.setCharAt(sb.length() - i - <span class="hljs-number">1</span>, <span class="hljs-string">'='</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> sb.toString();<br>&nbsp; &nbsp; }<br><br>&nbsp; &nbsp; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decodeBase64(String inputString) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">int</span> <span class="hljs-variable">paddingCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inputString.length(); i += <span class="hljs-number">4</span>) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (base64Chars.indexOf(inputString.charAt(i)) &lt;&lt; <span class="hljs-number">18</span>) | (base64Chars.indexOf(inputString.charAt(i + <span class="hljs-number">1</span>)) &lt;&lt; <span class="hljs-number">12</span>) | (i + <span class="hljs-number">2</span> &lt; inputString.length() &amp;&amp; inputString.charAt(i + <span class="hljs-number">2</span>) != <span class="hljs-string">'='</span> ? base64Chars.indexOf(inputString.charAt(i + <span class="hljs-number">2</span>)) &lt;&lt; <span class="hljs-number">6</span> : <span class="hljs-number">0</span>) | (i + <span class="hljs-number">3</span> &lt; inputString.length() &amp;&amp; inputString.charAt(i + <span class="hljs-number">3</span>) != <span class="hljs-string">'='</span> ? base64Chars.indexOf(inputString.charAt(i + <span class="hljs-number">3</span>)) : <span class="hljs-number">0</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bos.write((b &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bos.write((b &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bos.write(b &amp; <span class="hljs-number">0xFF</span>);<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">if</span> (inputString.charAt(i + <span class="hljs-number">2</span>) == <span class="hljs-string">'='</span>) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; paddingCount++;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">if</span> (inputString.charAt(i + <span class="hljs-number">3</span>) == <span class="hljs-string">'='</span>) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; paddingCount++;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">byte</span>[] result = bos.toByteArray();<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">if</span> (paddingCount &gt; <span class="hljs-number">0</span>) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">byte</span>[] trimmedResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[result.length - paddingCount];<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;System.arraycopy(result, <span class="hljs-number">0</span>, trimmedResult, <span class="hljs-number">0</span>, trimmedResult.length);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">return</span> trimmedResult;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;} <span class="hljs-keyword">else</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">return</span> result;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp; }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="2-Hex编码"><a href="#2-Hex编码" class="headerlink" title="2.Hex编码"></a><strong>2.Hex编码</strong></h2><p>定义:</p><p>hex编码，又称十六进制编码(也称base16)，一般用于方便人们查看二进制文件内容，它将字节数据中的每4个bit使用数字(0-9)、字母(A-F)共16个字符等效表示，由于一个字节有8个bit，所以一个字节会被编码为2个hex字符</p><p>PS:在 ASCII 编码中，只有0到127之间的数字是表示英文字母、数字和符号的，超出这个范围的字符需要使用其他编码方式,例如汉字就需要使用 UTF-8 或 UTF-16</p><p>明文:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">吾爱破解论坛<br></code></pre></td></tr></tbody></table></figure><p>密文:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">E590BEE788B1E7A0B4E8A7A3E8AEBAE59D9B<br></code></pre></td></tr></tbody></table></figure><p>逻辑实现:</p><p><code>%02X</code>&nbsp;是一个格式化字符串，其中&nbsp;<code>%</code>&nbsp;是转义符，<code>02</code>&nbsp;是最小宽度，表示输出的字符串至少包含两个字符，不足两个字符时用&nbsp;<code>0</code>&nbsp;填充，<code>X</code>&nbsp;表示输出的字符集为大写的十六进制数。(算是一个特征)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将普通字符串转换为Hex字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CC1313113!"</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">byte</span>[] bytes = input.getBytes(StandardCharsets.UTF_8);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : bytes) {<br>            output.append(String.format(<span class="hljs-string">"%02X"</span>, b));<br>        }<br>        System.out.println(output.toString());<br>    }<br><span class="hljs-comment">// 将Hex字符串转换为普通字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">hexToString</span><span class="hljs-params">(String input)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[input.length() / <span class="hljs-number">2</span>];<br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; input.length(); i += <span class="hljs-number">2</span>) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;bytes[i / <span class="hljs-number">2</span>] = (<span class="hljs-type">byte</span>) Integer.parseInt(input.substring(i, i + <span class="hljs-number">2</span>), <span class="hljs-number">16</span>);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, StandardCharsets.UTF_8);<br>}                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011857834.png"></p><h2 id="3-Unicode编码"><a href="#3-Unicode编码" class="headerlink" title="3.Unicode编码"></a><strong>3.Unicode编码</strong></h2><p>定义:</p><p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。</p><p>明文:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">吾爱破解论坛<br></code></pre></td></tr></tbody></table></figure><p>密文:</p><figure class="highlight clojure"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-character">\u543E</span><span class="hljs-character">\u7231</span><span class="hljs-character">\u7834</span><span class="hljs-character">\u89E3</span><span class="hljs-character">\u8BBA</span><span class="hljs-character">\u575B</span><br></code></pre></td></tr></tbody></table></figure><p>逻辑实现:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将字符串转换为Unicode格式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">stringToUnicode</span><span class="hljs-params">(String input)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; input.length(); i++) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;output.append(String.format(<span class="hljs-string">"\\u%04X"</span>, (<span class="hljs-type">int</span>) input.charAt(i)));<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> output.toString();<br>}<br><span class="hljs-comment">// 将Unicode格式的字符串转换为原始字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">unicodeToString</span><span class="hljs-params">(String input)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; input.length(); i += <span class="hljs-number">6</span>) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> input.substring(i + <span class="hljs-number">2</span>, i + <span class="hljs-number">6</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;output.append((<span class="hljs-type">char</span>) Integer.parseInt(str, <span class="hljs-number">16</span>));<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> output.toString();<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011858599.png"></p><p>有些编译器可以将Unicode编码直接反编译出来，当然我的jeb显然没有自己还原编码（叹气，害）。</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011858909.png"></p><h2 id="4-Byte数组"><a href="#4-Byte数组" class="headerlink" title="4.Byte数组"></a><strong>4.Byte数组</strong></h2><p>PS：常用于字符串加密</p><p>明文：</p><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">CC<span class="hljs-number">1313113</span>!<br></code></pre></td></tr></tbody></table></figure><p>密文：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">67</span>, <span class="hljs-number">67</span>, <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, <span class="hljs-number">49</span>, <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, <span class="hljs-number">33</span>]<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cc.xoseddemo1;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">text</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalInput</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CC1313113!"</span>;<br>        <span class="hljs-type">byte</span>[] bytes = originalInput.getBytes();<br>        System.out.println(Arrays.toString(bytes));<br><br>        <span class="hljs-type">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]{<span class="hljs-number">67</span>, <span class="hljs-number">67</span>, <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, <span class="hljs-number">49</span>, <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, <span class="hljs-number">33</span>};<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(byteArray);<br>        System.out.println(str);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011858329.png"></p><h1 id="3-加密算法"><a href="#3-加密算法" class="headerlink" title="3.加密算法"></a><strong>3.加密算法</strong></h1><h2 id="1-消息摘要算法-单向散列函数-哈希算法"><a href="#1-消息摘要算法-单向散列函数-哈希算法" class="headerlink" title="1.消息摘要算法&amp;单向散列函数&amp;哈希算法"></a><strong>1.消息摘要算法&amp;单向散列函数&amp;哈希算法</strong></h2><p>定义:</p><p>单向散列函数算法也称Hash（哈希）算法(消息摘要算法)，是一种将任意长度的消息压缩到某一固定长度（消息摘要）的函数（该过程不可逆）。 Hash函数可用于数字签名、 消息的完整性检测、消息起源的认证检测等。</p><p>常见的算法:MD5、HMAC、SHA-X(SHA-1,SHA-2)</p><h3 id="MD5摘要"><a href="#MD5摘要" class="headerlink" title="MD5摘要"></a><strong>MD5摘要</strong></h3><p>特性:</p><ul><li>压缩性:无论数据长度是多少,计算出来的MD5值长度相同(16位、32位)</li><li>抗修改性:即便修改一个字节，计算出来的MD5值也会巨大差异</li></ul><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011858146.png"></p><ul><li>抗碰撞性:知道数据和MD5值，很小概率找到相同MD5值相同的原数据</li><li>易计算性:由原数据容易计算出MD5值(逆推)</li></ul><p>明文:</p><figure class="highlight erlang-repl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">CC313113!<br></code></pre></td></tr></tbody></table></figure><p>密文:</p><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">f80ca4900ca4b8a6e9b676bcc<span class="hljs-number">203d0d9</span><br></code></pre></td></tr></tbody></table></figure><p>逻辑实现:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException {<br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">"MD5"</span>);<br>        md.update(<span class="hljs-string">"CC313113!"</span>.getBytes());<br>        <span class="hljs-type">byte</span>[] res = md.digest();<br>        System.out.println(byteToHexString(res));<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">byteToHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] by)</span> {<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">SB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : by) {<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> k;<br>            <span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span>) {<br>                j = k + <span class="hljs-number">256</span>;<br>            }<br>            <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">16</span>) {<br>                SB.append(<span class="hljs-string">"0"</span>);<br>            }<br>            SB.append(Integer.toHexString(j));<br>        }<br>        <span class="hljs-keyword">return</span> SB.toString();<br>    }<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011858439.png"></p><h2 id="2-对称加密算法"><a href="#2-对称加密算法" class="headerlink" title="2.对称加密算法"></a><strong>2.对称加密算法</strong></h2><p>定义:</p><p>加密和解密使用相同密钥的密码算法叫对称加解密算法，简称对称算法。对称算法速度快，通常在需要加密大量数据时使用。所谓对称，就是采用这种密码方法的双方使用同样的密钥进行加密和解密。</p><p><img src="http://pic.rmb.bdstatic.com/bjh/bb79537ec46505e2af3db6ad7d945ef8.png"></p><p>对称加密算法可以分为以下几种类型：</p><ul><li>DES（数据加密标准）：DES是一种对称加密算法，使用56位密钥，将数据分成64位块，然后进行加密。由于DES的密钥长度比较短，易受到暴力破解攻击。</li><li>3DES（三重DES）：3DES是基于DES算法的改进版本，使用三个56位的密钥，对数据进行三次加密，从而增加了加密强度。3DES比DES更加安全，但是加密速度较慢。</li><li>AES（高级加密标准）：AES是一种高级的对称加密算法，使用128、192或256位密钥，可以对不同长度的数据块进行加密。AES比DES和3DES更加安全，且加密速度更快。</li><li>RC4：RC4是一种流加密算法，使用相同的密钥对数据进行加密和解密。RC4的密钥长度可以是40位、64位、128位等不同长度。RC4在实际应用中已经被证明存在漏洞，不再被推荐使用。</li></ul><h3 id="1-AES加解密"><a href="#1-AES加解密" class="headerlink" title="(1)AES加解密"></a><strong>(1)AES加解密</strong></h3><p>明文:</p><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">CC<span class="hljs-number">1313113</span>!<br></code></pre></td></tr></tbody></table></figure><p>密文:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">j94q+kL0+SlVpeGPYjAztA==<br></code></pre></td></tr></tbody></table></figure><p>逻辑实现:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AES</span> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ALGORITHM</span> <span class="hljs-operator">=</span> <span class="hljs-string">"AES"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TRANSFORMATION</span> <span class="hljs-operator">=</span> <span class="hljs-string">"AES/ECB/PKCS5Padding"</span>;<span class="hljs-comment">//加密模式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECRET_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CC13131234567890"</span>;<span class="hljs-comment">//密钥</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br>                <span class="hljs-type">String</span> <span class="hljs-variable">originalMessage</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CC1313113!"</span>;<br>                <span class="hljs-type">byte</span>[] encryptedMessage = encrypt(originalMessage);<br>                System.out.println(<span class="hljs-string">"加密结果: "</span> + Base64.getEncoder().encodeToString(encryptedMessage));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">decryptedMessage</span> <span class="hljs-operator">=</span> decrypt(encryptedMessage);<br>                System.out.println(<span class="hljs-string">"解密结果: "</span> + decryptedMessage);<br>            }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encrypt(String message) <span class="hljs-keyword">throws</span> Exception {<br>                <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(SECRET_KEY.getBytes(), ALGORITHM);<br>                <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(TRANSFORMATION);<br>                cipher.init(Cipher.ENCRYPT_MODE, key);<br>                <span class="hljs-keyword">return</span> cipher.doFinal(message.getBytes());<br>            }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] encryptedMessage)</span> <span class="hljs-keyword">throws</span> Exception {<br>                <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(SECRET_KEY.getBytes(), ALGORITHM);<br>                <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(TRANSFORMATION);cipher.init(Cipher.DECRYPT_MODE, key);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cipher.doFinal(encryptedMessage));<br>            }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011859051.png"></p><h3 id="2-DES加解密"><a href="#2-DES加解密" class="headerlink" title="(2)DES加解密"></a><strong>(2)DES加解密</strong></h3><p>明文:</p><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">CC<span class="hljs-number">1313113</span>!<br></code></pre></td></tr></tbody></table></figure><p>密文:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">43N9cLCP1sTHGJRnh62iDw==<br></code></pre></td></tr></tbody></table></figure><p>逻辑实现:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DES</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ALGORITHM</span> <span class="hljs-operator">=</span> <span class="hljs-string">"DES"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TRANSFORMATION</span> <span class="hljs-operator">=</span> <span class="hljs-string">"DES/ECB/PKCS5Padding"</span>;<span class="hljs-comment">//加密模式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECRET_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CC123456"</span>;<span class="hljs-comment">//密钥</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalMessage</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CC1313113!"</span>;<br>        <span class="hljs-type">byte</span>[] encryptedMessage = encrypt(originalMessage);<br>        System.out.println(<span class="hljs-string">"加密结果: "</span> + Base64.getEncoder().encodeToString(encryptedMessage));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">decryptedMessage</span> <span class="hljs-operator">=</span> decrypt(encryptedMessage);<br>        System.out.println(<span class="hljs-string">"解密结果: "</span> + decryptedMessage);<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encrypt(String message) <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(SECRET_KEY.getBytes(), ALGORITHM);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(TRANSFORMATION);<br>        cipher.init(Cipher.ENCRYPT_MODE, key);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(message.getBytes());<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] encryptedMessage)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(SECRET_KEY.getBytes(), ALGORITHM);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(TRANSFORMATION);<br>        cipher.init(Cipher.DECRYPT_MODE, key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cipher.doFinal(encryptedMessage));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011859372.png"></p><h2 id="3-非对称加密算法"><a href="#3-非对称加密算法" class="headerlink" title="3.非对称加密算法"></a><strong>3.非对称加密算法</strong></h2><p>定义:</p><p>非对称加密，也称为公钥加密，使用两个不同的密钥进行加密和解密，这两个密钥是一对，一个被称为公钥，一个被称为私钥。公钥可以随意分发给任何需要通信的人，而私钥则只能由密钥持有者保留。在非对称加密中，公钥用于加密消息，而私钥用于解密消息，这使得非对称加密更加安全，因为即使公钥被泄露，也无法破解密文。</p><p>常见的非对称加密:RSA</p><h3 id="RSA加解密"><a href="#RSA加解密" class="headerlink" title="RSA加解密"></a><strong>RSA加解密</strong></h3><p>定义:</p><p>RSA是最具代表性的公钥密码体制。由于算法完善（既可用于数据加密又可用于数字签名）、安全性良好、易于实现和理解，RSA已成为一种应用极广的公钥密码体制，也是目前世界上唯一被广泛使用的公钥密码。在广泛的应用中，它不仅实现技术日趋成熟而且安全性逐渐得到证明。由此人们越发对RSA偏爱有加，并提出了许多基于RSA的加强或变形公钥密码体制。根据不同的应用需要，人们基于RSA算法开发了大量的加密方案与产品。</p><p><img src="http://pic.rmb.bdstatic.com/bjh/9728127b75870d2592e42699757952d8.png"></p><p><code>PS:RSA公钥加密的每次结果都不一样</code></p><p>明文:</p><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">CC<span class="hljs-number">1313113</span>!<br></code></pre></td></tr></tbody></table></figure><p>密文:</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">HNXogsqfIl4n0e2Tlk7iYi4AfDRD1kVIRBhBUjz0XxYrSqUixrDZ5Oox<span class="hljs-comment">//sYMFwqqsSMPJJ+wXKJywudtDUmIyJi0Ssj9UJr6eEXguqJrEJOQs+x+6qLJXr6A+PJaGjTBa0dgCOwibJl4ZcuvWnKYgM18lTNLviZtDhldvdO03s=</span><br><br></code></pre></td></tr></tbody></table></figure><p>逻辑实现:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_ALGORITHM</span> <span class="hljs-operator">=</span> <span class="hljs-string">"RSA"</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PUBLIC_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">"RSAPublicKey"</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PRIVATE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">"RSAPrivateKey"</span>;<br><br>    <span class="hljs-comment">// 1024 bits 的 RSA 密钥对，最大加密明文大小  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_ENCRYPT_BLOCK</span> <span class="hljs-operator">=</span> <span class="hljs-number">117</span>;<br><br>    <span class="hljs-comment">// 1024 bits 的 RSA 密钥对，最大解密密文大小  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_DECRYPT_BLOCK</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><br>    <span class="hljs-comment">// 生成密钥对  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title function_">initKey</span><span class="hljs-params">(<span class="hljs-type">int</span> keysize)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGen</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(KEY_ALGORITHM);<br>        <span class="hljs-comment">// 设置密钥对的 bit 数，越大越安全  </span><br>        keyPairGen.initialize(keysize);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGen.generateKeyPair();<br><br>        <span class="hljs-comment">// 获取公钥  </span><br>        <span class="hljs-type">RSAPublicKey</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> (RSAPublicKey) keyPair.getPublic();<br>        <span class="hljs-comment">// 获取私钥  </span><br>        <span class="hljs-type">RSAPrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> (RSAPrivateKey) keyPair.getPrivate();<br>        Map&lt;String, Object&gt; keyMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>        keyMap.put(PUBLIC_KEY, publicKey);<br>        keyMap.put(PRIVATE_KEY, privateKey);<br>        <span class="hljs-keyword">return</span> keyMap;<br>    }<br><br>    <span class="hljs-comment">// 获取公钥字符串  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPublicKeyStr</span><span class="hljs-params">(Map&lt;String, Object&gt; keyMap)</span> {<br>        <span class="hljs-comment">// 获得 map 中的公钥对象，转为 key 对象  </span><br>        <span class="hljs-type">Key</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (Key) keyMap.get(PUBLIC_KEY);<br>        <span class="hljs-comment">// 编码返回字符串  </span><br>        <span class="hljs-keyword">return</span> encryptBASE64(key.getEncoded());<br>    }<br><br>    <span class="hljs-comment">// 获取私钥字符串  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPrivateKeyStr</span><span class="hljs-params">(Map&lt;String, Object&gt; keyMap)</span> {<br>        <span class="hljs-comment">// 获得 map 中的私钥对象，转为 key 对象  </span><br>        <span class="hljs-type">Key</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (Key) keyMap.get(PRIVATE_KEY);<br>        <span class="hljs-comment">// 编码返回字符串  </span><br>        <span class="hljs-keyword">return</span> encryptBASE64(key.getEncoded());<br>    }<br><br>    <span class="hljs-comment">// 获取公钥  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PublicKey <span class="hljs-title function_">getPublicKey</span><span class="hljs-params">(String publicKeyString)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException {<br>        <span class="hljs-type">byte</span>[] publicKeyByte = Base64.getDecoder().decode(publicKeyString);<br>        <span class="hljs-type">X509EncodedKeySpec</span> <span class="hljs-variable">keySpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509EncodedKeySpec</span>(publicKeyByte);<br>        <span class="hljs-type">KeyFactory</span> <span class="hljs-variable">keyFactory</span> <span class="hljs-operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);<br>        <span class="hljs-keyword">return</span> keyFactory.generatePublic(keySpec);<br>    }<br><br>    <span class="hljs-comment">// 获取私钥  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PrivateKey <span class="hljs-title function_">getPrivateKey</span><span class="hljs-params">(String privateKeyString)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-type">byte</span>[] privateKeyByte = Base64.getDecoder().decode(privateKeyString);<br>        <span class="hljs-type">PKCS8EncodedKeySpec</span> <span class="hljs-variable">keySpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS8EncodedKeySpec</span>(privateKeyByte);<br>        <span class="hljs-type">KeyFactory</span> <span class="hljs-variable">keyFactory</span> <span class="hljs-operator">=</span> KeyFactory.getInstance(KEY_ALGORITHM);<br>        <span class="hljs-keyword">return</span> keyFactory.generatePrivate(keySpec);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * BASE64 编码返回加密字符串  </span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> key 需要编码的字节数组  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span> 编码后的字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encryptBASE64</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] key)</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getEncoder().encode(key));<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * BASE64 解码，返回字节数组  </span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> key 待解码的字符串  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span> 解码后的字节数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decryptBASE64(String key) {<br>        <span class="hljs-keyword">return</span> Base64.getDecoder().decode(key);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公钥加密  </span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> text         待加密的明文字符串  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKeyStr 公钥  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Return</span> 加密后的密文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt1</span><span class="hljs-params">(String text, String publicKeyStr)</span> {<br>        <span class="hljs-keyword">try</span> {<br><br>            System.out.println(<span class="hljs-string">"明文字符串为:"</span>+text);<br>            <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(KEY_ALGORITHM);<br>            cipher.init(Cipher.ENCRYPT_MODE, getPublicKey(publicKeyStr));<br>            <span class="hljs-type">byte</span>[] tempBytes = cipher.doFinal(text.getBytes(<span class="hljs-string">"UTF-8"</span>));<br>            <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(tempBytes);<br>        } <span class="hljs-keyword">catch</span> (Exception e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">"加密字符串["</span> + text + <span class="hljs-string">"]时遇到异常"</span>, e);<br>        }<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私钥解密  </span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secretText    待解密的密文字符串  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKeyStr 私钥  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解密后的明文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt1</span><span class="hljs-params">(String secretText, String privateKeyStr)</span> {<br>        <span class="hljs-keyword">try</span> {<br>            <span class="hljs-comment">// 生成私钥  </span><br>            <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(KEY_ALGORITHM);<br>            cipher.init(Cipher.DECRYPT_MODE, getPrivateKey(privateKeyStr));<br>            <span class="hljs-comment">// 密文解码  </span><br>            <span class="hljs-type">byte</span>[] secretTextDecoded = Base64.getDecoder().decode(secretText.getBytes(<span class="hljs-string">"UTF-8"</span>));<br>            <span class="hljs-type">byte</span>[] tempBytes = cipher.doFinal(secretTextDecoded);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(tempBytes);<br>        } <span class="hljs-keyword">catch</span> (Exception e) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">"解密字符串["</span> + secretText + <span class="hljs-string">"]时遇到异常"</span>, e);<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br>        Map&lt;String, Object&gt; keyMap;<br>        String cipherText;<br>        <span class="hljs-comment">// 原始明文  </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">"CC1313113!"</span>;<br><br>        <span class="hljs-comment">// 生成密钥对  </span><br>        keyMap = initKey(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> getPublicKeyStr(keyMap);<br>        System.out.println(<span class="hljs-string">"公钥:"</span>+publicKey);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> getPrivateKeyStr(keyMap);<br>        System.out.println(<span class="hljs-string">"私钥:"</span>+privateKey);<br><br>        <span class="hljs-comment">// 加密  </span><br>        cipherText = encrypt1(content, publicKey);<br>        System.out.println(<span class="hljs-string">"加密后的密文:"</span>+cipherText);<br><br>        <span class="hljs-comment">// 解密  </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">plainText</span> <span class="hljs-operator">=</span> decrypt1(cipherText, privateKey);<br>        System.out.println(<span class="hljs-string">"解密后明文:"</span>+plainText);<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011859239.png"></p><p>RSA每一次跑出来的密文结果都不相同</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011859230.png"></p><p>总的来说，非对称加密比对称加密更加安全，但同时也更加计算密集和复杂，因此在实际应用中需要根据具体情况来选择合适的加密方式。常见的做法是使用对称加密算法加密数据，然后使用非对称加密算法加密对称加密算法使用的密钥，这样既保证了数据的安全性，又避免了非对称加密算法的资源消耗。</p><h2 id="4-算法自吐"><a href="#4-算法自吐" class="headerlink" title="4.算法自吐"></a>4.算法自吐</h2><ul><li><p>算法助手使用示例</p><p>  运用了系统加解密包的话可以通过Hook系统的这些加解密库来获取它的明文以及密钥。</p><ol><li>将算法助手打开选择分析的算法</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011859011.png"></p><ol><li>重新运行后将算法都进行触发</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011900676.png"></p><ol><li>我们可以在日志中发现Hook到的通过系统加解密库的信息</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011900692.png"></p><ol><li>通过算法助手中的加密信息以及<a href="https://gchq.github.io/CyberChef/">CyberChef</a>网站来实现一下算法</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011900744.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202504011900806.png"></p></li></ul><h2 id="4-非标准加密算法"><a href="#4-非标准加密算法" class="headerlink" title="4.非标准加密算法"></a><strong>4.非标准加密算法</strong></h2><p>遇到不是常规的加密怎么办？</p><p>方法一:主动调用</p><p>方法二:扣算法</p><p>方法三:问问神奇的ChatGPT</p><p>推荐书目:</p><p><a href="https://book.douban.com/subject/30288807/">加密与解密（第4版）</a></p><p><a href="https://book.douban.com/subject/25861566/">Java加密与解密的艺术(第2版)</a></p><p><a href="https://book.douban.com/subject/35662338/">密码学原理与Java实现</a></p><p>文档:</p><p><a href="https://www.52pojie.cn/thread-1729095-1-1.html">安卓逆向中关于密码学、NDK开发（JNI调用）以及Java层逆向基础知识思维导图</a></p><p><a href="https://book.douban.com/subject/35662338/">密码学原理与Java实现</a></p><p><a href="https://blog.csdn.net/Oliver_xpl/article/details/90214896">MD5加密概述，原理及实现</a></p><p><a href="https://blog.csdn.net/piaoranyuji/article/details/126140261">RSA 加解密（Java 实现）</a></p><p><a href="https://blog.csdn.net/lemon_tree12138/article/details/50696926">密码学：RSA加密算法详解</a></p>]]></content>
    
    
    <categories>
      
      <category>密码学基础</category>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
      <tag>DES</tag>
      
      <tag>AES</tag>
      
      <tag>Base64</tag>
      
      <tag>算法助手</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xposd模块编写，API详解</title>
    <link href="/2025/03/26/ZJ7,8/Xposd%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99%EF%BC%8CAPI%E8%AF%A6%E8%A7%A3%201baa6f4b4daf802c9edfdb04c625b4b5/"/>
    <url>/2025/03/26/ZJ7,8/Xposd%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99%EF%BC%8CAPI%E8%AF%A6%E8%A7%A3%201baa6f4b4daf802c9edfdb04c625b4b5/</url>
    
    <content type="html"><![CDATA[<h1 id="Xposd模块编写，API详解"><a href="#Xposd模块编写，API详解" class="headerlink" title="Xposd模块编写，API详解"></a>Xposd模块编写，API详解</h1><h2 id="1-什么是Xposed？"><a href="#1-什么是Xposed？" class="headerlink" title="1.什么是Xposed？"></a><strong>1.什么是Xposed？</strong></h2><p>Xposed是一款可以在不修改APK的情况下影响程序运行的框架，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。在这个框架下，我们可以编写并加载自己编写的插件APP，实现对目标apk的注入拦截等。</p><ul><li>核心功能<ol><li><strong>动态Hook</strong>：无需修改APK即可拦截和修改目标方法的执行逻辑，例如改变返回值、插入代码等38。</li><li><strong>模块化扩展</strong>：开发者可通过编写模块（Module）实现功能扩展，模块间相互独立且可同时运行46。</li><li><strong>系统级控制</strong>：能够干预系统核心进程（如Zygote），影响所有应用的运行环境</li></ol></li></ul><h2 id="2-Xposed原理"><a href="#2-Xposed原理" class="headerlink" title="2.Xposed原理"></a><strong>2.Xposed原理</strong></h2><p>用自己实现的<strong>app_process</strong>替换掉了系统原本提供的<strong>app_process</strong>，加载一个额外的jar包，入口从原来的：&nbsp;&nbsp;<strong>com.android.internal.osZygoteInit.main()被替换成了：&nbsp;&nbsp;de.robv.android.xposed.XposedBridge.main()</strong>，</p><p>创建的Zygote进程就变成Hook的Zygote进程了，从而完成对zygote进程及其创建的Dalvik/ART虚拟机的劫持(zytoge注入)</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262059416.png"></p><ul><li><p>文字解释</p><h3 id="1-劫持Zygote进程"><a href="#1-劫持Zygote进程" class="headerlink" title="(1) 劫持Zygote进程"></a><strong>(1) 劫持Zygote进程</strong></h3><ul><li><strong>Zygote的作用</strong>：Android系统中所有应用进程均由Zygote进程孵化而来。Xposed通过替换系统文件<code>/system/bin/app_process</code>，在Zygote启动时加载自定义的<code>XposedBridge.jar</code>，从而接管Zygote的初始化流程。</li><li><strong>注入逻辑</strong>：修改后的<code>app_process</code>会优先执行<code>XposedBridge.main()</code>，而非原生的<code>ZygoteInit.main()</code>。此时，Xposed框架完成Hook机制的初始化，并加载所有启用的模块。</li></ul><h3 id="2-Hook机制实现"><a href="#2-Hook机制实现" class="headerlink" title="(2) Hook机制实现"></a><strong>(2) Hook机制实现</strong></h3><ul><li><strong>方法替换</strong>：Xposed将目标Java方法标记为Native方法，并将其实现指向自定义的<code>xposedCallHandler</code>函数。当方法被调用时，控制权会转移到Xposed框架，执行模块中定义的<code>beforeHookedMethod</code>和<code>afterHookedMethod</code>回调89。</li><li><strong>回调链管理</strong>：若多个模块Hook同一方法，Xposed会根据优先级排序执行回调，顺序为：<code>A.before → B.before → 原方法 → B.after → A.after</code>。</li></ul><h3 id="3-模块加载与执行"><a href="#3-模块加载与执行" class="headerlink" title="(3) 模块加载与执行"></a><strong>(3) 模块加载与执行</strong></h3><ul><li><strong>模块入口</strong>：每个Xposed模块需在<code>AndroidManifest.xml</code>中声明<code>xposedmodule</code>元数据，并通过<code>xposed_init</code>文件指定入口类。框架在Zygote启动时加载这些模块，并在目标应用启动时触发Hook逻辑34。</li><li><strong>API支持</strong>：通过<code>XposedHelpers</code>和<code>XposedBridge</code>等工具类，开发者可便捷地定位目标类与方法，例如使用<code>findAndHookMethod</code>实现方法拦截。</li></ul></li></ul><h3 id="3-Xposed的发展及免root框架"><a href="#3-Xposed的发展及免root框架" class="headerlink" title="3.Xposed的发展及免root框架"></a><strong>3.Xposed的发展及免root框架</strong></h3><table><thead><tr><th><strong>名称</strong></th><th><strong>地址</strong></th><th><strong>支持版本</strong></th><th><strong>是否免root</strong></th></tr></thead><tbody><tr><td>xposed</td><td><a href="https://github.com/rovo89/Xposed">https://github.com/rovo89/Xposed</a></td><td>2.3-8.1</td><td>否</td></tr><tr><td>EDXposed</td><td><a href="https://github.com/ElderDrivers/EdXposed">https://github.com/ElderDrivers/EdXposed</a></td><td>8.0-10</td><td>否</td></tr><tr><td>LSPosed</td><td><a href="https://github.com/LSPosed/LSPosed">https://github.com/LSPosed/LSPosed</a></td><td>8.1-13</td><td>否</td></tr><tr><td>VirtualXposed</td><td><a href="https://github.com/android-hacker/VirtualXposed">https://github.com/android-hacker/VirtualXposed</a></td><td>5.0-10.0</td><td>是</td></tr><tr><td>太极</td><td><a href="https://www.coolapk.com/apk/me.weishu.exp">https://www.coolapk.com/apk/me.weishu.exp</a></td><td>5.0-13</td><td>是</td></tr><tr><td>两仪</td><td><a href="https://www.coolapk.com/apk/io.twoyi">https://www.coolapk.com/apk/io.twoyi</a></td><td>8.1-13</td><td>是</td></tr><tr><td>天鉴</td><td><a href="https://github.com/Katana-Official/SPatch-Update">https://github.com/Katana-Official/SPatch-Update</a></td><td>6-10</td><td>是</td></tr></tbody></table><h3 id="4-Xposed可以做什么？"><a href="#4-Xposed可以做什么？" class="headerlink" title="4.Xposed可以做什么？"></a><strong>4.Xposed可以做什么？</strong></h3><p>1.修改app布局:<a href="https://github.com/kaisar945/Xposed-GodMode">上帝模式</a></p><p>2.劫持数据，修改参数值、返回值、主动调用等。例:微信防撤回、步数修改、一键新机</p><p><a href="https://github.com/kingsollyu/AppEnv">应用变量</a></p><p>3.自动化操作，例:微信抢红包</p><p>学习项目:</p><p><a href="https://www.xda-developers.com/best-xposed-modules/">2022 最好的Xposed模块: GravityBox, Pixelify, XPrivacyLua</a></p><p><a href="https://github.com/Lstaynight/xposed-dy">基于Xposed的抖音爬虫，抖音风控后自动一键新机，模拟一个全新的运行环境</a></p><p><a href="https://github.com/svengong/xcubebase">基于xposed的frida持久化方案</a></p><p><a href="https://github.com/monkeylord/XServer">A Xposed Module for Android Penetration Test, with NanoHttpd.</a></p><p><a href="https://github.com/GravityBox/GravityBox">GravityBox</a></p><p><a href="https://github.com/Xposed-Modules-Repo">Xposed-Modules-Repo</a></p><p><a href="https://github.com/ferredoxin/QNotified">一个旨在使QQ变得更好用的开源Xposed模块</a></p><p><a href="https://github.com/nining377/dolby_beta">杜比大喇叭</a></p><p><a href="https://github.com/shatyuka/Zhiliao">知乎去广告Xposed模块</a></p><p><a href="https://github.com/yujincheng08/BiliRoaming">哔哩漫游</a></p><p><a href="https://github.com/Mocha-L/QuJing">曲境</a></p><p><a href="https://github.com/monkeylord/XposedTemplateForAS">自动化创建Xposed模块及钩子，让Xposed模块编写时只需关注钩子实现</a></p><h3 id="5-Xposed环境配置"><a href="#5-Xposed环境配置" class="headerlink" title="5.Xposed环境配置"></a><strong>5.Xposed环境配置</strong></h3><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a><strong>前置</strong></h3><p>ubuntu虚拟机镜像，感谢沐阳哥提供的镜像！！！</p><p>内置:</p><ul><li><code>Frida</code>开发环境</li><li>动态分析及开发工具：android-studio</li><li>动态分析工具：ddms</li><li>静态分析工具：jadx1.4.4</li><li>动静态分析工具：jeb</li><li>动态分析工具：集成HyperPwn</li><li>静态分析工具：010 editor</li><li>抓包工具：Charles</li><li>抓包工具：WireShark</li><li>动态分析工具:unidbg</li></ul><p>vm虚拟机：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p><p>(或下载我打包好的)</p><p>激活码自行百度哦</p><p>第一步，安装虚拟机调整路径，输入激活码</p><p>第二步，导入镜像，文件-&gt;打开-&gt;选择解压好的镜像</p><p>第三步，点击运行，待初始化，输入密码:toor</p><hr><p>1.Android Studio创建新项目</p><p>2.将下载的xposedBridgeApi.jar包拖进libs文件夹</p><p>3.右击jar包，选择add as library</p><ul><li><p>4.修改xml文件配置</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 是否是xposed模块，xposed根据这个来判断是否是模块 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">&nbsp; &nbsp; <span class="hljs-attr">android:name</span>=<span class="hljs-string">"xposedmodule"</span></span><br><span class="hljs-tag">&nbsp; &nbsp; <span class="hljs-attr">android:value</span>=<span class="hljs-string">"true"</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 模块描述，显示在xposed模块列表那里第二行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">&nbsp; &nbsp; <span class="hljs-attr">android:name</span>=<span class="hljs-string">"xposeddescription"</span></span><br><span class="hljs-tag">&nbsp; &nbsp; <span class="hljs-attr">android:value</span>=<span class="hljs-string">"这是一个Xposed模块"</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 最低xposed版本号(lib文件名可知) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">&nbsp; &nbsp; <span class="hljs-attr">android:name</span>=<span class="hljs-string">"xposedminversion"</span></span><br><span class="hljs-tag">&nbsp; &nbsp; <span class="hljs-attr">android:value</span>=<span class="hljs-string">"89"</span> /&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262059490.png"></p></li><li><p>5.修改build.gradle,将此处修改为compileOnly 默认的是implementation</p>  <figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">**<span class="hljs-keyword">implementation</span> 使用该方式依赖的库将会参与编译和打包<br>compileOnly 只在编译时有效，不会参与打包**<br></code></pre></td></tr></tbody></table></figure><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262059812.png"></p></li><li><p>6.新建–&gt;Folder–&gt;Assets Folder，创建xposed_init(不要后缀名):只有一行代码，就是说明入口类</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262100155.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262100156.png"></p><p>  这里用来填写我们具体的hook入口，先建一个hook文档。根据新建的Hook文档来声明入口</p><p>  <code>com.cc.xoseddemo1.Hook</code></p></li><li><p>7.新建Hook类，实现IXposedHookLoadPackage接口，然后在handleLoadPackage函数内编写Hook逻辑</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262100386.png"></p><p>  继承了IXposedHookLoadPackag便拥有了hook的能力</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;<br><span class="hljs-keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hook</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IXposedHookLoadPackage</span> {<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLoadPackage</span><span class="hljs-params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="hljs-keyword">throws</span> Throwable {<br><br>&nbsp; &nbsp; }<br>}<br></code></pre></td></tr></tbody></table></figure><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262100074.png"></p></li></ul><h2 id="6-Xpoosed常用API"><a href="#6-Xpoosed常用API" class="headerlink" title="6.Xpoosed常用API"></a><strong>6.Xpoosed常用API</strong></h2><p><a href="https://github.com/fankes/YukiHookAPI">An efficient Hook API and Xposed Module solution built in Kotlin</a></p><ul><li><p>示例</p><ol><li>使用logcat对日志进行捕捉过滤</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262100371.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262100372.png"></p><ol><li>找到我们要Hook的普通方法，发现传入了a，我们对a进行Hook</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262101405.png"></p><ol><li>在hook之前需要先做一个判断，如果直接进行打包的话，会Hook手机中的所有应用，我们通过包名进行过滤</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262101120.png"></p><ol><li>将第2步复制的xposed片段复制进去，利用快捷键进行导包，完成Hook该函数方法的基本框架，如下图方法前后的两个回调函数。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262101716.png"></p><ol><li>修改传入的参数值，这里我们可以使用日志输出（可以在lsp软件中的日志里查看）的方式验证一下函数（用XP自带的API）</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262101026.png"></p><ul><li><p>语法解析</p><h3 id="一、代码逐层解析"><a href="#一、代码逐层解析" class="headerlink" title="一、代码逐层解析"></a>一、代码逐层解析</h3><h3 id="1-XposedBridge-log"><a href="#1-XposedBridge-log" class="headerlink" title="1.&nbsp;XposedBridge.log()"></a>1.&nbsp;<strong><code>XposedBridge.log()</code></strong></h3><ul><li><strong>作用</strong>：Xposed框架提供的日志输出接口，将内容写入Xposed Installer的日志系统（可通过Xposed应用查看）。</li><li><strong>语法特性</strong>：<ul><li><code>XposedBridge</code>&nbsp;是Xposed框架的核心类，提供模块与框架的交互接口。</li><li><code>log()</code>&nbsp;是静态方法，可直接调用，无需实例化对象。</li><li>参数类型为&nbsp;<code>String</code>，需传递字符串内容。</li></ul></li></ul><h3 id="2-param-args"><a href="#2-param-args" class="headerlink" title="2.&nbsp;param.args"></a>2.&nbsp;<strong><code>param.args</code></strong></h3><ul><li><p><strong><code>param</code>&nbsp;的来源</strong>：</p><ul><li><p>来自Xposed Hook回调函数的参数，通常是&nbsp;<code>XC_MethodHook.MethodHookParam</code>&nbsp;对象。</p></li><li><p>例如在Hook方法时定义的回调：</p>  <figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">XposedHelpers</span>.<span class="hljs-title function_">findAndHookMethod</span>(<span class="hljs-string">"com.example.TargetClass"</span>,<br>    loadPackageParam.<span class="hljs-property">classLoader</span>,<br>    <span class="hljs-string">"targetMethod"</span>,<br>    <span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title function_">XC_MethodHook</span>(<span class="hljs-params"></span>) {<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">beforeHookedMethod</span>(<span class="hljs-params"><span class="hljs-title class_">MethodHookParam</span> param</span>) {<br>            <span class="hljs-comment">// 这里的param即MethodHookParam实例</span><br>            <span class="hljs-title class_">XposedBridge</span>.<span class="hljs-title function_">log</span>(param.<span class="hljs-property">args</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">toString</span>());<br>        }<br>    });<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong><code>args</code>&nbsp;属性</strong>：</p><ul><li>是被Hook方法的参数列表（<code>Object[]</code>&nbsp;数组）。</li><li>例如：若被Hook方法签名是&nbsp;<code>void func(String arg1, int arg2)</code>，则：<ul><li><code>param.args[0]</code>&nbsp;对应&nbsp;<code>arg1</code>（类型为String）</li><li><code>param.args[1]</code>&nbsp;对应&nbsp;<code>arg2</code>（类型为Integer，自动装箱）</li></ul></li></ul></li></ul><h3 id="3-param-args-0"><a href="#3-param-args-0" class="headerlink" title="3.&nbsp;param.args[0]"></a>3.&nbsp;<strong><code>param.args[0]</code></strong></h3><ul><li>表示获取被Hook方法的&nbsp;<strong>第一个参数</strong>。</li><li>索引从0开始：<ul><li><code>param.args[0]</code>&nbsp;→ 第1个参数</li><li><code>param.args[1]</code>&nbsp;→ 第2个参数</li><li>依此类推。</li></ul></li><li><strong>注意事项</strong>：<ul><li>若方法无参数（如&nbsp;<code>void func()</code>），访问&nbsp;<code>args[0]</code>&nbsp;会导致&nbsp;<code>ArrayIndexOutOfBoundsException</code>。</li><li>需确保目标方法至少有一个参数。</li></ul></li></ul><h3 id="4-toString"><a href="#4-toString" class="headerlink" title="4.&nbsp;.toString()"></a>4.&nbsp;<strong><code>.toString()</code></strong></h3><ul><li>将参数对象转换为字符串：<ul><li>若参数是Java对象（如String、自定义类实例），调用其&nbsp;<code>toString()</code>&nbsp;方法。</li><li>若参数是基本类型（如int、boolean），自动装箱为Integer、Boolean后调用&nbsp;<code>toString()</code>。</li></ul></li><li><strong>风险点</strong>：<ul><li><p>若参数为&nbsp;<code>null</code>，调用&nbsp;<code>null.toString()</code>&nbsp;会抛出&nbsp;<code>NullPointerException</code>。</p></li><li><p>可优化为安全调用：</p>  <figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(param.<span class="hljs-property">args</span>[<span class="hljs-number">0</span>] != <span class="hljs-literal">null</span> ? param.<span class="hljs-property">args</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">toString</span>() : <span class="hljs-string">"null"</span>)<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><hr><h3 id="二、完整代码流程"><a href="#二、完整代码流程" class="headerlink" title="二、完整代码流程"></a>二、完整代码流程</h3><ol><li><strong>Hook目标方法</strong>：通过Xposed框架注册Hook点，拦截某个类的方法调用。</li><li><strong>进入回调函数</strong>：当目标方法被调用时，触发&nbsp;<code>beforeHookedMethod</code>&nbsp;或&nbsp;<code>afterHookedMethod</code>&nbsp;回调。</li><li><strong>访问参数</strong>：通过&nbsp;<code>param.args</code>&nbsp;数组获取方法参数值。</li><li><strong>转换字符串</strong>：调用&nbsp;<code>toString()</code>&nbsp;将参数转为可读字符串。</li><li><strong>记录日志</strong>：通过&nbsp;<code>XposedBridge.log()</code>&nbsp;输出到Xposed日志系统。</li></ol><hr><h3 id="三、典型应用场景"><a href="#三、典型应用场景" class="headerlink" title="三、典型应用场景"></a>三、典型应用场景</h3><h3 id="场景：监控某个应用的登录密码参数"><a href="#场景：监控某个应用的登录密码参数" class="headerlink" title="场景：监控某个应用的登录密码参数"></a>场景：监控某个应用的登录密码参数</h3><p>  假设Hook一个登录方法&nbsp;<code>login(String username, String password)</code>：</p><p>  java</p><p>  复制</p>  <figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">XposedBridge.<span class="hljs-built_in">log</span>(<span class="hljs-string">"用户名："</span> + param.<span class="hljs-keyword">args</span>[0].<span class="hljs-keyword">toString</span>());<br>XposedBridge.<span class="hljs-built_in">log</span>(<span class="hljs-string">"密码："</span> + param.<span class="hljs-keyword">args</span>[1].<span class="hljs-keyword">toString</span>());<br></code></pre></td></tr></tbody></table></figure><p>  输出结果：</p><p>  复制</p>  <figure class="highlight nsis"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis">用户名：<span class="hljs-literal">admin</span><br>密码：<span class="hljs-number">123456</span><br></code></pre></td></tr></tbody></table></figure><h3 id="防御措施（逆向对抗）："><a href="#防御措施（逆向对抗）：" class="headerlink" title="防御措施（逆向对抗）："></a>防御措施（逆向对抗）：</h3><ul><li><strong>参数混淆</strong>：将参数类型从String改为byte数组，增加可读性难度。</li><li><strong>主动检测Xposed</strong>：在关键方法中检测Xposed环境，若存在则拒绝执行。</li></ul></li></ul><ol><li>同样我们也可以用安卓自带的log</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262102101.png"></p><ul><li><p>语法解析</p><h3 id="1-Log-d-zj2595-param-args-0-toString"><a href="#1-Log-d-zj2595-param-args-0-toString" class="headerlink" title="1.&nbsp;Log.d(&quot;zj2595&quot;, param.args[0.toString());"></a><strong>1.&nbsp;<code>Log.d("zj2595", param.args[0.toString());</code></strong></h3><ul><li><strong>作用</strong>：通过Android原生日志系统输出被Hook方法的第一个参数值。</li><li><strong>语法</strong>：<ul><li><code>Log.d(String tag, String msg)</code>：Android的调试日志接口，<code>tag</code>为日志标签，<code>msg</code>为日志内容。</li><li><code>param.args[0]</code>：获取被Hook方法的第一个参数（索引从0开始）。</li><li><code>toString()</code>：将参数对象转为字符串（可能因对象类型不同而结果不同）。</li></ul></li><li><strong>风险</strong>：<ul><li><p>若参数为&nbsp;<code>null</code>，<code>toString()</code>&nbsp;会抛出&nbsp;<code>NullPointerException</code>。</p></li><li><p>建议优化为安全调用：</p><p>  java</p><p>  复制</p>  <figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">String arg0 = (param.<span class="hljs-keyword">args</span>[0] != null) ? param.<span class="hljs-keyword">args</span>[0].<span class="hljs-keyword">toString</span>() : <span class="hljs-string">"null"</span>;<br><span class="hljs-keyword">Log</span>.<span class="hljs-built_in">d</span>(<span class="hljs-string">"zj2595"</span>, arg0);<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><h3 id="2-XposedBridge-log-param-args-0-toString"><a href="#2-XposedBridge-log-param-args-0-toString" class="headerlink" title="2.&nbsp;XposedBridge.log(param.args[0].toString());"></a><strong>2.&nbsp;<code>XposedBridge.log(param.args[0].toString());</code></strong></h3><ul><li><strong>作用</strong>：通过Xposed框架的日志系统记录参数值。</li><li><strong>特点</strong>：<ul><li>日志内容可在Xposed Installer的日志页面查看，独立于Android原生日志。</li><li>适合长期调试，但缺乏日志标签分类。</li></ul></li></ul><h3 id="3-String-a-pt"><a href="#3-String-a-pt" class="headerlink" title="3.&nbsp;String a = &quot;pt&quot;;"></a><strong>3.&nbsp;<code>String a = "pt";</code></strong></h3><ul><li><strong>作用</strong>：定义一个字符串变量&nbsp;<code>a</code>，值为&nbsp;<code>"pt"</code>。</li><li><strong>潜在用途</strong>：<ul><li>硬编码替换目标参数值（如修改密码、密钥等）。</li><li>可作为中间变量防止直接暴露敏感逻辑。</li></ul></li></ul><h3 id="4-param-args-0-a"><a href="#4-param-args-0-a" class="headerlink" title="4.&nbsp;param.args[0] = a;"></a><strong>4.&nbsp;<code>param.args[0] = a;</code></strong></h3><ul><li><strong>作用</strong>：修改被Hook方法的第一个参数值为&nbsp;<code>"pt"</code>。</li><li><strong>原理</strong>：<ul><li>Xposed框架的&nbsp;<code>MethodHookParam</code>&nbsp;对象允许在&nbsp;<code>beforeHookedMethod</code>&nbsp;阶段修改参数值。</li><li>修改后的值会传递给原始方法执行，从而实现<strong>运行时参数篡改</strong>。</li></ul></li><li><strong>限制</strong>：<ul><li>只能在&nbsp;<code>beforeHookedMethod</code>&nbsp;回调中修改参数（<code>afterHookedMethod</code>&nbsp;阶段修改无效）。</li><li>参数类型需匹配目标方法声明类型，否则可能引发类型转换异常。</li></ul></li></ul><h3 id="5-Log-d-zj2595-param-args-0-toString"><a href="#5-Log-d-zj2595-param-args-0-toString" class="headerlink" title="5.&nbsp;Log.d(&quot;zj2595&quot;, param.args[0].toString());"></a><strong>5.&nbsp;<code>Log.d("zj2595", param.args[0].toString());</code></strong></h3><ul><li><strong>作用</strong>：验证参数是否被成功修改。</li><li><strong>预期输出</strong>：<ul><li>若修改成功，日志应显示&nbsp;<code>pt</code>。</li><li>若修改失败，日志仍显示原始值（需检查Hook点是否正确）。</li></ul></li></ul><hr><h3 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a><strong>完整流程</strong></h3><ol><li><strong>拦截方法调用</strong>：通过Xposed Hook目标方法，进入&nbsp;<code>beforeHookedMethod</code>&nbsp;回调。</li><li><strong>记录原始参数</strong>：通过Android日志和Xposed日志输出原始参数值。</li><li><strong>篡改参数值</strong>：将第一个参数替换为硬编码值&nbsp;<code>"pt"</code>。</li><li><strong>传递修改后的参数</strong>：Xposed框架将修改后的参数传递给原始方法。</li><li><strong>验证篡改结果</strong>：通过第二次日志输出确认修改是否生效。</li></ol><hr><h3 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a><strong>典型应用场景</strong></h3><h3 id="场景：绕过密码验证"><a href="#场景：绕过密码验证" class="headerlink" title="场景：绕过密码验证"></a><strong>场景：绕过密码验证</strong></h3><p>  假设目标方法为&nbsp;<code>checkPassword(String password)</code>：</p><p>  java</p><p>  复制</p>  <figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">checkPassword</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> password</span>) {<br>    <span class="hljs-keyword">return</span> password.<span class="hljs-title function_">equals</span>(<span class="hljs-string">"secret"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>  通过以下代码篡改参数：</p><p>  java</p><p>  复制</p>  <figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">param.args[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span> <span class="hljs-string">"secret"</span><span class="hljs-comment">; // 强制让密码验证通过</span><br></code></pre></td></tr></tbody></table></figure><p>  此时无论用户输入什么密码，方法都会返回&nbsp;<code>true</code>。</p><h3 id="防御措施（逆向对抗）：-1"><a href="#防御措施（逆向对抗）：-1" class="headerlink" title="防御措施（逆向对抗）："></a><strong>防御措施（逆向对抗）</strong>：</h3><ol><li><p><strong>参数校验</strong>：在方法内部对参数值进行二次校验。</p><p> java</p><p> 复制</p> <figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> checkPassword(String <span class="hljs-keyword">password</span>) {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">password</span> == <span class="hljs-keyword">null</span> || <span class="hljs-keyword">password</span>.length() != <span class="hljs-number">6</span>) {<br>        throw <span class="hljs-built_in">new</span> SecurityException("Invalid password format");<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">password</span>.equals("secret");<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>检测Hook环境</strong>：通过检查调用栈或类加载器，发现Xposed存在时拒绝执行。</p></li></ol></li><li><p>log.d和log.e的区别</p><p>  在Android开发中，<code>Log.d()</code>&nbsp;和&nbsp;<code>Log.e()</code>&nbsp;是&nbsp;<code>android.util.Log</code>&nbsp;类提供的不同级别的日志输出方法。它们的核心区别在于<strong>日志级别</strong>、<strong>使用场景</strong>和<strong>输出表现</strong>。以下是详细对比：</p><hr><h3 id="1-日志级别与语义"><a href="#1-日志级别与语义" class="headerlink" title="1. 日志级别与语义"></a><strong>1. 日志级别与语义</strong></h3><table><thead><tr><th><strong>方法</strong></th><th><strong>级别（Verbosity）</strong></th><th><strong>语义含义</strong></th></tr></thead><tbody><tr><td><code>Log.d(String tag, String msg)</code></td><td><strong>DEBUG</strong></td><td>输出调试信息，用于开发阶段追踪程序流程、变量值等非关键信息。</td></tr><tr><td><code>Log.e(String tag, String msg)</code></td><td><strong>ERROR</strong></td><td>输出错误信息，表示发生了严重问题（如崩溃、功能失效等），需要优先处理。</td></tr></tbody></table><hr><h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a><strong>2. 使用场景</strong></h3><h3 id="Log-d-（调试日志）"><a href="#Log-d-（调试日志）" class="headerlink" title="Log.d()（调试日志）"></a><strong><code>Log.d()</code>（调试日志）</strong></h3><ul><li><p><strong>适用场景</strong>：</p><ul><li>追踪代码执行流程（如方法调用顺序）。</li><li>输出临时变量的值（如参数、中间计算结果）。</li><li>调试逻辑分支（如条件判断是否进入某个分支）。</li></ul></li><li><p><strong>示例</strong>：</p><p>  java</p><p>  复制</p>  <figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">Log</span>.<span class="hljs-built_in">d</span>(<span class="hljs-string">"MainActivity"</span>, <span class="hljs-string">"onCreate() called"</span>); <span class="hljs-comment">// 跟踪生命周期</span><br><span class="hljs-keyword">Log</span>.<span class="hljs-built_in">d</span>(<span class="hljs-string">"Network"</span>, <span class="hljs-string">"Response data: "</span> + response); <span class="hljs-comment">// 输出网络响应数据</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="Log-e-（错误日志）"><a href="#Log-e-（错误日志）" class="headerlink" title="Log.e()（错误日志）"></a><strong><code>Log.e()</code>（错误日志）</strong></h3><ul><li><p><strong>适用场景</strong>：</p><ul><li>记录程序异常（如&nbsp;<code>try-catch</code>&nbsp;块中的错误）。</li><li>标记不可恢复的故障（如数据库连接失败、关键API调用错误）。</li><li>输出对用户体验有重大影响的错误（如支付失败、数据丢失）。</li></ul></li><li><p><strong>示例</strong>：</p><p>  java</p><p>  复制</p>  <figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">try</span> {<br>    parseJson(rawData);<br>} <span class="hljs-keyword">catch</span> (JSONException e) {<br>    <span class="hljs-built_in">Log</span>.e(<span class="hljs-string">"Parser"</span>, <span class="hljs-string">"JSON解析失败: "</span> + e.getMessage()); <span class="hljs-comment">// 记录致命错误</span><br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><hr><h3 id="3-输出表现"><a href="#3-输出表现" class="headerlink" title="3. 输出表现"></a><strong>3. 输出表现</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong><code>Log.d()</code></strong></th><th><strong><code>Log.e()</code></strong></th></tr></thead><tbody><tr><td><strong>Logcat显示颜色</strong></td><td>默认黑色（或灰色，取决于IDE主题）</td><td><strong>红色</strong>（高亮提示，易于快速定位）</td></tr><tr><td><strong>过滤优先级</strong></td><td>低</td><td>高（<code>ERROR</code>&nbsp;&gt;&nbsp;<code>WARN</code>&nbsp;&gt;&nbsp;<code>INFO</code>&nbsp;&gt;&nbsp;<code>DEBUG</code>&nbsp;&gt;&nbsp;<code>VERBOSE</code>）</td></tr><tr><td><strong>默认可见性</strong></td><td>通常在调试版本（Debug Build）启用</td><td>始终输出（即使发布版本也可能保留）</td></tr></tbody></table><hr><h3 id="4-实际应用建议"><a href="#4-实际应用建议" class="headerlink" title="4. 实际应用建议"></a><strong>4. 实际应用建议</strong></h3><h3 id="何时用-Log-d？"><a href="#何时用-Log-d？" class="headerlink" title="何时用&nbsp;Log.d？"></a><strong>何时用&nbsp;<code>Log.d</code>？</strong></h3><ul><li><p>开发阶段临时调试，需在<strong>发布版本中移除</strong>（通过&nbsp;<code>BuildConfig.DEBUG</code>&nbsp;控制）：</p>  <figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">if</span> (BuildConfig.DEBUG) {<br>    <span class="hljs-keyword">Log</span>.<span class="hljs-built_in">d</span>(<span class="hljs-string">"Tag"</span>, <span class="hljs-string">"调试信息"</span>); <span class="hljs-comment">// 仅调试版本输出</span><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>输出高频次、非关键信息（如循环内的变量值）。</p></li></ul><h3 id="何时用-Log-e？"><a href="#何时用-Log-e？" class="headerlink" title="何时用&nbsp;Log.e？"></a><strong>何时用&nbsp;<code>Log.e</code>？</strong></h3><ul><li>记录<strong>必须修复</strong>的问题（如崩溃、数据错误）。</li><li>需要长期监控的严重事件（即使应用已发布）。</li></ul><hr><h3 id="5-逆向工程中的特殊用途"><a href="#5-逆向工程中的特殊用途" class="headerlink" title="5. 逆向工程中的特殊用途"></a><strong>5. 逆向工程中的特殊用途</strong></h3><p>  在Android逆向分析中，日志输出常用于动态调试：</p><ul><li><p><strong><code>Log.d</code></strong>：用于追踪目标方法的参数传递或流程分支。</p>  <figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// Hook方法并输出参数</span><br>XposedBridge.<span class="hljs-built_in">log</span>(<span class="hljs-string">"参数1: "</span> + param.<span class="hljs-keyword">args</span>[0]);<br><span class="hljs-keyword">Log</span>.<span class="hljs-built_in">d</span>(<span class="hljs-string">"Hook"</span>, <span class="hljs-string">"参数1: "</span> + param.<span class="hljs-keyword">args</span>[0]); <span class="hljs-comment">// 双保险记录</span><br></code></pre></td></tr></tbody></table></figure></li><li><p><strong><code>Log.e</code></strong>：标记关键错误（如加密算法失败、反调试检测触发）。</p>  <figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">if</span> (detectXposed()) { <span class="hljs-comment">// 检测到Xposed环境</span><br>    <span class="hljs-keyword">Log</span>.<span class="hljs-built_in">e</span>(<span class="hljs-string">"Security"</span>, <span class="hljs-string">"Xposed框架已注入！"</span>); <span class="hljs-comment">// 高亮提示风险</span><br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><hr><h3 id="6-其他日志方法对比"><a href="#6-其他日志方法对比" class="headerlink" title="6. 其他日志方法对比"></a><strong>6. 其他日志方法对比</strong></h3><table><thead><tr><th><strong>方法</strong></th><th><strong>级别</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td><code>Log.v()</code></td><td>VERBOSE</td><td>最详细的日志（极少使用）</td></tr><tr><td><code>Log.i()</code></td><td>INFO</td><td>普通流程信息（如服务启动）</td></tr><tr><td><code>Log.w()</code></td><td>WARN</td><td>警告（潜在问题，但未导致错误）</td></tr></tbody></table></li></ul><p>  7.我们修改好后运行程序，并在手机上勾选我们的Demo模块，再进行查看会发现参数已修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262103369.png"></p><ol><li>返回值的Hook，先打印返回值，然后进行修改</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262103041.png"></p><ul><li><p>语法分析</p><h3 id="代码作用"><a href="#代码作用" class="headerlink" title="代码作用"></a><strong>代码作用</strong></h3><ul><li><p><strong><code>Log.d("zj2595", param.getResult().toString())</code></strong>：</p><p>  记录被Hook方法的<strong>原始返回值</strong>到Android调试日志（Logcat）。</p></li><li><p><strong><code>param.setResult("222222")</code></strong>：</p><p>  强制修改被Hook方法的<strong>最终返回值</strong>为字符串&nbsp;<code>"222222"</code>。</p></li></ul><hr><h3 id="使用场景（逆向工程典型用途）"><a href="#使用场景（逆向工程典型用途）" class="headerlink" title="使用场景（逆向工程典型用途）"></a><strong>使用场景（逆向工程典型用途）</strong></h3><ol><li><p><strong>绕过返回值校验</strong>：</p><p> 例如，Hook一个验证函数&nbsp;<code>boolean checkLicense()</code>，将其布尔型返回值从&nbsp;<code>false</code>&nbsp;改为&nbsp;<code>true</code>，实现破解授权逻辑。</p></li><li><p><strong>篡改敏感数据</strong>：</p><p> 例如，Hook获取设备ID的方法&nbsp;<code>String getDeviceId()</code>，返回伪造的ID值。</p></li><li><p><strong>动态调试分析</strong>：</p><p> 通过输出原始返回值，观察目标方法的执行结果，辅助静态反编译分析。</p></li></ol><hr><h3 id="代码执行原理"><a href="#代码执行原理" class="headerlink" title="代码执行原理"></a><strong>代码执行原理</strong></h3><h3 id="1-依赖的上下文"><a href="#1-依赖的上下文" class="headerlink" title="1. 依赖的上下文"></a><strong>1. 依赖的上下文</strong></h3><ul><li><p><strong><code>param</code>&nbsp;的类型</strong>：</p><p>  <code>XC_MethodHook.MethodHookParam</code>（Xposed框架的回调参数对象）。</p></li><li><p><strong>触发阶段</strong>：</p><p>  代码需写在&nbsp;<code>afterHookedMethod</code>&nbsp;回调中（若在&nbsp;<code>beforeHookedMethod</code>&nbsp;阶段调用&nbsp;<code>getResult()</code>，返回值可能为&nbsp;<code>null</code>）。</p></li></ul><h3 id="2-关键方法说明"><a href="#2-关键方法说明" class="headerlink" title="2. 关键方法说明"></a><strong>2. 关键方法说明</strong></h3><table><thead><tr><th><strong>方法</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>param.getResult()</code></td><td>获取被Hook方法的原始返回值（需在&nbsp;<code>afterHookedMethod</code>&nbsp;阶段调用有效）。</td></tr><tr><td><code>param.setResult()</code></td><td>强制修改方法的返回值（可完全覆盖原始逻辑的执行结果）。</td></tr></tbody></table><h3 id="3-执行流程"><a href="#3-执行流程" class="headerlink" title="3. 执行流程"></a><strong>3. 执行流程</strong></h3><ol><li><strong>拦截目标方法</strong>：通过Xposed Hook目标方法（如&nbsp;<code>getToken()</code>）。</li><li><strong>进入回调阶段</strong>：在&nbsp;<code>afterHookedMethod</code>&nbsp;中执行代码。</li><li><strong>记录原始返回值</strong>：通过&nbsp;<code>Log.d</code>&nbsp;输出原始值到Logcat。</li><li><strong>篡改返回值</strong>：使用&nbsp;<code>setResult</code>&nbsp;覆盖为指定值（如&nbsp;<code>"222222"</code>）。</li><li><strong>传递结果</strong>：修改后的值返回给调用者，原始逻辑被绕过。</li></ol><hr><h3 id="完整示例（Xposed模块代码）"><a href="#完整示例（Xposed模块代码）" class="headerlink" title="完整示例（Xposed模块代码）"></a><strong>完整示例（Xposed模块代码）</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.example.TargetClass"</span>,<br>    loadPackageParam.classLoader,<br>    <span class="hljs-string">"getSecretData"</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> {<br>            <span class="hljs-comment">// 1. 记录原始返回值</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">originalResult</span> <span class="hljs-operator">=</span> param.getResult();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">logMsg</span> <span class="hljs-operator">=</span> (originalResult != <span class="hljs-literal">null</span>) ? originalResult.toString() : <span class="hljs-string">"null"</span>;<br>            Log.d(<span class="hljs-string">"zj2595"</span>, <span class="hljs-string">"原始返回值: "</span> + logMsg);<br>            XposedBridge.log(<span class="hljs-string">"原始返回值: "</span> + logMsg);<br><br>            <span class="hljs-comment">// 2. 篡改返回值</span><br>            param.setResult(<span class="hljs-string">"222222"</span>);<br><br>            <span class="hljs-comment">// 3. 验证修改结果</span><br>            Log.d(<span class="hljs-string">"zj2595"</span>, <span class="hljs-string">"修改后返回值: "</span> + param.getResult().toString());<br>        }<br>    });<br></code></pre></td></tr></tbody></table></figure><hr><h3 id="逆向对抗与防御"><a href="#逆向对抗与防御" class="headerlink" title="逆向对抗与防御"></a><strong>逆向对抗与防御</strong></h3><h3 id="针对返回值篡改的防护"><a href="#针对返回值篡改的防护" class="headerlink" title="针对返回值篡改的防护"></a><strong>针对返回值篡改的防护</strong></h3><ol><li><p><strong>签名校验</strong>：</p><p> 在关键方法中增加对返回值的二次校验（如哈希校验）：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> fetchFromServer();<br>    <span class="hljs-keyword">if</span> (!verifyHash(data)) { <span class="hljs-comment">// 校验数据完整性</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">"数据被篡改！"</span>);<br>    }<br>    <span class="hljs-keyword">return</span> data;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>混淆返回值类型</strong>：</p><p> 使用复杂对象（非基本类型）作为返回值，增加篡改难度：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ResultBean <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultBean</span>(<span class="hljs-number">200</span>, <span class="hljs-string">"OK"</span>, encryptedData);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>检测Hook环境</strong>：</p><p> 在方法内部检查调用栈或类加载器，识别Xposed注入：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (isXposedActive()) {<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">"检测到Hook框架！"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol></li></ul></li></ul><h3 id="1-Hook普通方法"><a href="#1-Hook普通方法" class="headerlink" title="1.Hook普通方法"></a><strong>1.Hook普通方法</strong></h3><p>修改返回值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, loadPackageParam.classLoader, <span class="hljs-string">"a"</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;param.setResult(<span class="hljs-number">999</span>);<br>&nbsp; &nbsp; }<br>});<br><br></code></pre></td></tr></tbody></table></figure><ul><li><p>语法详解</p><ol><li><p><strong>XposedHelpers.findAndHookMethod(…)</strong></p><p> 这是Xposed框架提供的一个辅助方法，用于在指定类中查找某个方法并对其进行hook（拦截）。</p><ul><li><strong>目标类</strong>：第一个参数 <code>"com.zj.wuaipojie.Demo"</code> 表示我们希望hook的类。</li><li><strong>类加载器</strong>：第二个参数 <code>loadPackageParam.classLoader</code> 指定了加载目标类的类加载器，这样可以确保我们能够正确定位到类文件。</li><li><strong>方法名称</strong>：第三个参数 <code>"a"</code> 指明了要hook的方法名。如果该类中有多个同名方法，则后续参数（即参数类型）会帮助确定具体哪一个重载版本。</li><li><strong>方法参数</strong>：第四个参数 <code>String.class</code> 表示该方法接收一个类型为String的参数。</li><li><strong>回调对象</strong>：最后一个参数是一个 <code>new XC_MethodHook()</code> 实例，里面重写了 <code>afterHookedMethod</code> 方法，这个方法将在原方法执行完毕后被调用。</li></ul></li><li><p><strong>XC_MethodHook 的作用</strong></p><p> XC_MethodHook 是Xposed框架提供的一个钩子回调类，它允许你在原方法调用之前（onEnter）或者之后（onLeave/afterHookedMethod）插入自己的代码。</p><ul><li>此处我们只重写了 <code>afterHookedMethod</code> 方法，意味着在原方法执行完成后，我们会执行我们自己的代码逻辑。</li></ul></li><li><p><strong>afterHookedMethod 方法中的操作</strong></p><ul><li><p><strong>super.afterHookedMethod(param);</strong></p><p>  调用了父类的方法，这通常是为了保持一些内部处理流程。如果不需要特殊逻辑，可以省略这行，但有时保留有助于确保默认行为得以执行。</p></li><li><p><strong>param.setResult(999);</strong></p><p>  这行代码非常关键：它修改了原方法的返回值。无论原方法执行后产生了什么返回值，这里都会将其替换为整数999。</p><p>  换句话说，当应用中任何地方调用 <code>com.zj.wuaipojie.Demo</code> 类中名为 <code>a</code> 的方法时（传入一个String参数），即便该方法本身实现了某种逻辑，最终返回的结果都会被hook后改为999。</p></li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>目的</strong>：通过Xposed框架拦截目标类中方法的执行，并在方法执行完成后强制修改其返回值。</li><li><strong>应用场景</strong>：常用于逆向工程和动态调试，比如绕过某些安全检查或修改应用行为。</li><li><strong>关键点</strong>：<ul><li>使用 <code>findAndHookMethod</code> 来定位和hook目标方法；</li><li>在 <code>afterHookedMethod</code> 回调中使用 <code>param.setResult</code> 修改返回值，从而覆盖原方法的执行结果。</li></ul></li></ul></li></ul><p>修改参数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, loadPackageParam.classLoader, <span class="hljs-string">"a"</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">"pt"</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;param.args[<span class="hljs-number">0</span>] = a;&nbsp; &nbsp; }<br>});<br><br></code></pre></td></tr></tbody></table></figure><ul><li><p>语法详解</p><ol><li><p><strong>XposedHelpers.findAndHookMethod(…)</strong></p><p> 这是 Xposed 框架提供的一个便捷方法，用于在指定的类中查找并 hook 某个方法。</p><ul><li><code>"com.zj.wuaipojie.Demo"</code>：目标类的全限定名，即我们要 hook 的类。</li><li><code>loadPackageParam.classLoader</code>：用于加载目标类的类加载器，确保能找到该类。</li><li><code>"a"</code>：目标方法的名称，表示要 hook 的方法名是 <code>"a"</code>。</li><li><code>String.class</code>：目标方法的参数类型，这里表示方法 <code>"a"</code> 接收一个 <code>String</code> 类型的参数。</li><li><code>new XC_MethodHook() { ... }</code>：传入一个匿名内部类，用于定义 hook 后的回调行为。</li></ul></li><li><p><strong>beforeHookedMethod 回调</strong></p><p> 这个方法会在目标方法执行之前被调用。其主要作用是允许我们在原方法运行之前修改传入的参数或执行其他操作。</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>    <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">"pt"</span>;<br>    param.args[<span class="hljs-number">0</span>] = a;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p><strong>super.beforeHookedMethod(param);</strong></p><p>  调用父类的方法，通常是为了保持默认行为。这一行在很多场景中可以省略，但有时保留能确保框架内部逻辑正常执行。</p></li><li><p><strong>String a = “pt”;</strong></p><p>  定义了一个字符串变量 <code>a</code>，并赋值为 <code>"pt"</code>。</p></li><li><p><strong>param.args[0] = a;</strong></p><p>  修改了 <code>param.args</code> 数组中索引为 0 的参数值（即传入目标方法的第一个参数）。原来传入方法的 <code>String</code> 参数将被替换为 <code>"pt"</code>。</p><p>  换句话说，每当目标类 <code>com.zj.wuaipojie.Demo</code> 中名为 <code>"a"</code> 的方法被调用时，无论调用方传递的参数是什么，都会在方法执行前被强制改为 <code>"pt"</code>。</p></li></ul></li></ol><hr><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><strong>修改行为</strong>：这种 hook 技术常用于修改应用逻辑。例如，若目标方法依据传入的字符串参数执行不同操作，改变参数值可以绕过某些检查或改变原有逻辑。</li><li><strong>调试与逆向工程</strong>：在分析应用时，通过修改方法参数，可以观察不同参数对方法执行结果的影响，帮助开发者更好地理解程序内部流程。</li></ul><hr><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>  这段代码的作用是在目标方法 <code>"a"</code> 被调用之前，将它的第一个参数（String 类型）修改为固定值 <code>"pt"</code>。这种方式允许开发者动态改变应用行为，而无需修改原始代码，是 Xposed 框架在逆向工程和动态调试中的常见用法。</p></li></ul><h3 id="2-Hook复杂-自定义参数"><a href="#2-Hook复杂-自定义参数" class="headerlink" title="2.Hook复杂&amp;自定义参数"></a><strong>2.Hook复杂&amp;自定义参数</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> loadPackageParam.classLoader.loadClass(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>);<br>        XposedBridge.hookAllMethods(a, <span class="hljs-string">"complexParameterFunc"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() { <span class="hljs-comment">//主要用到该方法可以免填参数（针对自定义和复杂方法）</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                Log.d(<span class="hljs-string">"zj2595"</span>,param.args[<span class="hljs-number">0</span>].toString());<br>            }<br>        });<br><br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>查找Hook复杂函数的类名，方法名</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262103920.png"></p><p>  2.修改好相应数据后，通过log打印观察</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262104375.png"></p><ul><li><p>语法解析</p><h3 id="1-loadPackageParam-classLoader-loadClass-com-zj-wuaipojie-Demo"><a href="#1-loadPackageParam-classLoader-loadClass-com-zj-wuaipojie-Demo" class="headerlink" title="1. loadPackageParam.classLoader.loadClass(&quot;com.zj.wuaipojie.Demo&quot;)"></a>1. <code>loadPackageParam.classLoader.loadClass("com.zj.wuaipojie.Demo")</code></h3><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li><strong>动态加载</strong> <code>com.zj.wuaipojie.Demo</code> 类。</li><li><code>loadPackageParam.classLoader</code> 是 Xposed 提供的 <code>ClassLoader</code>，用于在 Hook 目标 APP 时正确加载目标类。</li></ul><h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><ul><li><code>loadPackageParam</code> 是 Xposed <code>handleLoadPackage</code> 方法中的参数，表示当前 Hook 目标应用的上下文信息。</li><li><code>loadClass("com.zj.wuaipojie.Demo")</code> 加载 <code>Demo</code> 类，返回一个 <code>Class&lt;?&gt;</code> 对象。</li></ul><hr><h3 id="2-XposedBridge-hookAllMethods-a-complexParameterFunc-new-XC-MethodHook"><a href="#2-XposedBridge-hookAllMethods-a-complexParameterFunc-new-XC-MethodHook" class="headerlink" title="2. XposedBridge.hookAllMethods(a, &quot;complexParameterFunc&quot;, new XC_MethodHook() {...})"></a>2. <code>XposedBridge.hookAllMethods(a, "complexParameterFunc", new XC_MethodHook() {...})</code></h3><h3 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h3><ul><li><strong>Hook</strong> <code>a</code> 类中所有名为 <code>complexParameterFunc</code> 的方法，无论其参数类型和返回值是什么。</li><li><code>XC_MethodHook</code> 允许我们在方法 <strong>执行前（beforeHookedMethod）或执行后（afterHookedMethod）</strong> 进行操作。</li></ul><h3 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a>解析：</h3><ul><li><code>XposedBridge.hookAllMethods(Class&lt;?&gt; hookClass, String methodName, XC_MethodHook callback)</code><ul><li><strong><code>hookClass</code></strong>：需要 Hook 的类对象，即 <code>a</code>。</li><li><strong><code>methodName</code></strong>：要 Hook 的方法名，此处是 <code>"complexParameterFunc"</code>。</li><li><strong><code>callback</code></strong>：一个 <code>XC_MethodHook</code> 实例，包含 <code>beforeHookedMethod</code> 和 <code>afterHookedMethod</code> 两个可重写的方法。</li></ul></li></ul><hr><h3 id="3-beforeHookedMethod-MethodHookParam-param-throws-Throwable"><a href="#3-beforeHookedMethod-MethodHookParam-param-throws-Throwable" class="headerlink" title="3. beforeHookedMethod(MethodHookParam param) throws Throwable"></a>3. <code>beforeHookedMethod(MethodHookParam param) throws Throwable</code></h3><h3 id="作用：-2"><a href="#作用：-2" class="headerlink" title="作用："></a>作用：</h3><ul><li>在 <code>complexParameterFunc</code> <strong>执行之前</strong> 执行 <code>beforeHookedMethod</code> 方法。</li><li>可以修改参数、阻止方法执行、获取方法的输入参数等。</li></ul><h3 id="解析：-2"><a href="#解析：-2" class="headerlink" title="解析："></a>解析：</h3><ul><li><strong><code>MethodHookParam param</code></strong><ul><li>传递给 Hook 方法的 <strong>参数信息</strong>。</li><li><code>param.args</code>：存储方法的所有参数，<code>param.args[0]</code> 是第一个参数。</li><li><code>param.thisObject</code>：如果 Hook 的是实例方法，这个字段表示该方法所属的对象。</li><li><code>param.setResult(Object obj)</code>：直接修改方法返回值，使原方法不执行，返回 <code>obj</code>。</li></ul></li></ul><hr><h3 id="4-Log-d-zj2595-param-args-0-toString"><a href="#4-Log-d-zj2595-param-args-0-toString" class="headerlink" title="4. Log.d(&quot;zj2595&quot;, param.args[0].toString());"></a>4. <code>Log.d("zj2595", param.args[0].toString());</code></h3><h3 id="作用：-3"><a href="#作用：-3" class="headerlink" title="作用："></a>作用：</h3><ul><li>通过 <code>Log.d</code> 打印 <code>complexParameterFunc</code> 方法的 <strong>第一个参数值</strong>，用于调试或分析目标应用的行为。</li></ul><h3 id="解析：-3"><a href="#解析：-3" class="headerlink" title="解析："></a>解析：</h3><ul><li><code>param.args[0]</code>：获取 <code>complexParameterFunc</code> 的第一个参数。</li><li><code>.toString()</code>：将参数转换为字符串，避免直接打印对象导致 <code>logcat</code> 显示 <code>null</code> 或 <code>Object@hexcode</code>。</li></ul><hr><h3 id="5-super-beforeHookedMethod-param"><a href="#5-super-beforeHookedMethod-param" class="headerlink" title="5. super.beforeHookedMethod(param);"></a>5. <code>super.beforeHookedMethod(param);</code></h3><h3 id="作用：-4"><a href="#作用：-4" class="headerlink" title="作用："></a>作用：</h3><ul><li>调用 <code>XC_MethodHook</code> 的 <code>beforeHookedMethod</code>，通常用于 <strong>保持默认行为</strong>，但在 Xposed 中 <strong>可以省略</strong>，不会影响 Hook 逻辑。</li></ul><hr><h3 id="代码的核心作用"><a href="#代码的核心作用" class="headerlink" title="代码的核心作用"></a><strong>代码的核心作用</strong></h3><ol><li><strong>找到</strong> 目标应用 <code>com.zj.wuaipojie.Demo</code> 类。</li><li><strong>Hook</strong> 其 <code>complexParameterFunc</code> 方法（可能有多个重载）。</li><li><strong>在方法执行前</strong>，打印第一个参数的值，便于分析应用行为或进一步修改参数。</li></ol><h3 id="关键-Xposed-API"><a href="#关键-Xposed-API" class="headerlink" title="关键 Xposed API"></a><strong>关键 Xposed API</strong></h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>loadClass("com.xxx")</code></td><td>通过 <code>ClassLoader</code> 加载类</td></tr><tr><td><code>hookAllMethods(Class, String, XC_MethodHook)</code></td><td>Hook 目标类中所有指定名称的方法</td></tr><tr><td><code>beforeHookedMethod(MethodHookParam param)</code></td><td>在方法执行前拦截，可修改参数或阻止执行</td></tr><tr><td><code>param.args[n]</code></td><td>获取/修改方法参数</td></tr><tr><td><code>param.setResult(Object obj)</code></td><td>修改方法返回值并跳过原方法执行</td></tr></tbody></table><h3 id="逆向对抗与加固建议"><a href="#逆向对抗与加固建议" class="headerlink" title="逆向对抗与加固建议"></a><strong>逆向对抗与加固建议</strong></h3><p>  若你是应用开发者，可采取以下措施防止此类Hook：</p><ol><li><p><strong>代码混淆</strong>：</p><p> 混淆方法名和参数名，增加定位难度。</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> { <span class="hljs-comment">// 原始类名 Demo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">(String c)</span> { <span class="hljs-comment">// 原始方法名 complexParameterFunc</span><br>        <span class="hljs-comment">// 业务逻辑</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>参数校验逻辑</strong>：</p><p> 在方法内部校验参数合法性。</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">complexParameterFunc</span><span class="hljs-params">(String input)</span> {<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span> || input.length() &lt; <span class="hljs-number">8</span>) {<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">"非法参数"</span>);<br>    }<br>    <span class="hljs-comment">// 正常逻辑</span><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>运行时环境检测</strong>：</p><p> 检测Xposed框架存在性。</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isXposedActive</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">try</span> {<br>        Class.forName(<span class="hljs-string">"de.robv.android.xposed.XposedBridge"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    } <span class="hljs-keyword">catch</span> (ClassNotFoundException e) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol></li></ul><ol><li>查看代码发现string是我们打印出来的参数值，同理可以用上述普通方法的Hook进行参数修改</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262104386.png"></p></li></ul><h3 id="3-Hook替换函数"><a href="#3-Hook替换函数" class="headerlink" title="3.Hook替换函数"></a><strong>3.Hook替换函数</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> loadPackageParam.classLoader.loadClass(<span class="hljs-string">"类名"</span>);<br>        XposedBridge.hookAllMethods(a,<span class="hljs-string">"方法名"</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodReplacement</span>() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">replaceHookedMethod</span><span class="hljs-params">(MethodHookParam methodHookParam)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>            }<br>        });<br><br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><p>  1.同理得到替换函数的包名，方法名</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262104187.png"></p><p>  2.我们完全替换 目标方法 <code>repleaceFunc</code> 的实现，使其始终返回一个空字符串 </p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262104942.png"></p><ul><li><p>语法详解</p><h3 id="📌-代码解析"><a href="#📌-代码解析" class="headerlink" title="📌 代码解析"></a><strong>📌 代码解析</strong></h3><h3 id="1-加载目标类"><a href="#1-加载目标类" class="headerlink" title="1. 加载目标类"></a><strong>1. 加载目标类</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> loadPackageParam.classLoader.loadClass(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>);<br></code></pre></td></tr></tbody></table></figure><p>  <strong>作用</strong></p><ul><li>通过 <strong>ClassLoader</strong> 动态加载 <code>com.zj.wuaipojie.Demo</code> 类。</li><li><code>loadPackageParam.classLoader</code> 是 Xposed 提供的 ClassLoader，确保能够正确加载 Hook 目标应用中的类。</li></ul><hr><h3 id="2-Hook-目标方法"><a href="#2-Hook-目标方法" class="headerlink" title="2. Hook 目标方法"></a><strong>2. Hook 目标方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedBridge.hookAllMethods(a, <span class="hljs-string">"repleaceFunc"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodReplacement</span>() {...});<br></code></pre></td></tr></tbody></table></figure><p>  <strong>作用</strong></p><ul><li><strong>Hook <code>repleaceFunc</code> 方法的所有重载版本</strong>。</li><li>使用 <code>XC_MethodReplacement</code> <strong>完全替换</strong> 目标方法，使其不执行原来的逻辑，而是执行 <code>replaceHookedMethod</code> 方法。</li></ul><hr><h3 id="3-替换方法逻辑"><a href="#3-替换方法逻辑" class="headerlink" title="3. 替换方法逻辑"></a><strong>3. 替换方法逻辑</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">replaceHookedMethod</span><span class="hljs-params">(MethodHookParam methodHookParam)</span> <span class="hljs-keyword">throws</span> Throwable {<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>  <strong>作用</strong></p><ul><li><code>replaceHookedMethod</code> 直接返回 <code>""</code>（空字符串）。</li><li><strong>无论 <code>repleaceFunc</code> 原本的实现是什么，都会被此逻辑取代</strong>。</li></ul><hr><h3 id="🔍-深入解析：Xposed-API"><a href="#🔍-深入解析：Xposed-API" class="headerlink" title="🔍 深入解析：Xposed API"></a><strong>🔍 深入解析：Xposed API</strong></h3><h3 id="🔹-XposedBridge-hookAllMethods-Class-String-XC-MethodReplacement"><a href="#🔹-XposedBridge-hookAllMethods-Class-String-XC-MethodReplacement" class="headerlink" title="🔹 XposedBridge.hookAllMethods(Class, String, XC_MethodReplacement)"></a><strong>🔹 <code>XposedBridge.hookAllMethods(Class, String, XC_MethodReplacement)</code></strong></h3><ul><li><strong>作用</strong>：Hook <strong>所有</strong> 名为 <code>repleaceFunc</code> 的方法（包括不同参数的重载）。</li><li><strong>区别</strong>：<ul><li><code>XC_MethodHook</code> <strong>不会改变原始方法的执行逻辑</strong>，只能在 <strong>执行前/后</strong> 进行拦截。</li><li><code>XC_MethodReplacement</code> <strong>完全替换原始方法</strong>，使其不再执行原有代码，而是执行 <code>replaceHookedMethod</code>。</li></ul></li></ul><hr><h3 id="🔹-replaceHookedMethod-MethodHookParam-param"><a href="#🔹-replaceHookedMethod-MethodHookParam-param" class="headerlink" title="🔹 replaceHookedMethod(MethodHookParam param)"></a><strong>🔹 <code>replaceHookedMethod(MethodHookParam param)</code></strong></h3><ul><li><strong>作用</strong>：完全取代目标方法的实现逻辑。</li><li><strong>返回值</strong>：直接作为方法的返回值，原方法 <strong>不会执行</strong>。</li></ul><p>  <strong>示例</strong></p><p>  假设 <code>repleaceFunc</code> 方法在 <code>Demo</code> 类中的原始代码如下：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">repleaceFunc</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, World!"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>  在 Hook 之后，该方法会始终返回 <code>""</code>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>System.out.println(demo.repleaceFunc());  <span class="hljs-comment">// 输出：""</span><br></code></pre></td></tr></tbody></table></figure><p>  即使 <code>repleaceFunc</code> 之前可能包含复杂逻辑，例如访问数据库、进行计算、返回动态内容，它们都会被 <strong>完全跳过</strong>。</p><hr><h3 id="📌-总结"><a href="#📌-总结" class="headerlink" title="📌 总结"></a><strong>📌 总结</strong></h3><table><thead><tr><th>代码部分</th><th>作用</th></tr></thead><tbody><tr><td><code>loadPackageParam.classLoader.loadClass("com.zj.wuaipojie.Demo")</code></td><td>加载目标类</td></tr><tr><td><code>XposedBridge.hookAllMethods(Class, String, XC_MethodReplacement)</code></td><td>Hook 目标方法并完全替换</td></tr><tr><td><code>replaceHookedMethod(MethodHookParam param)</code></td><td>定义新的方法逻辑，<strong>不执行原方法</strong></td></tr><tr><td><code>return ""</code></td><td>让方法始终返回 <code>""</code></td></tr></tbody></table><h3 id="🔥-适用场景"><a href="#🔥-适用场景" class="headerlink" title="🔥 适用场景"></a><strong>🔥 适用场景</strong></h3><p>  ✅ <strong>修改返回值</strong>（例如：让某个方法始终返回 <code>true/false</code>、0 或者空字符串）</p><p>  ✅ <strong>跳过某些功能</strong>（例如：阻止服务器请求、去除广告、绕过校验）</p><p>  ✅ <strong>提高性能</strong>（如果方法执行的是不必要的复杂逻辑，可以直接返回固定值）</p><hr><h1 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a><strong>⚠️ 注意事项</strong></h1><ol><li><p><strong>确保目标方法返回类型匹配</strong></p><ul><li><p><code>return ""</code> 适用于 <strong>返回 <code>String</code> 类型</strong> 的方法。</p></li><li><p>如果方法返回 <code>int</code>，需要返回 <code>0</code>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>如果返回 <code>boolean</code>，需要返回 <code>true</code> 或 <code>false</code>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong>避免 Hook 关键系统方法</strong></p><ul><li>Hook 关键 API（如 <code>System.exit()</code>、<code>Application.onCreate()</code>）可能导致 APP <strong>崩溃</strong>。</li></ul></li><li><p><strong>确保 <code>repleaceFunc</code> 方法存在</strong></p><ul><li>如果 <code>Demo</code> 类中没有 <code>repleaceFunc</code>，Hook <strong>不会生效</strong>，可能导致日志报错。</li></ul></li></ol><hr><h3 id="🚀-实战案例"><a href="#🚀-实战案例" class="headerlink" title="🚀 实战案例"></a><strong>🚀 实战案例</strong></h3><h3 id="1️⃣-绕过应用-VIP-限制"><a href="#1️⃣-绕过应用-VIP-限制" class="headerlink" title="1️⃣ 绕过应用 VIP 限制"></a><strong>1️⃣ 绕过应用 VIP 限制</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedBridge.hookAllMethods(a, <span class="hljs-string">"isVipUser"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodReplacement</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">replaceHookedMethod</span><span class="hljs-params">(MethodHookParam methodHookParam)</span> <span class="hljs-keyword">throws</span> Throwable {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 强制返回 true，让所有用户变成 VIP</span><br>    }<br>});<br></code></pre></td></tr></tbody></table></figure><h3 id="2️⃣-禁止-APP-退出"><a href="#2️⃣-禁止-APP-退出" class="headerlink" title="2️⃣ 禁止 APP 退出"></a><strong>2️⃣ 禁止 APP 退出</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedBridge.hookAllMethods(System.class, <span class="hljs-string">"exit"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodReplacement</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">replaceHookedMethod</span><span class="hljs-params">(MethodHookParam methodHookParam)</span> <span class="hljs-keyword">throws</span> Throwable {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 直接跳过 System.exit()，防止 APP 退出</span><br>    }<br>});<br></code></pre></td></tr></tbody></table></figure><h3 id="逆向对抗与防护"><a href="#逆向对抗与防护" class="headerlink" title="逆向对抗与防护"></a><strong>逆向对抗与防护</strong></h3><p>  若你是应用开发者，可采取以下防护措施：</p><ol><li><p><strong>方法签名混淆</strong></p><p> 混淆方法名和参数类型，增加定位难度：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> { <span class="hljs-comment">// 原类名 Demo</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">b</span><span class="hljs-params">()</span> { <span class="hljs-comment">// 原方法名 replaceFunc</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"敏感数据"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>返回值校验</strong></p><p> 在调用处增加二次校验逻辑：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> replaceFunc();<br><span class="hljs-keyword">if</span> (result.hashCode() != <span class="hljs-number">0x12345678</span>) { <span class="hljs-comment">// 校验哈希值</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">"返回值被篡改"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>Native层实现</strong></p><p> 将核心逻辑移至Native层（C/C++），降低被Xposed Hook的概率：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">replaceFunc</span><span class="hljs-params">()</span>; <span class="hljs-comment">// JNI 实现</span><br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>环境检测</strong></p><p> 检测Xposed框架存在性：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHooked</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">try</span> {<br>        <span class="hljs-keyword">return</span> XposedBridge.getXposedVersion() != <span class="hljs-literal">null</span>;<br>    } <span class="hljs-keyword">catch</span> (Throwable ignored) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol></li></ul></li></ul><h3 id="4-Hook加固通杀"><a href="#4-Hook加固通杀" class="headerlink" title="4.Hook加固通杀"></a><strong>4.Hook加固通杀</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">"attach"</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context) param.args[<span class="hljs-number">0</span>];<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> context.getClassLoader();<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">//hook逻辑在这里面写</span><br>&nbsp; &nbsp; }<br>});<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>Hook <code>Application.attach()</code> 方法，并在 <code>attach</code> 执行完成后执行自定义的 Hook 逻辑。它通常用于 在目标应用的 <code>attach</code> 阶段获取 <code>Context</code> 和 <code>ClassLoader</code>，以便 Hook 目标应用的类。必须要将<code>classLoader</code> 传入进去才能通过<code>Application</code>获取<code>classLoader</code>。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262105799.png"></p><ul><li><p>代码详解</p><h3 id="📌-代码解析-1"><a href="#📌-代码解析-1" class="headerlink" title="📌 代码解析"></a><strong>📌 代码解析</strong></h3><h3 id="1️⃣-Hook-Application-attach-方法"><a href="#1️⃣-Hook-Application-attach-方法" class="headerlink" title="1️⃣ Hook Application.attach() 方法"></a><strong>1️⃣ Hook <code>Application.attach()</code> 方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">"attach"</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {...});<br></code></pre></td></tr></tbody></table></figure><p>  <strong>作用</strong>：</p><ul><li><code>findAndHookMethod()</code> 用于 <strong>精准 Hook 指定类的特定方法</strong>。</li><li>这里 Hook 的是 <code>android.app.Application</code> 类的 <code>attach(Context context)</code> 方法。</li><li>由于 <code>attach()</code> 在应用启动时调用，因此 <strong>可以在这里获取 <code>Context</code> 和 <code>ClassLoader</code>，以便 Hook 目标应用的类</strong>。</li></ul><p>  <strong>为什么要 Hook <code>attach(Context context)</code>？</strong></p><ul><li>许多应用会使用 <strong>自定义的 <code>ClassLoader</code></strong>，如果在 <code>handleLoadPackage()</code> 里直接 Hook 某些类，可能会找不到（因为类还没加载）。</li><li><code>attach()</code> 方法执行时，应用的 <code>Context</code> 和 <code>ClassLoader</code> 已经初始化，Hook 逻辑可以安全执行。</li></ul><hr><h3 id="2️⃣-afterHookedMethod-方法"><a href="#2️⃣-afterHookedMethod-方法" class="headerlink" title="2️⃣ afterHookedMethod() 方法"></a><strong>2️⃣ <code>afterHookedMethod()</code> 方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>    <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context) param.args[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> context.getClassLoader();<br>    <span class="hljs-comment">//hook逻辑在这里面写</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>  <strong>解析</strong>：</p><ul><li><code>afterHookedMethod()</code> 代表 <strong>在原方法执行完毕后</strong> 执行 Hook 逻辑。</li><li><code>param.args[0]</code> 获取 <code>attach()</code> 方法的 <code>Context</code> 参数，这个 <code>Context</code> 是 <strong>应用的 <code>Context</code></strong>，用于加载资源、访问系统服务等。</li><li><code>context.getClassLoader()</code> 获取当前应用的 <code>ClassLoader</code>，用于后续 <strong>动态加载和 Hook 目标类</strong>。</li></ul><hr><h3 id="📌-代码执行流程"><a href="#📌-代码执行流程" class="headerlink" title="📌 代码执行流程"></a><strong>📌 代码执行流程</strong></h3><p>  1️⃣ <code>Application.attach()</code> 被系统调用。</p><p>  2️⃣ Xposed Hook 该方法，在 <strong>方法执行完毕后</strong> 获取 <code>Context</code> 和 <code>ClassLoader</code>。</p><p>  3️⃣ 在 <code>afterHookedMethod()</code> 里执行 Hook 逻辑，比如 Hook 目标类的方法。</p><hr><h3 id="🔥-适用场景-1"><a href="#🔥-适用场景-1" class="headerlink" title="🔥 适用场景"></a><strong>🔥 适用场景</strong></h3><p>  ✅ <strong>Hook 目标应用的类</strong></p><p>  ✅ <strong>绕过 <code>loadClass</code> 限制</strong>（有些应用使用自定义 <code>ClassLoader</code>，如果不 Hook <code>attach()</code> 可能无法正确加载类）</p><p>  ✅ <strong>动态分析应用行为</strong>（例如 Hook <code>WebView</code>、拦截网络请求等）</p><p>  ✅ <strong>逆向破解</strong>（比如 Hook 登录验证逻辑、修改返回值等）</p><hr><h3 id="🚀-进阶应用示例"><a href="#🚀-进阶应用示例" class="headerlink" title="🚀 进阶应用示例"></a><strong>🚀 进阶应用示例</strong></h3><h3 id="1️⃣-Hook-目标应用的方法"><a href="#1️⃣-Hook-目标应用的方法" class="headerlink" title="1️⃣ Hook 目标应用的方法"></a><strong>1️⃣ Hook 目标应用的方法</strong></h3><p>  假设要 Hook <code>com.zj.wuaipojie.Demo</code> 类的 <code>getData()</code> 方法，我们可以在 <code>attach()</code> 里执行 Hook 逻辑：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">"attach"</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context) param.args[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> context.getClassLoader();<br><br>        XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, classLoader, <span class="hljs-string">"getData"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                XposedBridge.log(<span class="hljs-string">"Hooked getData() before execution"</span>);<br>            }<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                XposedBridge.log(<span class="hljs-string">"Original return value: "</span> + param.getResult());<br>                param.setResult(<span class="hljs-string">"Hooked Data!"</span>); <span class="hljs-comment">// 修改返回值</span><br>            }<br>        });<br>    }<br>});<br><br></code></pre></td></tr></tbody></table></figure><p>  📌 <strong>作用</strong>：Hook <code>com.zj.wuaipojie.Demo.getData()</code>，并修改返回值。</p><hr><h3 id="2️⃣-Hook-WebView-进行-JS-注入"><a href="#2️⃣-Hook-WebView-进行-JS-注入" class="headerlink" title="2️⃣ Hook WebView 进行 JS 注入"></a><strong>2️⃣ Hook WebView 进行 JS 注入</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">osedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">"attach"</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context) param.args[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> context.getClassLoader();<br><br>        XposedHelpers.findAndHookMethod(<span class="hljs-string">"android.webkit.WebView"</span>, classLoader, <span class="hljs-string">"loadUrl"</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> (String) param.args[<span class="hljs-number">0</span>];<br>                XposedBridge.log(<span class="hljs-string">"WebView is loading: "</span> + url);<br>            }<br>        });<br>    }<br>});<br><br></code></pre></td></tr></tbody></table></figure><p>  📌 <strong>作用</strong>：Hook <code>WebView.loadUrl()</code> 方法，打印所有加载的 URL。</p><hr><h3 id="⚠️-注意事项-1"><a href="#⚠️-注意事项-1" class="headerlink" title="⚠️ 注意事项"></a><strong>⚠️ 注意事项</strong></h3><p>  1️⃣ <strong>不能直接在 <code>handleLoadPackage()</code> 里 Hook 目标应用的类</strong></p><ul><li>有些应用使用 <strong>自定义 ClassLoader</strong>，导致 <code>handleLoadPackage()</code> 时目标类还未加载。</li><li>解决方案就是 <strong>先 Hook <code>Application.attach()</code>，等 <code>ClassLoader</code> 初始化后再 Hook 目标方法</strong>。</li></ul><p>  2️⃣ <strong><code>beforeHookedMethod()</code> vs <code>afterHookedMethod()</code></strong></p><ul><li><code>beforeHookedMethod()</code>：在方法 <strong>执行前</strong> Hook，可修改参数或阻止执行。</li><li><code>afterHookedMethod()</code>：在方法 <strong>执行后</strong> Hook，可获取原始返回值并修改。</li></ul><p>  3️⃣ <strong>适用于所有 Android 应用</strong></p><ul><li><code>Application.attach(Context)</code> 是 <strong>所有 Android 应用都会调用的方法</strong>，所以这个 Hook 方式适用于 <strong>所有 APP</strong>，无论它是否混淆或有复杂的 <code>ClassLoader</code> 机制。</li></ul><hr><h3 id="💡-总结"><a href="#💡-总结" class="headerlink" title="💡 总结"></a><strong>💡 总结</strong></h3><table><thead><tr><th><strong>代码部分</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>findAndHookMethod(Application.class, "attach", Context.class, XC_MethodHook)</code></td><td>Hook <code>attach(Context)</code>，在应用初始化时执行 Hook</td></tr><tr><td><code>context.getClassLoader()</code></td><td>获取 <code>ClassLoader</code>，用于加载目标类</td></tr><tr><td><code>findAndHookMethod("目标类", classLoader, "方法名", XC_MethodHook)</code></td><td>Hook 目标类的方法</td></tr><tr><td><code>param.args[n]</code></td><td>获取或修改方法参数</td></tr><tr><td><code>param.setResult(value)</code></td><td>修改返回值</td></tr><tr><td><code>beforeHookedMethod()</code></td><td>方法执行前 Hook，可修改参数或阻止执行</td></tr><tr><td><code>afterHookedMethod()</code></td><td>方法执行后 Hook，可获取或修改返回值</td></tr></tbody></table><p>  ✅ <strong>这段代码的核心思想是先 Hook <code>Application.attach()</code>，确保 <code>ClassLoader</code> 初始化后，再去 Hook 目标应用的其他方法。</strong></p><p>  ✅ <strong>适用于所有 Android 应用，尤其是带有自定义 <code>ClassLoader</code> 的应用。</strong></p><h3 id="逆向对抗与加固"><a href="#逆向对抗与加固" class="headerlink" title="逆向对抗与加固"></a><strong>逆向对抗与加固</strong></h3><p>  若你是应用开发者，可采取以下防护措施：</p><ol><li><p><strong>检测Application.attach是否被Hook</strong></p><p> 在<code>attach()</code>方法内检查调用栈：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Context context)</span> {<br>    StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();<br>    <span class="hljs-keyword">for</span> (StackTraceElement element : stackTrace) {<br>        <span class="hljs-keyword">if</span> (element.getClassName().contains(<span class="hljs-string">"xposed"</span>)) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">"Xposed框架注入！"</span>);<br>        }<br>    }<br>    <span class="hljs-built_in">super</span>.attach(context);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>混淆关键类名和方法名</strong></p><p> 增加定位难度：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> { <span class="hljs-comment">// 原类名Application</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">(Context c)</span> { <span class="hljs-comment">// 原方法名attach</span><br>        <span class="hljs-comment">// 原始逻辑</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>使用自定义ClassLoader</strong></p><p> 防止通过系统ClassLoader获取类：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecureClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> {<br>    <span class="hljs-comment">// 重写loadClass方法，防止外部Hook</span><br>}<br></code></pre></td></tr></tbody></table></figure></li></ol></li></ul></li></ul><h3 id="5-Hook变量"><a href="#5-Hook变量" class="headerlink" title="5.Hook变量"></a><strong>5.Hook变量</strong></h3><p>静态变量与实例变量：</p><ul><li>静态变量（static）：类被初始化，同步进行初始化</li><li>非静态变量：类被实例化（产生一个对象的时候），进行初始化</li></ul><p>静态变量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">"类名"</span>, classLoader);<br>XposedHelpers.setStaticIntField(clazz, <span class="hljs-string">"变量名"</span>, <span class="hljs-number">999</span>);<br></code></pre></td></tr></tbody></table></figure><p>实例变量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">"类名"</span>, classLoader);<br>XposedBridge.hookAllConstructors(clazz, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>        <span class="hljs-comment">//param.thisObject获取当前所属的对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ob</span> <span class="hljs-operator">=</span> param.thisObject;<br>        XposedHelpers.setIntField(ob,<span class="hljs-string">"变量名"</span>,<span class="hljs-number">9999</span>);}<br>    });<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>Hook静态变量，先根据原码找到我们需要的包名，方法名等信息</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262106768.png"></p><ol><li>根据</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262106329.png"></p><ul><li><p>代码解析</p><h3 id="代码作用-1"><a href="#代码作用-1" class="headerlink" title="代码作用"></a><strong>代码作用</strong></h3><p>  这两行代码通过Xposed框架<strong>修改目标类的静态整型字段值</strong>，常用于动态篡改应用的配置、状态标志或绕过限制（如试用次数、权限校验等）。</p><hr><h3 id="逐行分析"><a href="#逐行分析" class="headerlink" title="逐行分析"></a><strong>逐行分析</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 加载目标类</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">"类名"</span>, classLoader);<br><br><span class="hljs-comment">// 2. 修改静态整型字段值</span><br>XposedHelpers.setStaticIntField(clazz, <span class="hljs-string">"变量名"</span>, <span class="hljs-number">999</span>);<br></code></pre></td></tr></tbody></table></figure><hr><h3 id="关键点解析"><a href="#关键点解析" class="headerlink" title="关键点解析"></a><strong>关键点解析</strong></h3><h3 id="1-XposedHelpers-findClass"><a href="#1-XposedHelpers-findClass" class="headerlink" title="1.&nbsp;XposedHelpers.findClass()"></a><strong>1.&nbsp;<code>XposedHelpers.findClass()</code></strong></h3><ul><li><strong>功能</strong>：通过类加载器查找目标类。</li><li><strong>参数</strong>：<ul><li><code>"类名"</code>：目标类的全限定名（如&nbsp;<code>com.example.Config</code>）。</li><li><code>classLoader</code>：应用的ClassLoader（通常从&nbsp;<code>loadPackageParam</code>&nbsp;或&nbsp;<code>Context</code>&nbsp;获取）。</li></ul></li><li><strong>风险</strong>：若类不存在，抛出&nbsp;<code>ClassNotFoundException</code>。</li></ul><h3 id="2-XposedHelpers-setStaticIntField"><a href="#2-XposedHelpers-setStaticIntField" class="headerlink" title="2.&nbsp;XposedHelpers.setStaticIntField()"></a><strong>2.&nbsp;<code>XposedHelpers.setStaticIntField()</code></strong></h3><ul><li><strong>功能</strong>：强制修改目标类的&nbsp;<strong>静态int字段</strong>。</li><li><strong>参数</strong>：<ul><li><code>clazz</code>：目标类的Class对象。</li><li><code>"变量名"</code>：静态字段名称。</li><li><code>999</code>：新值。</li></ul></li><li><strong>限制</strong>：<ul><li>字段必须存在且类型为&nbsp;<code>int</code>（非&nbsp;<code>Integer</code>）。</li><li>字段访问权限不限（Xposed可绕过&nbsp;<code>private</code>&nbsp;限制）。</li></ul></li></ul><h3 id="扩展操作"><a href="#扩展操作" class="headerlink" title="扩展操作"></a><strong>扩展操作</strong></h3><h3 id="1-修改非int字段"><a href="#1-修改非int字段" class="headerlink" title="1. 修改非int字段"></a><strong>1. 修改非int字段</strong></h3><ul><li><p><strong>字符串字段</strong>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.setStaticObjectField(clazz, <span class="hljs-string">"API_KEY"</span>, <span class="hljs-string">"hacked_key"</span>);<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>布尔字段</strong>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.setStaticBooleanField(clazz, <span class="hljs-string">"isVIP"</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="2-动态监听字段变化"><a href="#2-动态监听字段变化" class="headerlink" title="2. 动态监听字段变化"></a><strong>2. 动态监听字段变化</strong></h3><p>  结合Hook和反射，在字段被访问时触发逻辑：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(clazz, <span class="hljs-string">"checkLicense"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> {<br>        <span class="hljs-comment">// 每次调用checkLicense前重置试用次数</span><br>        XposedHelpers.setStaticIntField(clazz, <span class="hljs-string">"TRIAL_COUNT"</span>, <span class="hljs-number">999</span>);<br>    }<br>});<br></code></pre></td></tr></tbody></table></figure><h3 id="防御措施（逆向对抗）：-2"><a href="#防御措施（逆向对抗）：-2" class="headerlink" title="防御措施（逆向对抗）："></a><strong>防御措施（逆向对抗）</strong>：</h3><ol><li><p><strong>字段混淆</strong>：</p><p> 将字段名改为无意义字符串（如&nbsp;<code>a</code>）：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>值校验逻辑</strong>：</p><p> 在代码关键位置校验字段哈希值：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (TRIAL_COUNT != calculateHash()) {<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">"数据篡改！"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>迁移到Native层</strong>：</p><p> 使用JNI将关键字段存储在C++层：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTrialCount</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></tbody></table></figure></li></ol></li></ul><ol><li>Hook实例变量</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262106121.png"></p><ol><li>Hook所有的构造函数，我们发现静态变量与动态变量Hook完成。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262106592.png"></p><ul><li><p>代码解析</p><h3 id="代码作用-2"><a href="#代码作用-2" class="headerlink" title="代码作用"></a><strong>代码作用</strong></h3><p>  该代码通过Hook目标类的<strong>所有构造函数</strong>，在对象实例化完成后，修改其&nbsp;<code>publicInt</code>&nbsp;字段的值为&nbsp;<code>2222</code>。常用于<strong>篡改对象初始化状态</strong>，如绕过校验、强制启用隐藏功能等。</p><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a><strong>代码解析</strong></h3><p>  <strong>1.&nbsp;<code>XposedBridge.hookAllConstructors(clazz, new XC_MethodHook())</code></strong></p><ul><li><strong><code>XposedBridge.hookAllConstructors</code></strong>：<ul><li>这是 Xposed 框架提供的一个方法，用于钩挂指定类的所有构造函数。</li><li>参数：<ul><li><code>clazz</code>：要钩挂的类。</li><li><code>new XC_MethodHook()</code>：创建一个 <code>XC_MethodHook</code> 的匿名类实例，用于定义钩挂逻辑。</li></ul></li></ul></li></ul><p>  <strong>2.&nbsp;<code>@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable</code></strong></p><ul><li><strong><code>afterHookedMethod</code></strong>：<ul><li>这是 <code>XC_MethodHook</code> 类中的一个方法，用于在目标方法（这里是构造函数）执行之后执行自定义逻辑。</li><li>参数：<ul><li><code>param</code>：<code>MethodHookParam</code> 类型，包含钩挂方法的相关信息，如当前对象实例、方法参数、方法返回值等。</li></ul></li></ul></li></ul><p>  <strong>3.&nbsp;<code>super.afterHookedMethod(param);</code></strong></p><ul><li>这一行调用了父类的 <code>afterHookedMethod</code> 方法，虽然是可选的，但保持代码完整性。</li><li>父类的实现是空的，所以这行代码可以省略。</li></ul><p>  <strong>4.&nbsp;<code>Object ob = param.thisObject;</code></strong></p><ul><li><strong><code>param.thisObject</code></strong>：<ul><li>获取当前构造函数所创建的对象实例。</li><li>在构造函数中，<code>thisObject</code> 指向正在被构造的对象。</li></ul></li></ul><p>  <strong>5.&nbsp;<code>XposedHelpers.setIntField(ob, "publicInt", 2222);</code></strong></p><ul><li><strong><code>XposedHelpers.setIntField</code></strong>：<ul><li>这是 Xposed 框架提供的一个工具方法，用于设置对象的字段值。</li><li>参数：<ul><li><code>ob</code>：目标对象实例。</li><li><code>"publicInt"</code>：字段名。</li><li><code>2222</code>：要设置的值。</li></ul></li><li>这行代码的作用是将目标对象的 <code>publicInt</code> 字段值修改为 <code>2222</code>。</li></ul></li></ul><h3 id="逆向对抗与加固-1"><a href="#逆向对抗与加固-1" class="headerlink" title="逆向对抗与加固"></a><strong>逆向对抗与加固</strong></h3><p>  若你是应用开发者，可采取以下防护措施：</p><ol><li><p><strong>字段混淆</strong>：</p><p> 将关键字段名改为无意义字符串（如&nbsp;<code>a</code>）：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 原字段名 publicInt</span><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>字段值校验</strong>：</p><p> 在关键方法中校验字段哈希值：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (publicInt != calculateHash()) {<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">"字段被篡改！"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>构造函数逻辑保护</strong>：</p><p> 在构造后二次加密字段值：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecureClass</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> publicInt;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecureClass</span><span class="hljs-params">()</span> {<br>        publicInt = <span class="hljs-number">100</span>;<br>        publicInt = encrypt(publicInt); <span class="hljs-comment">// 构造函数内二次处理</span><br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">encrypt</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> {<br>        <span class="hljs-keyword">return</span> value ^ <span class="hljs-number">0x12345678</span>; <span class="hljs-comment">// 简单加密</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><hr><h3 id="扩展操作-1"><a href="#扩展操作-1" class="headerlink" title="扩展操作"></a><strong>扩展操作</strong></h3><h3 id="1-条件篡改"><a href="#1-条件篡改" class="headerlink" title="1. 条件篡改"></a><strong>1. 条件篡改</strong></h3><p>  仅在满足条件时修改字段值：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (XposedHelpers.getIntField(instance, <span class="hljs-string">"publicInt"</span>) &lt; <span class="hljs-number">1000</span>) {<br>    XposedHelpers.setIntField(instance, <span class="hljs-string">"publicInt"</span>, <span class="hljs-number">2222</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-多字段操作"><a href="#2-多字段操作" class="headerlink" title="2. 多字段操作"></a><strong>2. 多字段操作</strong></h3><p>  同时修改多个字段：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.setIntField(instance, <span class="hljs-string">"publicInt"</span>, <span class="hljs-number">2222</span>);<br>XposedHelpers.setObjectField(instance, <span class="hljs-string">"mode"</span>, <span class="hljs-string">"DEBUG"</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><h3 id="6-Hook构造函数"><a href="#6-Hook构造函数" class="headerlink" title="6.Hook构造函数"></a><strong>6.Hook构造函数</strong></h3><p>无参构造函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookConstructor(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, classLoader, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>&nbsp; &nbsp; }<br>});<br></code></pre></td></tr></tbody></table></figure><p>有参构造函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">posedHelpers.findAndHookConstructor(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, classLoader, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>            }<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>            }<br>        });<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><p>  1.Hook有参构造函数，查看源代码，发现传入的是str字符串</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262107135.png"></p><p>  2.我们Hook传入的str参数进行修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262107894.png"></p><ul><li><p>代码详解</p><h3 id="1-XposedHelpers-findAndHookConstructor"><a href="#1-XposedHelpers-findAndHookConstructor" class="headerlink" title="1. XposedHelpers.findAndHookConstructor"></a><strong>1. XposedHelpers.findAndHookConstructor</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">XosedHelpers.findAndHookConstructor(String className, ClassLoader classLoader, Object... parameterTypesAndCallback)<br><br></code></pre></td></tr></tbody></table></figure><h3 id="findAndHookConstructor方法"><a href="#findAndHookConstructor方法" class="headerlink" title="findAndHookConstructor方法"></a><strong><code>findAndHookConstructor</code>方法</strong></h3><ul><li><strong>功能</strong>：查找并Hook指定类的构造函数。</li><li><strong>参数解析</strong>：<ul><li><code>"com.zj.wuaipojie.Demo"</code>：目标类的全限定名。</li><li><code>loadPackageParam.classLoader</code>：使用目标应用的类加载器，确保正确加载类（避免ClassNotFound）。</li><li><code>String.class</code>：构造函数的参数类型（需与实际参数类型严格匹配）。</li><li><code>XC_MethodHook</code>：Hook行为的回调实现。</li></ul></li></ul><h3 id="XC-MethodHook回调"><a href="#XC-MethodHook回调" class="headerlink" title="XC_MethodHook回调"></a><strong><code>XC_MethodHook</code>回调</strong></h3><ul><li><p><strong><code>beforeHookedMethod</code></strong>：</p><ul><li><strong>执行时机</strong>：目标方法（构造函数）执行前。</li><li><strong>操作</strong>：通过<code>param.args</code>修改传入参数（此处将第一个参数替换为<code>"CC"</code>）。</li></ul></li><li><p><strong><code>afterHookedMethod</code></strong>：</p><ul><li><strong>执行时机</strong>：目标方法执行后。</li><li><strong>操作</strong>：可访问返回值（<code>param.getResult()</code>）或异常（<code>param.getThrowable()</code>）。</li></ul></li><li><p><code>className</code>: 要 Hook 的类名（这里是 <code>"com.zj.wuaipojie.Demo"</code>）。</p></li><li><p><code>classLoader</code>: 目标应用的类加载器（这里 <code>loadPackageParam.classLoader</code> 提供了 <code>APK</code> 的 <code>ClassLoader</code>）。</p></li><li><p><code>parameterTypesAndCallback</code>: 先列出构造函数的参数类型（这里是 <code>String.class</code>），然后是 Hook 回调对象（<code>XC_MethodHook</code>）。</p></li></ul><p>  <strong>作用</strong>：找到 <code>com.zj.wuaipojie.Demo</code> 类中 <strong>形参为 <code>String</code> 的构造方法</strong>，然后 Hook 该构造方法。</p><hr><h3 id="2-beforeHookedMethod"><a href="#2-beforeHookedMethod" class="headerlink" title="2. beforeHookedMethod"></a><strong>2. beforeHookedMethod</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>    <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>    param.args[<span class="hljs-number">0</span>] = <span class="hljs-string">"CC"</span>;  <span class="hljs-comment">// 修改构造函数的参数</span><br>}<br><br></code></pre></td></tr></tbody></table></figure><ul><li><code>param.args[0]</code> 代表构造函数的第一个参数。</li><li><code>param.args[0] = "CC";</code> 将传入 <code>Demo</code> 类构造函数的 <code>String</code> 参数修改为 <code>"CC"</code>。</li></ul><p>  <strong>作用</strong>：在 <code>Demo</code> 类构造方法执行前，修改它的参数，使得传入的字符串无论原来是什么，都会变成 <code>"CC"</code>。</p><hr><h3 id="3-afterHookedMethod"><a href="#3-afterHookedMethod" class="headerlink" title="3. afterHookedMethod"></a><strong>3. afterHookedMethod</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>    <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>}<br><br></code></pre></td></tr></tbody></table></figure><ul><li><code>afterHookedMethod</code> 发生在构造函数 <strong>执行后</strong>，但本代码没有做额外操作，仅调用 <code>super.afterHookedMethod(param)</code>。</li></ul><p>  <strong>作用</strong>：在 <code>Demo</code> 对象创建后可以执行其他操作，如修改 <code>this</code> 指向的对象，但本代码未做额外操作。</p><h3 id="4-Android-类加载机制"><a href="#4-Android-类加载机制" class="headerlink" title="4. Android 类加载机制"></a><strong>4. Android 类加载机制</strong></h3><p>  <code>loadPackageParam.classLoader</code> 提供的是目标应用的 <code>ClassLoader</code>，常见的类加载器有：</p><ul><li><code>PathClassLoader</code>：用于加载 <code>APK</code> 内的 <code>dex</code> 文件。</li><li><code>DexClassLoader</code>：可以动态加载外部 <code>dex</code> 文件。</li></ul><p>  <strong>为什么需要提供 <code>classLoader</code>？</strong><br>  因为 <code>Xposed</code> 运行在宿主应用环境（如 <code>Zygote</code>），而 <code>Demo</code> 这个类属于目标应用，因此 <strong>需要使用目标应用的 <code>ClassLoader</code> 加载它</strong>，否则找不到类。</p><p>  这段代码适合用于分析 <code>Demo</code> 类的实例创建情况，或者绕过 <code>Demo</code> 可能存在的参数检查逻辑。</p></li></ul><p>  3.对于无参构造函数可以使用替换函数将内容替换。</p></li></ul><h3 id="7-Hook-multiDex方法"><a href="#7-Hook-multiDex方法" class="headerlink" title="7.Hook multiDex方法"></a><strong>7.Hook multiDex方法</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">osedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">"attach"</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;ClassLoader cl= ((Context)param.args[<span class="hljs-number">0</span>]).getClassLoader();<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Class&lt;?&gt; hookclass=<span class="hljs-literal">null</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">try</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;hookclass=cl.loadClass(<span class="hljs-string">"类名"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<span class="hljs-keyword">catch</span> (Exception e){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Log.e(<span class="hljs-string">"zj2595"</span>,<span class="hljs-string">"未找到类"</span>,e);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">return</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;XposedHelpers.findAndHookMethod(hookclass, <span class="hljs-string">"方法名"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-meta">@Override</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;});<br>&nbsp; &nbsp; }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><p>  1.教程Demo中只有一个Dex文件，但在平常Hook中会有多个甚至几十个这种情况下，如果不在第一个Dex文件夹里面，我们需要先找到相关的类，然后将类传进去再进行普通方法的Hook。</p><p>  2.在Dex文件中最多只能存在65535个方法</p><ul><li><p>代码详解</p><h3 id="1-Hook-Application-attach-的意图"><a href="#1-Hook-Application-attach-的意图" class="headerlink" title="1.&nbsp;Hook&nbsp;Application.attach&nbsp;的意图"></a>1.&nbsp;<strong>Hook&nbsp;<code>Application.attach</code>&nbsp;的意图</strong></h3><ul><li><p><strong>时机控制</strong>：</p><p>  <code>Application.attach(Context)</code>&nbsp;是应用初始化时较早调用的方法，通过在此处获取&nbsp;<code>ClassLoader</code>，确保目标类已加载到内存。</p></li><li><p><strong>解决类隔离问题</strong>：</p><p>  某些应用可能使用多&nbsp;<code>ClassLoader</code>（如插件化框架），直接使用系统&nbsp;<code>ClassLoader</code>&nbsp;可能无法加载目标类。</p></li></ul><h3 id="2-延迟Hook（Lazy-Hook）"><a href="#2-延迟Hook（Lazy-Hook）" class="headerlink" title="2.&nbsp;延迟Hook（Lazy Hook）"></a>2.&nbsp;<strong>延迟Hook（Lazy Hook）</strong></h3><ul><li><p><strong>问题背景</strong>：</p><p>  若直接Hook目标类的方法，可能因类尚未被加载导致&nbsp;<code>ClassNotFoundException</code>。</p></li><li><p><strong>解决方案</strong>：</p><p>  先Hook&nbsp;<code>Application.attach</code>，在其执行后通过目标应用的&nbsp;<code>ClassLoader</code>&nbsp;加载类，确保类已初始化。</p></li></ul><h3 id="3-ClassLoader-的关键作用"><a href="#3-ClassLoader-的关键作用" class="headerlink" title="3.&nbsp;ClassLoader&nbsp;的关键作用"></a>3.&nbsp;<strong><code>ClassLoader</code>&nbsp;的关键作用</strong></h3><ul><li><p><strong>上下文隔离</strong>：</p><p>  Android中不同应用（或模块）使用独立的&nbsp;<code>ClassLoader</code>，需通过目标Context获取其&nbsp;<code>ClassLoader</code>&nbsp;才能正确加载类。</p></li><li><p><strong>示例来源</strong>：</p><p>  <code>param.args[0]</code>&nbsp;是&nbsp;<code>attach</code>&nbsp;方法的&nbsp;<code>Context</code>&nbsp;参数，代表当前应用的上下文。</p></li></ul><h3 id="4-动态方法Hook"><a href="#4-动态方法Hook" class="headerlink" title="4.&nbsp;动态方法Hook"></a>4.&nbsp;<strong>动态方法Hook</strong></h3><ul><li><p><strong>灵活性与隐蔽性</strong>：</p><p>  通过运行时加载类并Hook方法，无需提前知道目标类的具体实现，适用于对抗混淆或动态代码加载（如DexClassLoader）。</p></li></ul><p>  <strong>延迟Hook技术</strong>&nbsp;的典型实现，通过Hook&nbsp;<code>Application.attach</code>&nbsp;方法获取目标&nbsp;<code>ClassLoader</code>，再动态加载并Hook目标类的方法。在安卓逆向中，这种技术常用于：</p><ol><li>处理混淆后的类和方法。</li><li>应对动态代码加载（如热修复、插件化）。</li><li>绕过类初始化顺序导致的Hook失败问题。</li></ol></li></ul></li></ul><h3 id="8-主动调用"><a href="#8-主动调用" class="headerlink" title="8.主动调用"></a><strong>8.主动调用</strong></h3><p>静态方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">clazz</span> = XposedHelpers.findClass(<span class="hljs-string">"类名"</span>,lpparam.classLoader);<br>XposedHelpers.callStaticMethod(clazz,<span class="hljs-string">"方法名"</span>,参数(非必须));<br></code></pre></td></tr></tbody></table></figure><p>实例方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">"类名"</span>,lpparam.classLoader);<br>XposedHelpers.callMethod(clazz.newInstance(),<span class="hljs-string">"方法名"</span>,参数(非必须));<br><br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>主动调用方法，同样分为静态方法和动态方法两种。主要看是否有static修饰符。在 Java 中，<code>static</code> 关键字用于修饰 <strong>变量、方法、代码块和内部类</strong>，表示它们属于 <strong>类</strong> 而不是类的实例（对象）。这意味着 <code>static</code> 成员可以在不创建对象的情况下被直接访问。</li><li>这是教程Demo中未被调用的函数，我们尝试主动调用该函数</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262107874.png"></p><ol><li>我们发现日志通过主动调用输出</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262107778.png"></p><ul><li><p>代码详解</p><h3 id="1-XposedHelpers-callMethod-方法"><a href="#1-XposedHelpers-callMethod-方法" class="headerlink" title="1. XposedHelpers.callMethod 方法"></a><strong>1. XposedHelpers.callMethod 方法</strong></h3><ul><li><strong>作用</strong>：简化反射调用流程，无需手动获取&nbsp;<code>Method</code>&nbsp;对象。</li><li><strong>参数</strong>：<ul><li><strong>对象实例</strong>：需先创建目标类的实例。</li><li><strong>方法名</strong>：要调用的方法名称。</li><li><strong>可变参数</strong>：方法的参数值（可选）。</li></ul></li><li><strong>底层实现</strong>：内部通过反射调用&nbsp;<code>Method.invoke()</code>。</li></ul><h3 id="2-clazz-newInstance-的限制"><a href="#2-clazz-newInstance-的限制" class="headerlink" title="2. clazz.newInstance() 的限制"></a><strong>2. clazz.newInstance() 的限制</strong></h3><ul><li><strong>无参构造要求</strong>：目标类必须存在&nbsp;<strong>public 无参构造函数</strong>。</li><li><strong>潜在问题</strong>：<ul><li>若构造函数为私有（常见单例模式），抛出&nbsp;<code>InstantiationException</code>。</li><li>若构造函数需参数，抛出&nbsp;<code>IllegalArgumentException</code>。</li></ul></li></ul><h3 id="3-方法调用的条件"><a href="#3-方法调用的条件" class="headerlink" title="3. 方法调用的条件"></a><strong>3. 方法调用的条件</strong></h3><ul><li><strong>方法存在性</strong>：目标类需存在名为&nbsp;<code>refl</code>&nbsp;的方法。</li><li><strong>方法签名匹配</strong>：需匹配参数类型和数量（此处未传参，默认调用无参方法）。</li><li><strong>访问权限</strong>：若方法为&nbsp;<code>private</code>，需通过&nbsp;<code>setAccessible(true)</code>&nbsp;突破限制。</li></ul><table><thead><tr><th><strong>代码</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>findClass("类名", classLoader)</code></td><td>查找目标类</td></tr><tr><td><code>callStaticMethod(clazz, "方法名", 参数...)</code></td><td>调用静态方法</td></tr><tr><td><code>callMethod(clazz.newInstance(), "方法名", 参数...)</code></td><td>创建对象并调用实例方法</td></tr></tbody></table><p>  这些 API 在 <strong>Android 逆向、Xposed Hook、Frida Hook</strong> 中非常常用，主要用于：</p><ul><li><strong>调用未公开的类和方法</strong>。</li><li><strong>绕过安全检测（如 <code>isRooted()</code>、<code>isSecureMode()</code>）</strong>。</li><li><strong>伪造 API 返回值（如 <code>getDeviceID()</code>、<code>getToken()</code>）</strong>。</li></ul></li></ul></li></ul><h3 id="9-Hook内部类"><a href="#9-Hook内部类" class="headerlink" title="9.Hook内部类"></a><strong>9.Hook内部类</strong></h3><p>内部类:类里还有一个类class</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.zj.wuaipojie.Demo$InnerClass"</span>, loadPackageParam.classLoader, <span class="hljs-string">"innerFunc"</span>,String.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                param.args[<span class="hljs-number">0</span>] = <span class="hljs-string">"CC内部类"</span> ;<br>            }<br>        });<br><br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>Hook类里面还有一个class</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262107682.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262108404.png"></p><ol><li>用$符拼接内部类名</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262108310.png"></p><p>  3.触发内部类的方法</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262108618.png"></p><ul><li><p>代码解析</p><h3 id="1-内部类的Hook方式"><a href="#1-内部类的Hook方式" class="headerlink" title="1. 内部类的Hook方式"></a><strong>1. 内部类的Hook方式</strong></h3><ul><li><p><strong>类名格式</strong>：</p><p>  内部类的全限定名格式为&nbsp;<strong><code>外部类名$内部类名</code></strong>，例如&nbsp;<code>Demo$InnerClass</code>。</p><ul><li>匿名内部类命名通常为&nbsp;<code>外部类名$编号</code>（如&nbsp;<code>Demo$1</code>）。</li></ul></li><li><p><strong>访问权限</strong>：</p><p>  若内部类为&nbsp;<code>private</code>，Xposed仍可直接Hook，无需额外处理访问权限。</p></li></ul><h3 id="2-方法签名匹配"><a href="#2-方法签名匹配" class="headerlink" title="2. 方法签名匹配"></a><strong>2. 方法签名匹配</strong></h3><ul><li><p><strong>参数类型</strong>：</p><p>  需严格匹配目标方法的参数列表。此处目标方法&nbsp;<code>innerFunc</code>&nbsp;的签名为&nbsp;<code>void innerFunc(String)</code>。</p></li><li><p><strong>参数索引</strong>：</p><p>  <code>param.args[0]</code>&nbsp;对应方法的第一个参数（非静态方法隐含的&nbsp;<code>this</code>&nbsp;对象不计入参数索引）。</p></li></ul><table><thead><tr><th><strong>代码</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>findAndHookMethod("类名", classLoader, "方法名", 参数类型, new XC_MethodHook())</code></td><td>Hook 目标类的方法</td></tr><tr><td><code>param.args[0] = "新参数";</code></td><td>修改方法参数</td></tr><tr><td><code>param.setResult("新返回值");</code></td><td>修改方法返回值</td></tr><tr><td><code>XC_MethodReplacement</code></td><td>直接替换方法实现</td></tr><tr><td><code>findClass("外部类$内部类")</code></td><td>获取内部类的 <code>Class</code></td></tr></tbody></table><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h3><ul><li>Hook <strong>加密解密方法</strong>，修改参数/返回值。</li><li>Hook <strong>日志打印方法</strong>，截获敏感信息。</li><li>Hook <strong>检测方法（如 <code>isRooted()</code>）</strong>，绕过安全校验。</li></ul><h3 id="1-匿名内部类的Hook"><a href="#1-匿名内部类的Hook" class="headerlink" title="1. 匿名内部类的Hook"></a><strong>1. 匿名内部类的Hook</strong></h3><ul><li><p><strong>定位匿名内部类</strong>：</p><p>  通过反编译工具查找类名（如&nbsp;<code>Demo$1</code>），或通过代码行为分析确定目标方法。</p></li><li><p><strong>示例代码</strong>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Hook匿名内部类Demo$1的某个方法</span><br>XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.zj.wuaipojie.Demo$1"</span>, classLoader, <span class="hljs-string">"run"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> {<br>        <span class="hljs-comment">// 修改逻辑</span><br>    }<br>});<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="2-静态内部类的处理"><a href="#2-静态内部类的处理" class="headerlink" title="2. 静态内部类的处理"></a><strong>2. 静态内部类的处理</strong></h3><ul><li><p><strong>类名格式</strong>：</p><p>  静态内部类名为&nbsp;<code>外部类名$静态内部类名</code>，Hook方式与非静态内部类一致。</p></li><li><p><strong>访问权限</strong>：</p><p>  静态内部类无需外部类实例即可访问，可直接实例化。</p></li></ul><h3 id="3-修改非String类型参数"><a href="#3-修改非String类型参数" class="headerlink" title="3. 修改非String类型参数"></a><strong>3. 修改非String类型参数</strong></h3><ul><li><p><strong>扩展应用</strong>：</p><p>  支持任意类型参数修改（需匹配目标方法签名）。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改int类型参数</span><br>param.args[<span class="hljs-number">0</span>] = <span class="hljs-number">123</span>;<br><br><span class="hljs-comment">// 修改对象类型参数</span><br>param.args[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomObject</span>();<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul><h3 id="10-反射大法"><a href="#10-反射大法" class="headerlink" title="10.反射大法"></a><strong>10.反射大法</strong></h3><ul><li><p>反射基本了解</p><p>  <strong>反射（Reflection）</strong> 是 Java 提供的一种 <strong>在运行时动态操作类、方法、字段、构造方法</strong> 的机制。</p><p>  在安卓逆向（如 Xposed Hook、Frida、脱壳、动态调试）中，反射是常用技术，尤其是：</p><ul><li><strong>绕过隐藏 API 限制</strong></li><li><strong>调用私有/未公开方法</strong></li><li><strong>动态修改/访问类的私有成员</strong></li><li><strong>绕过 <code>ProGuard</code> 混淆</strong></li></ul><h3 id="1-反射的基本原理"><a href="#1-反射的基本原理" class="headerlink" title="1. 反射的基本原理"></a><strong>1. 反射的基本原理</strong></h3><p>  Java 反射主要依赖 <code>java.lang.reflect</code> 包，包含：</p><table><thead><tr><th>类</th><th>作用</th></tr></thead><tbody><tr><td><code>Class</code></td><td>获取类的信息（如方法、字段、构造器）</td></tr><tr><td><code>Method</code></td><td>代表类的方法，可用于调用</td></tr><tr><td><code>Field</code></td><td>代表类的字段（变量），可用于读写</td></tr><tr><td><code>Constructor</code></td><td>代表类的构造方法，可用于实例化对象</td></tr></tbody></table><ul><li><strong>反射允许动态访问 &amp; 修改类的成员（方法、变量）</strong></li><li><strong>可以绕过 Java 访问权限（私有方法 &amp; 变量）</strong></li><li><strong>常用于绕过检测（如 <code>isRooted()</code>、<code>getDeviceID()</code>）</strong></li><li><strong>配合 Xposed / Frida 进行逆向分析</strong></li><li><strong>Hook <code>Class.forName()</code>、<code>Method.invoke()</code> 可以拦截所有反射调用</strong></li></ul><h3 id="2-反射的核心API"><a href="#2-反射的核心API" class="headerlink" title="2. 反射的核心API"></a><strong>2. 反射的核心API</strong></h3><table><thead><tr><th><strong>API</strong></th><th><strong>用途</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><code>Class.forName(String)</code></td><td>动态加载类</td><td><code>Class&lt;?&gt; clazz = Class.forName("com.example.Target");</code></td></tr><tr><td><code>clazz.getDeclaredMethod()</code></td><td>获取方法（包括私有）</td><td><code>Method method = clazz.getDeclaredMethod("methodName", paramTypes);</code></td></tr><tr><td><code>method.setAccessible(true)</code></td><td>突破访问权限限制</td><td><code>method.setAccessible(true);</code></td></tr><tr><td><code>method.invoke(Object,args)</code></td><td>调用方法</td><td><code>method.invoke(instance, arg1, arg2);</code></td></tr><tr><td><code>clazz.getDeclaredField()</code></td><td>获取字段（包括私有）</td><td><code>Field field = clazz.getDeclaredField("fieldName");</code></td></tr><tr><td><code>field.set(Object, value)</code></td><td>修改字段值</td><td><code>field.set(instance, newValue);</code></td></tr></tbody></table></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.zj.wuaipojie.Demo$InnerClass"</span>, lpparam.classLoader, <span class="hljs-string">"innerFunc"</span>,String.class,&nbsp;&nbsp;<span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">//第一步找到类</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">//找到方法，如果是私有方法就要setAccessible设置访问权限</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">//invoke主动调用或者set修改值(变量)</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<span class="hljs-type">Class</span> <span class="hljs-variable">democlass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>,<span class="hljs-literal">false</span>,lpparam.classLoader);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">demomethod</span> <span class="hljs-operator">=</span> democlass.getDeclaredMethod(<span class="hljs-string">"refl"</span>);<br>                demomethod.setAccessible(<span class="hljs-literal">true</span>);<br>                demomethod.invoke(clazz.newInstance());<br>&nbsp; &nbsp; }<br>});<br><br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>查找目标类，Hook内部类方法并在回调中反射调用另一个方法</li><li>有修饰符，说明它是一个私有的方法，需要先将权限设置为true，然后再通过invoke来实现主动调用</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262108154.png"></p><ol><li>实例需要先通过API找到当前类名的字节码，传<code>clazz.newInstance()</code>来作为一个实例，通过反射来进行主动调用。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262108773.png"></p><p>  4.如果不通过主动调用，而是set值来进行一个修改</p><ul><li><p>代码解析</p><h3 id="1-XposedHelpers的作用"><a href="#1-XposedHelpers的作用" class="headerlink" title="1. XposedHelpers的作用"></a><strong>1. XposedHelpers的作用</strong></h3><ul><li><strong>简化Hook流程</strong>：封装反射API，直接通过类名和方法名进行Hook。</li><li><strong>自动处理ClassLoader</strong>：使用目标应用的&nbsp;<code>lpparam.classLoader</code>，避免类加载隔离问题。</li></ul><h3 id="2-内部类的Hook"><a href="#2-内部类的Hook" class="headerlink" title="2. 内部类的Hook"></a><strong>2. 内部类的Hook</strong></h3><ul><li><strong>命名规则</strong>：内部类的全限定名为&nbsp;<code>外部类名$内部类名</code>，如&nbsp;<code>Demo$InnerClass</code>。</li><li><strong>逆向意义</strong>：内部类常包含关键业务逻辑（如加密、校验），Hook后可干预执行流程。</li></ul><h3 id="3-反射调用私有方法"><a href="#3-反射调用私有方法" class="headerlink" title="3. 反射调用私有方法"></a><strong>3. 反射调用私有方法</strong></h3><ul><li><strong>核心步骤</strong>：<ol><li><strong>加载目标类</strong>：<code>Class.forName()</code>&nbsp;或&nbsp;<code>XposedHelpers.findClass</code>。</li><li><strong>获取方法对象</strong>：<code>getDeclaredMethod("refl")</code>（假设无参）。</li><li><strong>突破访问限制</strong>：<code>setAccessible(true)</code>。</li><li><strong>创建实例并调用</strong>：<code>invoke(clazz.newInstance())</code>。</li></ol></li><li><strong>逆向应用</strong>：主动调用私有方法可绕过正常逻辑触发敏感操作（如生成密钥、解锁功能）。</li></ul><h3 id="4-动态实例化对象"><a href="#4-动态实例化对象" class="headerlink" title="4. 动态实例化对象"></a><strong>4. 动态实例化对象</strong></h3><ul><li><strong><code>clazz.newInstance()</code>&nbsp;的限制</strong>：<ul><li><p>要求目标类有&nbsp;<strong>public无参构造函数</strong>，否则抛出&nbsp;<code>InstantiationException</code>。</p></li><li><p>若构造函数为私有，需使用&nbsp;<code>XposedHelpers.newInstance()</code>&nbsp;替代：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 示例：强制调用私有构造方法</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> XposedHelpers.newInstance(clazz);<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><h2 id="2-Xposed-Hook-机制"><a href="#2-Xposed-Hook-机制" class="headerlink" title="2. Xposed Hook 机制"></a><strong>2. Xposed Hook 机制</strong></h2><h3 id="①-findClass-：查找类"><a href="#①-findClass-：查找类" class="headerlink" title="① findClass()：查找类"></a><strong>① <code>findClass()</code>：查找类</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, lpparam.classLoader);<br></code></pre></td></tr></tbody></table></figure><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a><strong>相关知识点</strong></h3><ul><li><code>XposedHelpers.findClass(className, classLoader)</code>：<ul><li><p>作用：在目标应用的 <code>ClassLoader</code> 里查找 <code>com.zj.wuaipojie.Demo</code> 类。</p></li><li><p><code>lpparam.classLoader</code>：由 <code>Xposed</code> 提供，确保加载的是目标应用的类。</p></li><li><p><strong>等效的 Java 代码：</strong></p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, <span class="hljs-literal">false</span>, lpparam.classLoader);<br><br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><hr><h3 id="②-findAndHookMethod-：Hook-内部类的方法"><a href="#②-findAndHookMethod-：Hook-内部类的方法" class="headerlink" title="② findAndHookMethod()：Hook 内部类的方法"></a><strong>② <code>findAndHookMethod()</code>：Hook 内部类的方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>    <span class="hljs-string">"com.zj.wuaipojie.Demo$InnerClass"</span>,<br>    lpparam.classLoader,<br>    <span class="hljs-string">"innerFunc"</span>,<br>    String.class,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>            <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br></code></pre></td></tr></tbody></table></figure><h3 id="相关知识点-1"><a href="#相关知识点-1" class="headerlink" title="相关知识点"></a><strong>相关知识点</strong></h3><ul><li><code>findAndHookMethod(className, classLoader, methodName, paramTypes..., XC_MethodHook)</code>：<ul><li>作用：Hook 目标类的方法，修改 <code>innerFunc(String)</code> 的执行行为。</li><li><strong><code>com.zj.wuaipojie.Demo$InnerClass</code></strong>：<ul><li><code>$</code> 表示 <strong>内部类</strong>，即 <code>InnerClass</code> 是 <code>Demo</code> 类的 <strong>成员内部类</strong>。</li><li><code>InnerClass</code> 必须是 <strong>非静态（非 static）</strong>，否则它的 <code>this</code> 需要 <code>Demo</code> 实例。</li></ul></li><li><code>beforeHookedMethod()</code>：<ul><li><strong>在原方法执行前</strong> 运行，可以 <strong>修改参数、拦截执行</strong>。</li></ul></li></ul></li></ul><hr><h2 id="3-Java-反射调用-Demo-refl"><a href="#3-Java-反射调用-Demo-refl" class="headerlink" title="3. Java 反射调用 Demo.refl()"></a><strong>3. Java 反射调用 <code>Demo.refl()</code></strong></h2><h3 id="③-Class-forName-：通过反射查找类"><a href="#③-Class-forName-：通过反射查找类" class="headerlink" title="③ Class.forName()：通过反射查找类"></a><strong>③ <code>Class.forName()</code>：通过反射查找类</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">democlass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, <span class="hljs-literal">false</span>, lpparam.classLoader);<br><br></code></pre></td></tr></tbody></table></figure><h3 id="相关知识点-2"><a href="#相关知识点-2" class="headerlink" title="相关知识点"></a><strong>相关知识点</strong></h3><ul><li><code>Class.forName(className, initialize, classLoader)</code>：<ul><li><p><strong>作用</strong>：动态加载 <code>Demo</code> 类，<code>false</code> 代表 <strong>不触发静态初始化</strong>。</p></li><li><p><strong>等效的 Xposed 方法</strong>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; clazz = XposedHelpers.findClass(<span class="hljs-string">"com.zj.wuaipojie.Demo"</span>, lpparam.classLoader);<br><br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><hr><h3 id="④-getDeclaredMethod-：获取私有方法"><a href="#④-getDeclaredMethod-：获取私有方法" class="headerlink" title="④ getDeclaredMethod()：获取私有方法"></a><strong>④ <code>getDeclaredMethod()</code>：获取私有方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">demomethod</span> <span class="hljs-operator">=</span> democlass.getDeclaredMethod(<span class="hljs-string">"refl"</span>);<br>demomethod.setAccessible(<span class="hljs-literal">true</span>);<br><br></code></pre></td></tr></tbody></table></figure><h3 id="相关知识点-3"><a href="#相关知识点-3" class="headerlink" title="相关知识点"></a><strong>相关知识点</strong></h3><ul><li><strong><code>getDeclaredMethod(methodName, 参数类型...)</code></strong><ul><li><strong>作用</strong>：查找 <code>refl()</code> 方法（包括 <code>private</code>）。</li><li><strong>区别</strong>：<ul><li><code>getMethod()</code>：只能获取 <code>public</code> 方法。</li><li><code>getDeclaredMethod()</code>：可获取 <code>private</code> / <code>protected</code> 方法。</li></ul></li></ul></li><li><strong><code>setAccessible(true)</code></strong><ul><li>解除 Java 访问权限，允许调用 <code>private</code> 方法。</li><li><strong>绕过 ProGuard 混淆</strong>：<ul><li>即使 <code>refl()</code> 被混淆成 <code>a()</code>，仍可通过反射调用。</li></ul></li></ul></li></ul><hr><h3 id="⑤-invoke-：反射调用-refl-方法"><a href="#⑤-invoke-：反射调用-refl-方法" class="headerlink" title="⑤ invoke()：反射调用 refl() 方法"></a><strong>⑤ <code>invoke()</code>：反射调用 <code>refl()</code> 方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">demomethod.invoke(clazz.newInstance());<br><br></code></pre></td></tr></tbody></table></figure><h3 id="相关知识点-4"><a href="#相关知识点-4" class="headerlink" title="相关知识点"></a><strong>相关知识点</strong></h3><ul><li><strong><code>invoke(对象, 参数...)</code></strong><ul><li><p>作用：在 <code>clazz.newInstance()</code> 对象上调用 <code>refl()</code> 方法。</p></li><li><p><code>clazz.newInstance()</code> 等价于：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">demoInstance</span> <span class="hljs-operator">=</span> democlass.getConstructor().newInstance();<br>demomethod.invoke(demoInstance);<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>注意：</strong></p><ul><li><p><code>newInstance()</code> 只能用于 <strong>无参构造方法</strong>。</p></li><li><p>如果 <code>Demo</code> 没有无参构造方法，应使用：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Constructor&lt;?&gt; constructor = democlass.getDeclaredConstructor(String.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">demoInstance</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">"参数"</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="11-遍历所有类下的所有方法"><a href="#11-遍历所有类下的所有方法" class="headerlink" title="11.遍历所有类下的所有方法"></a><strong>11.遍历所有类下的所有方法</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(ClassLoader.class, <span class="hljs-string">"loadClass"</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>                <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">clazzName</span> <span class="hljs-operator">=</span> clazz.getName();<br>                <span class="hljs-comment">//排除非包名的类</span><br>                <span class="hljs-keyword">if</span>(clazzName.contains(<span class="hljs-string">"com.zj.wuaipojie"</span>)){<br>                    Method[] mds = clazz.getDeclaredMethods();<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;mds.length; i++){<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">Method</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> mds[i];<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> mds[i].getModifiers();<br>                    <span class="hljs-comment">//去除抽象、native、接口方法</span><br>                        <span class="hljs-keyword">if</span>(!Modifier.isAbstract(mod)<br>                            &amp;&amp; !Modifier.isNative(mod)<br>                            &amp;&amp; !Modifier.isInterface(mod)){<br>                            XposedBridge.hookMethod(mds[i], <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                                    <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                                    Log.d(<span class="hljs-string">"zj2595"</span>,md.toString());<br>                                }<br>                            });<br>                        }<br>                    }<br>                }<br>            }<br>        });<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>将加载该界面时所用的方法加载遍历了出来</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262109554.png"></p><ul><li><p>代码解析</p><h3 id="1-Hook-ClassLoader-loadClass-的意图"><a href="#1-Hook-ClassLoader-loadClass-的意图" class="headerlink" title="1. Hook&nbsp;ClassLoader.loadClass&nbsp;的意图"></a><strong>1. Hook&nbsp;<code>ClassLoader.loadClass</code>&nbsp;的意图</strong></h3><ul><li><strong>动态监控类加载</strong>：在类被加载到内存时触发回调，实时捕获目标类的所有方法。</li><li><strong>逆向价值</strong>：<ul><li>批量Hook混淆后的类和方法（无需提前知道具体名称）。</li><li>跟踪应用初始化流程，定位关键逻辑（如加密、网络请求）。</li></ul></li></ul><h3 id="2-方法过滤逻"><a href="#2-方法过滤逻" class="headerlink" title="2. 方法过滤逻"></a><strong>2. 方法过滤逻</strong></h3><ul><li><strong>排除抽象方法</strong>：抽象方法无实际代码，Hook无意义。</li><li><strong>排除Native方法</strong>：Native方法（JNI实现）无法通过Java层Hook。</li><li><strong>排除接口方法</strong>：接口方法由实现类具体定义，直接Hook接口可能导致重复拦截。</li></ul><h3 id="3-动态插桩（Instrumentation）"><a href="#3-动态插桩（Instrumentation）" class="headerlink" title="3. 动态插桩（Instrumentation）"></a><strong>3. 动态插桩（Instrumentation）</strong></h3><ul><li><strong>技术本质</strong>：在目标方法执行前/后插入自定义代码（如日志、参数修改）。</li><li><strong>逆向应用</strong>：<ul><li>监控方法调用顺序，分析代码执行流程</li><li>动态修改方法参数或返回值（需在<code>beforeHookedMethod</code>中操作）。</li></ul></li></ul><h3 id="1-Hook-ClassLoader-loadClass"><a href="#1-Hook-ClassLoader-loadClass" class="headerlink" title="(1) Hook ClassLoader.loadClass()"></a><strong>(1) Hook <code>ClassLoader.loadClass()</code></strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>    ClassLoader.class,<br>    <span class="hljs-string">"loadClass"</span>,<br>    String.class,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>            <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用"><a href="#🔹-作用" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p><strong>Hook <code>ClassLoader.loadClass(String)</code> 方法</strong>，在类被加载后执行自定义逻辑。</p></li><li><p><strong>等效 Java 代码：</strong></p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> getClass().getClassLoader();<br>Class&lt;?&gt; clazz = classLoader.loadClass(<span class="hljs-string">"com.example.MyClass"</span>);<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>Xposed Hook 方式：</strong></p><ul><li><code>afterHookedMethod()</code> 确保 <code>loadClass()</code> 方法执行后，我们可以获取到被加载的 <code>Class&lt;?&gt;</code> 对象。</li></ul></li></ul><hr><h3 id="2-获取-loadClass-结果（即新加载的类）"><a href="#2-获取-loadClass-结果（即新加载的类）" class="headerlink" title="(2) 获取 loadClass() 结果（即新加载的类）"></a><strong>(2) 获取 <code>loadClass()</code> 结果（即新加载的类）</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();<br><span class="hljs-type">String</span> <span class="hljs-variable">clazzName</span> <span class="hljs-operator">=</span> clazz.getName();<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-1"><a href="#🔹-作用-1" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><code>param.getResult()</code>：获取 <code>loadClass(String)</code> 的返回值，即 <code>Class&lt;?&gt;</code> 对象。</li><li><code>clazz.getName()</code>：获取类名，例如 <code>"com.zj.wuaipojie.Demo"</code>。</li></ul><hr><h3 id="3-过滤目标包名"><a href="#3-过滤目标包名" class="headerlink" title="(3) 过滤目标包名"></a><strong>(3) 过滤目标包名</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(clazzName.contains(<span class="hljs-string">"com.zj.wuaipojie"</span>)) {<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-2"><a href="#🔹-作用-2" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p>只 Hook 目标应用的类，避免 Hook 系统类（如 <code>android.*</code>）。</p></li><li><p>这里使用了 <code>contains()</code>，可以优化为：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(clazzName.startsWith(<span class="hljs-string">"com.zj.wuaipojie"</span>))<br></code></pre></td></tr></tbody></table></figure><p>  这样能 <strong>精确匹配包名开头</strong>，减少误判。</p></li></ul><hr><h3 id="4-获取-clazz-的所有方法"><a href="#4-获取-clazz-的所有方法" class="headerlink" title="(4) 获取 clazz 的所有方法"></a><strong>(4) 获取 <code>clazz</code> 的所有方法</strong></h3><h3 id="🔹-作用-3"><a href="#🔹-作用-3" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p>获取 <strong>所有</strong> 方法，包括 <code>private</code>、<code>protected</code> 和 <code>public</code> 方法。</p></li><li><p><strong>等效 Java 代码：</strong></p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Method[] methods = clazz.getDeclaredMethods();<br></code></pre></td></tr></tbody></table></figure></li></ul><hr><h3 id="5-遍历方法，筛选可-Hook-方法"><a href="#5-遍历方法，筛选可-Hook-方法" class="headerlink" title="(5) 遍历方法，筛选可 Hook 方法"></a><strong>(5) 遍历方法，筛选可 Hook 方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mds.length; i++) {<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Method</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> mds[i];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> mds[i].getModifiers();<br>    <span class="hljs-comment">// 去除抽象、native、接口方法</span><br>    <span class="hljs-keyword">if</span> (!Modifier.isAbstract(mod)<br>        &amp;&amp; !Modifier.isNative(mod)<br>        &amp;&amp; !Modifier.isInterface(mod)) { <br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-4"><a href="#🔹-作用-4" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li>过滤掉无法直接 Hook 的方法：<ul><li><code>Modifier.isAbstract(mod)</code>：抽象方法不能直接 Hook。</li><li><code>Modifier.isNative(mod)</code>：<code>native</code> 方法需要 Frida 或 JNI Hook。</li><li><code>Modifier.isInterface(mod)</code>：接口方法不能 Hook。</li></ul></li></ul><hr><h3 id="6-Hook-选定的方法"><a href="#6-Hook-选定的方法" class="headerlink" title="(6) Hook 选定的方法"></a><strong>(6) Hook 选定的方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedBridge.hookMethod(mds[i], <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>        Log.d(<span class="hljs-string">"zj2595"</span>, md.toString());<br>    }<br>});<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-5"><a href="#🔹-作用-5" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p><strong>Hook 目标方法</strong>，在方法执行前打印方法签名：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Log.d(<span class="hljs-string">"zj2595"</span>, md.toString());<br></code></pre></td></tr></tbody></table></figure><p>  这将在 Logcat 里输出：</p>  <figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">D/zj2595: public void com<span class="hljs-selector-class">.zj</span><span class="hljs-selector-class">.wuaipojie</span><span class="hljs-selector-class">.Demo</span><span class="hljs-selector-class">.testMethod</span>()<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul><h3 id="12-Xposed妙用"><a href="#12-Xposed妙用" class="headerlink" title="12.Xposed妙用"></a><strong>12.Xposed妙用</strong></h3><p>字符串赋值定位:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">"android.widget.TextView"</span>, loadPackageParam.classLoader, <span class="hljs-string">"setText"</span>, CharSequence.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>                Log.d(<span class="hljs-string">"zj2595"</span>, param.args[<span class="hljs-number">0</span>].toString());<br>                <span class="hljs-keyword">if</span> (param.args[<span class="hljs-number">0</span>].equals(<span class="hljs-string">"已过期"</span>)) {<br>                    printStackTrace();<br>                }<br>            }<br>        });<br>    }<br>    <span class="hljs-comment">//堆栈调用</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStackTrace</span><span class="hljs-params">()</span> {<br>            <span class="hljs-type">Throwable</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>();<br>            StackTraceElement[] stackElements = ex.getStackTrace();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; stackElements.length; i++) {<br>                <span class="hljs-type">StackTraceElement</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> stackElements[i];<br>                Log.d(<span class="hljs-string">"zj2595"</span>,<span class="hljs-string">"at "</span> + element.getClassName() + <span class="hljs-string">"."</span> + element.getMethodName() + <span class="hljs-string">"("</span> + element.getFileName() + <span class="hljs-string">":"</span> + element.getLineNumber() + <span class="hljs-string">")"</span>);<br>            }<br>        }<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>找到方法后，先输出一下，查看是什么字符串进行的settext</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262109236.png"></p><ol><li>对字符串进行过滤，输出堆栈，我们发现调用settext的是oncreate方法，如果要修改字符串通过堆栈调用找到该方法，对字符串及进行修改。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262109960.png"></p><ul><li><p>代码详解</p><h3 id="1-Hook-TextView-setText"><a href="#1-Hook-TextView-setText" class="headerlink" title="(1) Hook TextView.setText()"></a><strong>(1) Hook <code>TextView.setText()</code></strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<br>    <span class="hljs-string">"android.widget.TextView"</span>,<br>    lpparam.classLoader,<br>    <span class="hljs-string">"setText"</span>,<br>    CharSequence.class,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>            <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-6"><a href="#🔹-作用-6" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><strong>拦截 <code>TextView.setText(CharSequence)</code> 方法</strong>，用于监控 App 内的 <strong>所有 UI 文本更新</strong>。</li><li><code>param.args[0]</code> 代表 <code>setText()</code> 传入的文本内容。</li></ul><hr><h3 id="2-记录-setText-的内容"><a href="#2-记录-setText-的内容" class="headerlink" title="(2) 记录 setText() 的内容"></a><strong>(2) 记录 <code>setText()</code> 的内容</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Log.d(<span class="hljs-string">"zj2595"</span>, param.args[<span class="hljs-number">0</span>].toString());<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-7"><a href="#🔹-作用-7" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p>打印 <code>TextView</code> 设置的文本，例如：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">D/zj2595: 试用期已过<br>D/zj2595: 请更新到最新版<br></code></pre></td></tr></tbody></table></figure></li></ul><hr><h3 id="3-检测目标文本-已过期"><a href="#3-检测目标文本-已过期" class="headerlink" title="(3) 检测目标文本 &quot;已过期&quot;"></a><strong>(3) 检测目标文本 <code>"已过期"</code></strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (param.args[<span class="hljs-number">0</span>].equals(<span class="hljs-string">"已过期"</span>)) {<br>    printStackTrace();<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-8"><a href="#🔹-作用-8" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><strong>如果文本是 <code>"已过期"</code>，调用 <code>printStackTrace()</code> 打印调用栈</strong>，帮助分析是谁调用了 <code>setText()</code> 方法。</li></ul><hr><h3 id="4-打印调用栈"><a href="#4-打印调用栈" class="headerlink" title="(4) 打印调用栈"></a><strong>(4) 打印调用栈</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStackTrace</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>();<br>    StackTraceElement[] stackElements = ex.getStackTrace();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; stackElements.length; i++) {<br>        <span class="hljs-type">StackTraceElement</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> stackElements[i];<br>        Log.d(<span class="hljs-string">"zj2595"</span>, <span class="hljs-string">"at "</span> + element.getClassName() + <span class="hljs-string">"."</span> + element.getMethodName() + <span class="hljs-string">"("</span> + element.getFileName() + <span class="hljs-string">":"</span> + element.getLineNumber() + <span class="hljs-string">")"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-9"><a href="#🔹-作用-9" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p>创建 <code>Throwable</code> 对象，获取当前方法的 <strong>调用堆栈</strong>（Stack Trace）。</p></li><li><p>遍历 <code>StackTraceElement[]</code>，打印方法调用路径，例如：</p>  <figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">D/zj2595: at com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.MainActivity</span><span class="hljs-selector-class">.onCreate</span>(MainActivity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">42</span>)<br>D/zj2595: at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Activity</span><span class="hljs-selector-class">.performCreate</span>(Activity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">789</span>)<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>帮助分析是谁在 <code>setText("已过期")</code>，进而找到业务逻辑！</strong></p></li></ul><h3 id="关键API说明"><a href="#关键API说明" class="headerlink" title="关键API说明"></a><strong>关键API说明</strong></h3><ul><li><p><strong><code>param.args[0]</code></strong>：</p><p>  <code>setText</code>&nbsp;方法的第一个参数（<code>CharSequence</code>&nbsp;类型），即要显示的文本内容。</p></li><li><p><strong><code>Throwable.getStackTrace()</code></strong>：</p><p>  获取当前线程的调用堆栈，用于追踪方法调用层级。</p></li></ul></li></ul></li></ul><p>点击事件监听:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">claz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">"android.view.View"</span>, loadPackageParam.classLoader);<br>        XposedBridge.hookAllMethods(clazz, <span class="hljs-string">"performClick"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>                <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">listenerInfoObject</span> <span class="hljs-operator">=</span> XposedHelpers.getObjectField(param.thisObject, <span class="hljs-string">"mListenerInfo"</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">mOnClickListenerObject</span> <span class="hljs-operator">=</span> XposedHelpers.getObjectField(listenerInfoObject, <span class="hljs-string">"mOnClickListener"</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">callbackType</span> <span class="hljs-operator">=</span> mOnClickListenerObject.getClass().getName();Log.d(<span class="hljs-string">"zj2595"</span>,callbackType);<br>            }<br>        });<br><br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>我们可以发现点击按钮后的方法被打印出来</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262109835.png"></p><ul><li><p>代码解析</p><h3 id="1-Hook-View-performClick"><a href="#1-Hook-View-performClick" class="headerlink" title="(1) Hook View.performClick()"></a><strong>(1) Hook <code>View.performClick()</code></strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">"android.view.View"</span>, lpparam.classLoader);<br>XposedBridge.hookAllMethods(clazz, <span class="hljs-string">"performClick"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹作用"><a href="#🔹作用" class="headerlink" title="🔹作用"></a><strong>🔹作用</strong></h3><ul><li><code>performClick()</code> 是 <strong>所有点击事件的核心方法</strong>，最终会触发 <code>OnClickListener.onClick(View v)</code> 方法。</li><li><strong>通过 Hook <code>performClick()</code>，可以拦截所有 <code>View</code> 的点击事件，获取具体的 <code>OnClickListener</code> 监听器</strong>。</li></ul><hr><h3 id="2-获取-View-的-mListenerInfo"><a href="#2-获取-View-的-mListenerInfo" class="headerlink" title="(2) 获取 View 的 mListenerInfo"></a><strong>(2) 获取 <code>View</code> 的 <code>mListenerInfo</code></strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">listenerInfoObject</span> <span class="hljs-operator">=</span> XposedHelpers.getObjectField(param.thisObject, <span class="hljs-string">"mListenerInfo"</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-10"><a href="#🔹-作用-10" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><strong><code>View</code> 并不会直接存储 <code>OnClickListener</code>，而是放在 <code>mListenerInfo</code> 这个内部对象中</strong>。</li><li>这里 <strong>通过 Xposed 反射 <code>getObjectField()</code> 读取 <code>mListenerInfo</code> 对象</strong>，它是 <code>View.ListenerInfo</code> 类的实例，包含 <code>mOnClickListener</code> 字段。</li></ul><hr><h3 id="3-获取-mOnClickListener"><a href="#3-获取-mOnClickListener" class="headerlink" title="(3) 获取 mOnClickListener"></a><strong>(3) 获取 <code>mOnClickListener</code></strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">mOnClickListenerObject</span> <span class="hljs-operator">=</span> XposedHelpers.getObjectField(listenerInfoObject, <span class="hljs-string">"mOnClickListener"</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-11"><a href="#🔹-作用-11" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><strong>从 <code>mListenerInfo</code> 中获取 <code>mOnClickListener</code> 字段</strong>，即实际处理点击事件的 <code>OnClickListener</code> 实例。</li><li>这个 <code>mOnClickListenerObject</code> <strong>就是 <code>View.setOnClickListener()</code> 绑定的 <code>OnClickListener</code> 实现类</strong>。</li></ul><hr><h3 id="4-打印-OnClickListener-的实现类"><a href="#4-打印-OnClickListener-的实现类" class="headerlink" title="(4) 打印 OnClickListener 的实现类"></a><strong>(4) 打印 <code>OnClickListener</code> 的实现类</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">callbackType</span> <span class="hljs-operator">=</span> mOnClickListenerObject.getClass().getName();<br>Log.d(<span class="hljs-string">"zj2595"</span>, callbackType);<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-12"><a href="#🔹-作用-12" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p>通过 <code>mOnClickListenerObject.getClass().getName()</code> 获取 <strong><code>OnClickListener</code> 的真实类名</strong>。</p></li><li><p><strong>用于分析 <code>View</code> 点击事件的具体处理逻辑</strong>，例如：</p>  <figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">D/zj2595: <span class="hljs-keyword">com</span>.example.MainActivity<span class="hljs-number">$1</span><br></code></pre></td></tr></tbody></table></figure><p>  这里的 <code>com.example.MainActivity$1</code> 表示 <code>OnClickListener</code> 是 <code>MainActivity</code> 的匿名内部类。</p></li></ul><h3 id="1-Hook-View-performClick-的意图"><a href="#1-Hook-View-performClick-的意图" class="headerlink" title="1. Hook&nbsp;View.performClick&nbsp;的意图"></a><strong>1. Hook&nbsp;<code>View.performClick</code>&nbsp;的意图</strong></h3><ul><li><strong>监控点击事件</strong>：捕获所有View的点击操作（按钮、列表项等），分析用户交互行为。</li><li><strong>定位点击处理逻辑</strong>：通过监听器类型追踪到具体实现类（如Activity、匿名内部类），辅助逆向工程师快速定位关键代码。</li></ul><h3 id="2-反射获取私有字段"><a href="#2-反射获取私有字段" class="headerlink" title="2. 反射获取私有字段"></a><strong>2. 反射获取私有字段</strong></h3><ul><li><p><strong>字段访问</strong>：</p><p>  <code>mListenerInfo</code>&nbsp;和&nbsp;<code>mOnClickListener</code>&nbsp;均为View的私有字段，通过&nbsp;<code>XposedHelpers.getObjectField</code>&nbsp;突破访问限制。</p></li><li><p><strong>逆向意义</strong>：</p><p>  直接访问私有字段可绕过常规方法（如<code>View.getListenerInfo()</code>），避免触发潜在的反调试检测。</p></li></ul><h3 id="3-监听器类型分析"><a href="#3-监听器类型分析" class="headerlink" title="3. 监听器类型分析"></a><strong>3. 监听器类型分析</strong></h3><ul><li><strong>常见类型</strong>：<ul><li><strong>匿名内部类</strong>：<code>MainActivity$1</code>（自动生成的类名）。</li><li><strong>Lambda表达式</strong>：<code>$$Lambda$MainActivity$Xo4wq...</code>（ProGuard混淆后名称）。</li><li><strong>Activity自身实现</strong>：<code>com.example.MainActivity</code>（实现&nbsp;<code>View.OnClickListener</code>&nbsp;接口）。</li></ul></li></ul></li></ul></li></ul><p>改写布局:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeSixth"</span>, lpparam.classLoader,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-string">"onCreate"</span>, Bundle.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br>&nbsp; &nbsp; <span class="hljs-meta">@Override</span><br>&nbsp; &nbsp; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">View</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> (View)XposedHelpers.callMethod(param.thisObject,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; <span class="hljs-string">"findViewById"</span>, <span class="hljs-number">0x7f0800de</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;img.setVisibility(View.GONE);<br><br>&nbsp; &nbsp; }<br>});<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><ol><li>在onCreate方法中我们可以找到一些布局的绑定，如button控件等内容都是在onCreate方法中实例。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262110935.png"></p><ol><li>传入控件16进制的值</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262110214.png"></p><ol><li>我们会发现原来这部分的图片已经被隐藏起来</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262110524.png"></p><ul><li><p>代码解析</p><h3 id="1-Hook-Activity-onCreate的意图"><a href="#1-Hook-Activity-onCreate的意图" class="headerlink" title="1. Hook Activity.onCreate的意图"></a><strong>1. Hook Activity.onCreate的意图</strong></h3><ul><li><strong>篡改UI初始化</strong>：在Activity创建时修改界面布局，隐藏或替换关键元素（如验证提示、广告）。</li><li><strong>绕过界面限制</strong>：例如隐藏“未授权”提示，直接展示功能界面。</li></ul><h3 id="2-资源ID的逆向定位"><a href="#2-资源ID的逆向定位" class="headerlink" title="2. 资源ID的逆向定位"></a><strong>2. 资源ID的逆向定位</strong></h3><ul><li><strong>资源ID格式</strong>：<code>0x7f0800de</code>&nbsp;表示APK资源ID，通常对应&nbsp;<code>R.id.xxx</code>。</li><li><strong>逆向定位方法</strong>：<ol><li><strong>反编译工具</strong>：使用 Jadx/Ghidra 查找&nbsp;<code>R.java</code>&nbsp;或资源映射表，将ID转换为具体名称（如&nbsp;<code>R.id.btn_submit</code>）。</li><li><strong>动态调试</strong>：通过Android Studio的Layout Inspector实时查看界面元素ID。</li></ol></li></ul><h3 id="3-动态调用findViewById"><a href="#3-动态调用findViewById" class="headerlink" title="3. 动态调用findViewById"></a><strong>3. 动态调用findViewById</strong></h3><ul><li><p><strong>反射调用</strong>：通过&nbsp;<code>XposedHelpers.callMethod</code>&nbsp;直接调用Activity的&nbsp;<code>findViewById</code>&nbsp;方法，等价于：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">View</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> ((Activity) param.thisObject).findViewById(<span class="hljs-number">0x7f0800de</span>);<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>逆向意义</strong>：无需修改APK代码，动态操控UI元素。</p></li></ul><h3 id="1-Hook-onCreate-方法"><a href="#1-Hook-onCreate-方法" class="headerlink" title="(1) Hook onCreate() 方法"></a><strong>(1) Hook <code>onCreate()</code> 方法</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeSixth"</span>, lpparam.classLoader,<br>&nbsp; &nbsp; <span class="hljs-string">"onCreate"</span>, Bundle.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() {<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-13"><a href="#🔹-作用-13" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><strong>目标类：</strong> <code>com.zj.wuaipojie.ui.ChallengeSixth</code></li><li><strong>目标方法：</strong> <code>onCreate(Bundle savedInstanceState)</code></li><li><strong>Hook <code>onCreate()</code> 的原因：</strong><ul><li><code>onCreate()</code> 是 <code>Activity</code> 生命周期的入口，通常在这里进行 UI 初始化。</li><li><strong>Hook 该方法可以拦截 UI 初始化过程，并修改 <code>View</code> 的属性</strong>。</li></ul></li></ul><hr><h3 id="2-获取-View"><a href="#2-获取-View" class="headerlink" title="(2) 获取 View"></a><strong>(2) 获取 <code>View</code></strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">View</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> (View) XposedHelpers.callMethod(param.thisObject,<br>&nbsp; &nbsp; <span class="hljs-string">"findViewById"</span>, <span class="hljs-number">0x7f0800de</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-14"><a href="#🔹-作用-14" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p><strong>通过 <code>findViewById()</code> 获取 ID 为 <code>0x7f0800de</code> 的 <code>View</code> 对象</strong>。</p></li><li><p><code>param.thisObject</code> 代表 <code>ChallengeSixth</code> 实例，相当于：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">View</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> ((Activity) param.thisObject).findViewById(<span class="hljs-number">0x7f0800de</span>);<br></code></pre></td></tr></tbody></table></figure></li><li><p><code>0x7f0800de</code> 是一个 <code>View ID</code>，可以通过 <code>R.id.xxx</code> 解析：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">viewId</span> <span class="hljs-operator">=</span> R.id.targetView;  <span class="hljs-comment">// 例如：R.id.imageView</span><br></code></pre></td></tr></tbody></table></figure><p>  在 Xposed Hook 代码中通常只能使用 <code>ID 值</code>（<code>0x7fxxxxxx</code>），而不能用 <code>R.id.xxx</code>。</p></li></ul><hr><h3 id="3-隐藏-View"><a href="#3-隐藏-View" class="headerlink" title="(3) 隐藏 View"></a><strong>(3) 隐藏 <code>View</code></strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">img.setVisibility(View.GONE);<br></code></pre></td></tr></tbody></table></figure><h3 id="🔹-作用-15"><a href="#🔹-作用-15" class="headerlink" title="🔹 作用"></a><strong>🔹 作用</strong></h3><ul><li><p>将目标 <code>View</code> <strong>设置为 <code>GONE</code>（完全隐藏，不占空间）</strong>。</p></li><li><p><code>View</code> 的可见性状态：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">View.VISIBLE   <span class="hljs-comment">// 可见</span><br>View.INVISIBLE <span class="hljs-comment">// 隐藏但仍占空间</span><br>View.GONE      <span class="hljs-comment">// 完全隐藏，不占空间</span><br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>等效 Java 代码：</strong></p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ImageView</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> findViewById(R.id.targetView);<br>img.setVisibility(View.GONE);<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul><h2 id="Xposed模块patch"><a href="#Xposed模块patch" class="headerlink" title="Xposed模块patch"></a><strong>Xposed模块patch</strong></h2><p><a href="https://github.com/LSPosed/LSPatch">LSPatch</a></p><p>PS:最低支持安卓9</p><ul><li><p>将项目编译为apk过程示例</p><ol><li>点击build选择apk</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262110526.png"></p><ol><li>先新建一个签名信息文件，生成一个.jks文件</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262110007.png"></p><ol><li>配置后让应用可以发布选择release建立</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262111278.png"></p><ol><li>建立好后我们发现目录中可以查看到release文件和生成的apk</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262111409.png"></p><ol><li>我们在路径下找到我们新生成的apk</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262111522.png"></p><ol><li>在LSPatch中选择我们教程Demo进行修补</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262111688.png"></p><ol><li>我们使用便携模式嵌入模块（在没有root的手机中也可以使用）</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262111531.png"></p><ol><li>修补后因为暂时缺少模块我们手动安装一下该模块</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262111017.png"></p><ol><li>我们发现图标消失，说明它在运行时已经加载了相关模块</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262111492.png"></p></li></ul><h3 id="Xposed快速Hook"><a href="#Xposed快速Hook" class="headerlink" title="Xposed快速Hook"></a><strong>Xposed快速Hook</strong></h3><p><a href="https://github.com/littleWhiteDuck/SimpleHook">SimpleHook</a></p><ul><li><p>使用方法示例</p><ol><li>安装好<a href="https://github.com/littleWhiteDuck/SimpleHook%E5%AF%B9%E6%83%B3%E8%A6%81%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%E7%9A%84%E7%9B%AE%E6%A0%87%E8%BF%9B%E8%A1%8C%E5%8B%BE%E9%80%89%E8%AE%BE%E7%BD%AE">https://github.com/littleWhiteDuck/SimpleHook对想要进行操作的目标进行勾选设置</a></li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262112026.png"></p><ol><li>在设置中将smail转化为配置打开，然后回到首页进行添加配置。在MT管理器中找到方法签名进行复制。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262112037.png"></p><ol><li>smail自动填充之后，我们进行参返实践。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262112296.png"></p><ol><li>保存同意root权限后，将配置打开，我们打开apk后可以在记录处得到参返。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262112559.png"></p><ol><li>同理我们还可以进行Hook参数值并进行修改等操作。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262113404.png">  </p></li><li><p>Hook变量示例</p><ol><li>Hook实例变量，同上先复制签名进行相关配置</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503262113351.png"></p><ol><li>可以发现没有修改前是300</li></ol></li></ul><p><a href="https://github.com/Xposed-Modules-Repo/me.jsonet.jshook">jshook</a></p><h3 id="Xpsoed源码"><a href="#Xpsoed源码" class="headerlink" title="Xpsoed源码"></a><strong>Xpsoed源码</strong></h3><p><a href="https://www.52pojie.cn/thread-1149210-1-1.html">XPOSED魔改一：获取特征</a></p><p><a href="https://www.52pojie.cn/thread-1694093-1-1.html">Lsposed 技术原理探讨 &amp;&amp; 基本安装使用</a></p><p><a href="https://bbs.kanxue.com/thread-269616.htm#msg_header_h2_0">[原创]源码编译（2）——Xopsed源码编译详解</a></p>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xposd</tag>
      
      <tag>API</tag>
      
      <tag>Frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>签名校验</title>
    <link href="/2025/03/23/ZJ6/%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%201b2a6f4b4daf80b3891ddef3c55cac14/"/>
    <url>/2025/03/23/ZJ6/%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%201b2a6f4b4daf80b3891ddef3c55cac14/</url>
    
    <content type="html"><![CDATA[<h1 id="签名校验"><a href="#签名校验" class="headerlink" title="签名校验"></a>签名校验</h1><p><a href="https://www.52pojie.cn/home.php?mod=space&amp;uid=874154&amp;do=thread&amp;view=me&amp;from=space">芽衣的帖子 - 吾爱破解 - 52pojie.cn</a></p><h2 id="1-什么是校验"><a href="#1-什么是校验" class="headerlink" title="1.什么是校验"></a><strong>1.什么是校验</strong></h2><p>在安卓逆向中，<strong>校验</strong>通常指开发者通过代码逻辑对应用的关键信息（如签名、文件完整性、运行环境等）进行验证，确保应用未被篡改或破解。</p><ul><li>常见的校验有<ol><li><p><strong>签名校验（Signature Check）</strong></p><ul><li><p><strong>目的</strong>：验证APK的签名是否与开发者预期一致，防止应用被重新打包或篡改。</p></li><li><p><strong>实现方式</strong>：</p><ul><li>代码中通过<code>PackageManager</code>获取签名信息，与预设的签名哈希值对比。</li><li>若签名不匹配，触发退出或限制功能（如付费验证失效）。</li></ul></li><li><p><strong>示例代码</strong>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前APK的签名信息</span><br>Signature[] signatures = getPackageManager().getPackageInfo(getPackageName(), PackageManager.GET_SIGNATURES).signatures;<br><span class="hljs-type">String</span> <span class="hljs-variable">currentSignature</span> <span class="hljs-operator">=</span> signatures[<span class="hljs-number">0</span>].toCharsString();<br><span class="hljs-comment">// 对比预设的合法签名</span><br><span class="hljs-keyword">if</span> (!currentSignature.equals(<span class="hljs-string">"预设的签名哈希值"</span>)) {<br>    exit();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong>文件完整性校验</strong></p><ul><li><strong>目的</strong>：验证APK或资源文件（如DEX、SO库）是否被修改。</li><li><strong>实现方式</strong>：<ul><li>计算文件的哈希值（如MD5、SHA-1）并与预设值对比。</li><li>检测关键文件的大小或修改时间是否异常。</li></ul></li></ul></li><li><p><strong>环境校验</strong></p><ul><li><strong>目的</strong>：检测是否运行在模拟器、Root环境或调试模式。</li><li><strong>实现方式</strong>：<ul><li>检查系统属性（如<code>ro.build.tags</code>是否包含<code>test-keys</code>）。</li><li>检测<code>su</code>文件是否存在（Root环境）。</li><li>使用<code>android.os.Debug.isDebuggerConnected()</code>检测调试状态。</li></ul></li></ul></li><li><p><strong>逻辑校验</strong></p><ul><li><strong>目的</strong>：验证关键业务逻辑是否被篡改（如付费验证、加密算法）。</li><li><strong>实现方式</strong>：<ul><li>校验关键函数的返回值是否符合预期。</li><li>使用代码混淆或Native代码（C/C++）隐藏校验逻辑。</li></ul></li></ul></li><li><p><strong>JNI/Native 层校验</strong></p></li></ol><ul><li>许多应用会在 C/C++ 层进行完整性检查，检测 <code>lib.so</code> 是否被修改，或者检查 Java 方法的行为是否被 Hook。</li><li>例如，某些反调试技术会在 <code>lib.so</code> 中实现 <code>ptrace</code> 检测或 <code>frida</code> 检测。</li></ul></li></ul><p>签名校验(最常见)、dexcrc校验、apk完整性校验、路径文件校验等</p><h2 id="2-什么是APK签名"><a href="#2-什么是APK签名" class="headerlink" title="2.什么是APK签名"></a><strong>2.什么是APK签名</strong></h2><p>APK签名是Android系统的安全机制，用于验证应用来源和完整性。</p><p>通过对 Apk 进行签名，开发者可以证明对 Apk 的所有权和控制权，可用于安装和更新其应用。而在 Android 设备上的安装 Apk ，如果是一个没有被签名的 Apk，则会被拒绝安装。在安装 Apk 的时候，软件包管理器也会验证 Apk 是否已经被正确签名，并且通过签名证书和数据摘要验证是否合法没有被篡改。只有确认安全无篡改的情况下，才允许安装在设备上。</p><p>简单来说，APK 的签名主要作用有两个： </p><ol><li>证明 APK 的所有者。</li><li>允许 Android 市场和设备校验 APK 的正确性。</li></ol><h3 id="（1）签名机制"><a href="#（1）签名机制" class="headerlink" title="（1）签名机制"></a><strong>（1）签名机制</strong></h3><p>每个安卓应用在打包时都会使用开发者的私钥进行签名，签名信息存储在 <code>META-INF</code> 目录下，主要包括：</p><ul><li><code>CERT.RSA</code>（公钥证书）</li><li><code>CERT.SF</code>（摘要信息）</li><li><code>MANIFEST.MF</code>（文件哈希值）</li></ul><p>当用户安装 APK 时，Android 系统会：</p><ol><li>使用 <code>CERT.RSA</code> 内的公钥验证 <code>CERT.SF</code> 的真实性。</li><li>通过 <code>CERT.SF</code> 的哈希值检查 <code>MANIFEST.MF</code>，确认文件未被修改。</li><li>通过 <code>MANIFEST.MF</code> 中记录的哈希值，校验 APK 内所有文件是否被篡改。</li></ol><p>如果签名校验失败，APK 将无法安装。</p><h3 id="（2）-Android-目前支持以下四种应用签名方案："><a href="#（2）-Android-目前支持以下四种应用签名方案：" class="headerlink" title="**（2）**Android 目前支持以下四种应用签名方案："></a>**（2）**Android 目前支持以下四种应用签名方案：</h3><ul><li><p><strong>V1 签名（JAR 签名，Android 1.6+）</strong></p><ul><li><p>只校验 <code>META-INF</code> 目录下的签名文件，对 <code>APK</code> 本身的完整性保护较弱，可通过 Zip 方式修改 <code>APK</code> 而不影响签名。</p></li><li><p>V1 签名的机制主要就在 META-INF 目录下的三个文件，MANIFEST.MF，ANDROID.SF，ANDROID.RSA，他们都是 V1 签名的产物。</p><p>  （1）MANIFEST.MF：这是摘要文件。程序遍历Apk包中的所有文件(entry)，对非文件夹非签名文件的文件，逐个用SHA1(安全哈希算法)生成摘要信息，再用Base64进行编码。如果你改变了apk包中的文件，那么在apk安装校验时，改变后的文件摘要信息与MANIFEST.MF的检验信息不同，于是程序就不能成功安装。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232134148.png"></p><p>  （2）ANDROID.SF：这是对摘要的签名文件。对前一步生成的MANIFEST.MF，使用SHA1-RSA算法，用开发者的私钥进行签名。在安装时只能使用公钥才能解密它。解密之后，将它与未加密的摘要信息（即，MANIFEST.MF文件）进行对比，如果相符，则表明内容没有被异常修改。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232134186.png"></p><p>  （3）ANDROID.RSA文件中保存了公钥、所采用的加密算法等信息。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232135216.png"></p></li></ul></li><li><p><strong>V2 签名（APK Signature Scheme v2，Android 7.0+）</strong></p><ul><li>直接对整个 APK 文件进行签名，提高了安全性，防止对 APK 进行 Zip 修改后仍能通过签名校验。</li><li>在某些情况下，直接对apk进行v1签名可以绕过apk的签名校验</li></ul><p>  v2方案会将 APK 文件视为 blob，并对整个文件进行签名检查。对 APK 进行的任何修改（包括对 ZIP 元数据进行的修改）都会使 APK 签名作废。这种形式的 APK 验证不仅速度要快得多，而且能够发现更多种未经授权的修改。  </p></li><li><p><strong>V3 签名（APK Signature Scheme v3，Android 9.0+）</strong></p><ul><li>增加了对 Key Rotation（密钥轮换）的支持，允许开发者更换私钥后仍能保持应用更新。</li></ul></li><li><p><strong>V4 签名（APK Signature Scheme v4，Android 11+）</strong></p><ul><li>用于加速 APK 安装，但不会影响完整性校验。</li></ul></li></ul><h2 id="3-什么是签名校验"><a href="#3-什么是签名校验" class="headerlink" title="3.什么是签名校验"></a><strong>3.什么是签名校验</strong></h2><ul><li><p>基本概念</p><h3 id="1-什么是签名校验？"><a href="#1-什么是签名校验？" class="headerlink" title="1. 什么是签名校验？"></a><strong>1. 什么是签名校验？</strong></h3><p>  签名校验是 Android 应用常见的安全机制，<strong>用于检测应用是否被篡改或重新签名</strong>。它的主要目的是防止二次打包和恶意篡改。</p><p>  当开发者编译和打包 APK 时，APK 会使用开发者的私钥进行签名。Android 系统在安装应用时会验证签名，如果 APK 被篡改，签名就会失效，导致无法安装。</p><p>  但在 <strong>逆向分析</strong> 中，攻击者可以修改 APK 并重新签名，因此应用通常会在运行时 <strong>自检签名</strong>，如果签名不匹配，应用可能会终止运行或执行反调试逻辑。</p><hr><h3 id="2-签名校验的工作原理"><a href="#2-签名校验的工作原理" class="headerlink" title="2. 签名校验的工作原理"></a><strong>2. 签名校验的工作原理</strong></h3><p>  签名校验通常分为 <strong>系统级校验</strong> 和 <strong>应用自校验</strong>：</p><h3 id="（1）系统级签名校验"><a href="#（1）系统级签名校验" class="headerlink" title="（1）系统级签名校验"></a><strong>（1）系统级签名校验</strong></h3><ul><li><strong>作用</strong>：当用户安装 APK 时，Android 系统会自动检查 APK 的签名。</li><li><strong>流程</strong>：<ol><li>提取 APK 的 <code>CERT.RSA</code> 证书。</li><li>使用该证书的公钥验证 <code>CERT.SF</code> 和 <code>MANIFEST.MF</code> 文件，确保 APK 未被篡改。</li><li>如果 APK 签名无效（如篡改了 <code>classes.dex</code> 或 <code>AndroidManifest.xml</code>），则安装失败。</li></ol></li><li><strong>特点</strong>：<ul><li>由 Android 系统执行，不可绕过。</li><li>只有相同签名的应用才能相互更新（应用升级必须使用相同的开发者签名）。</li></ul></li></ul><h3 id="（2）应用自校验（运行时签名校验）"><a href="#（2）应用自校验（运行时签名校验）" class="headerlink" title="（2）应用自校验（运行时签名校验）"></a><strong>（2）应用自校验（运行时签名校验）</strong></h3><ul><li><strong>作用</strong>：在应用运行时检查自身签名，防止被二次打包或篡改后运行。</li><li><strong>实现方式</strong>：<ul><li>获取应用的签名信息，并与预存的合法签名进行比对。</li><li>如果签名不匹配，则终止应用运行或执行反调试逻辑。</li></ul></li></ul><hr><h3 id="3-签名校验的实现方式"><a href="#3-签名校验的实现方式" class="headerlink" title="3. 签名校验的实现方式"></a><strong>3. 签名校验的实现方式</strong></h3><p>  在 Android 代码中，签名校验通常通过以下方式实现：</p><h3 id="（1）获取签名（兼容-Android-7-0-）"><a href="#（1）获取签名（兼容-Android-7-0-）" class="headerlink" title="（1）获取签名（兼容 Android 7.0+）"></a><strong>（1）获取签名（兼容 Android 7.0+）</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br><span class="hljs-keyword">import</span> android.content.pm.PackageInfo;<br><span class="hljs-keyword">import</span> android.content.pm.PackageManager;<br><span class="hljs-keyword">import</span> android.content.pm.Signature;<br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSignature</span><span class="hljs-params">(Context context)</span> {<br>    <span class="hljs-keyword">try</span> {<br>        <span class="hljs-type">PackageManager</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> context.getPackageManager();<br>        <span class="hljs-type">PackageInfo</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> pm.getPackageInfo(context.getPackageName(), PackageManager.GET_SIGNING_CERTIFICATES);<br>        Signature[] signatures = packageInfo.signingInfo.getApkContentsSigners();<br><br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">"SHA-256"</span>);<br>        md.update(signatures[<span class="hljs-number">0</span>].toByteArray());<br>        <span class="hljs-keyword">return</span> bytesToHex(md.digest()); <span class="hljs-comment">// 计算签名哈希值</span><br>    } <span class="hljs-keyword">catch</span> (Exception e) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    }<br>}<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> {<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">hexString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : bytes) {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> Integer.toHexString(<span class="hljs-number">0xff</span> &amp; b);<br>        <span class="hljs-keyword">if</span> (hex.length() == <span class="hljs-number">1</span>) {<br>            hexString.append(<span class="hljs-string">'0'</span>);<br>        }<br>        hexString.append(hex);<br>    }<br>    <span class="hljs-keyword">return</span> hexString.toString();<br>}<br><br></code></pre></td></tr></tbody></table></figure><ul><li>该代码计算应用的 SHA-256 签名哈希值，并与预存的值比对，防止篡改。</li></ul><h3 id="（2）比对签名"><a href="#（2）比对签名" class="headerlink" title="（2）比对签名"></a><strong>（2）比对签名</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br><span class="hljs-type">String</span> <span class="hljs-variable">expectedSignature</span> <span class="hljs-operator">=</span> <span class="hljs-string">"ABC123DEF456..."</span>; <span class="hljs-comment">// 预存的签名哈希</span><br><span class="hljs-type">String</span> <span class="hljs-variable">currentSignature</span> <span class="hljs-operator">=</span> getSignature(context);<br><span class="hljs-keyword">if</span> (!expectedSignature.equals(currentSignature)) {<br>    System.exit(<span class="hljs-number">0</span>); <span class="hljs-comment">// 签名不匹配，退出应用</span><br>}<br><br></code></pre></td></tr></tbody></table></figure><hr><h3 id="4-签名校验的常见绕过方法"><a href="#4-签名校验的常见绕过方法" class="headerlink" title="4. 签名校验的常见绕过方法"></a><strong>4. 签名校验的常见绕过方法</strong></h3><p>  在逆向工程中，攻击者通常会修改 APK 并重新签名，使其能够安装并运行。但如果应用进行了运行时签名校验，则需要使用以下方法绕过：</p><h3 id="（1）Hook-绕过"><a href="#（1）Hook-绕过" class="headerlink" title="（1）Hook 绕过"></a><strong>（1）Hook 绕过</strong></h3><p>  使用 Frida/Xposed Hook <code>getPackageInfo()</code> 方法，伪造签名返回值：</p>  <figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx">javascript<br>复制编辑<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">var</span> pm = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">"android.app.ApplicationPackageManager"</span>);<br>    pm.<span class="hljs-property">getPackageInfo</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">"java.lang.String"</span>, <span class="hljs-string">"int"</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">pkg, flags</span>) {<br>        <span class="hljs-keyword">var</span> info = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getPackageInfo</span>(pkg, flags);<br>        <span class="hljs-keyword">var</span> fakeSignature = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">"android.content.pm.Signature"</span>).$new(<span class="hljs-string">"ABC123DEF456..."</span>); <span class="hljs-comment">// 伪造签名</span><br>        info.<span class="hljs-property">signatures</span>.<span class="hljs-property">value</span> = [fakeSignature];<br>        <span class="hljs-keyword">return</span> info;<br>    };<br>});<br><br></code></pre></td></tr></tbody></table></figure><ul><li>该代码 Hook 了 <code>getPackageInfo()</code> 方法，使其始终返回合法的签名。</li></ul><h3 id="（2）修改-Smali-代码"><a href="#（2）修改-Smali-代码" class="headerlink" title="（2）修改 Smali 代码"></a><strong>（2）修改 Smali 代码</strong></h3><ol><li><p>反编译 APK：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>apktool d app.apk -o app_smali<br></code></pre></td></tr></tbody></table></figure></li><li><p>找到 <code>getSignature()</code> 方法，将签名比对逻辑改为 <code>return true</code>：</p> <figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">smali<br>复制编辑<span class="hljs-built_in"></span><br><span class="hljs-built_in">const-string </span>v0, <span class="hljs-string">"ABC123DEF456..."</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">return </span>v0<br><br>//使校验函数直接返回true或跳过校验步骤<br></code></pre></td></tr></tbody></table></figure></li><li><p>重新打包并签名：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>apktool b app_smali -o new_app.apk<br>zipalign -p 4 new_app.apk new_app_aligned.apk<br>apksigner sign --ks mykeystore.jks --out new_app_signed.apk new_app_aligned.apk<br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="（3）直接修改-APK-签名"><a href="#（3）直接修改-APK-签名" class="headerlink" title="（3）直接修改 APK 签名"></a><strong>（3）直接修改 APK 签名</strong></h3><ul><li><p>使用 <code>zipalign</code> 和 <code>apksigner</code> 重新签名 APK：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>zipalign -p 4 modded.apk modded_aligned.apk<br>apksigner sign --ks mykeystore.jks --out modded_signed.apk modded_aligned.apk<br></code></pre></td></tr></tbody></table></figure></li><li><p>但是如果应用内置了签名校验代码，仍然需要 Hook 相关方法绕过。</p></li></ul><hr><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h3><h3 id="如何增强签名校验？（开发者视角）"><a href="#如何增强签名校验？（开发者视角）" class="headerlink" title="如何增强签名校验？（开发者视角）"></a><strong>如何增强签名校验？</strong>（开发者视角）</h3><ol><li><strong>避免硬编码签名值</strong><ul><li>动态从服务器获取合法签名，或通过代码混淆分散存储。</li></ul></li><li><strong>Native层校验</strong><ul><li>将校验逻辑写入C/C++库（.so文件），并添加反调试、代码混淆等保护。</li></ul></li><li><strong>多维度校验</strong><ul><li>同时校验签名哈希、证书序列号、公钥等信息，而非单一哈希值。</li></ul></li><li><strong>环境检测</strong><ul><li>结合Root检测、模拟器检测，防止校验逻辑在调试环境中运行。</li></ul></li><li><strong>服务端协同</strong><ul><li>关键业务请求时，服务端二次校验客户端的签名信息。</li></ul></li></ol><table><thead><tr><th><strong>签名校验类型</strong></th><th><strong>作用</strong></th><th><strong>绕过方式</strong></th></tr></thead><tbody><tr><td><strong>系统级签名校验</strong></td><td>检查 APK 安装时的合法性</td><td>无法绕过，必须重新签名</td></tr><tr><td><strong>应用自校验</strong></td><td>运行时检测签名是否匹配</td><td>Hook <code>getPackageInfo()</code>、修改 Smali</td></tr></tbody></table><ul><li><strong>签名校验主要用于防止二次打包和破解，但可以通过 Hook 或修改 Smali 绕过。</strong></li><li><strong>更高级的保护手段可能会将签名校验与代码完整性校验、JNI 保护等结合，增加破解难度。</strong></li></ul></li></ul><p>如何判断是否有签名校验？</p><p>不做任何修改，直接签名安装，应用闪退则说明大概率有签名校验</p><p>一般来说，普通的签名校验会导致软件的闪退，黑屏，卡启动页等</p><p>当然，以上都算是比较好的，有一些比较狠的作者，则会直接rm -rf /，把基带都格掉的一键变砖。</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br>kill/killProcess<span class="hljs-comment">-----kill/KillProcess()可以杀死当前应用活动的进程，这一操作将会把所有该进程内的资源（包括线程全部清理掉）.当然，由于ActivityManager时刻监听着进程，一旦发现进程被非正常Kill，它将会试图去重启这个进程。这就是为什么，有时候当我们试图这样去结束掉应用时，发现它又自动重新启动的原因.</span><br><br>system.<span class="hljs-built_in">exit</span><span class="hljs-comment">-----杀死了整个进程，这时候活动所占的资源也会被释放。</span><br><br>finish<span class="hljs-comment">----------仅仅针对Activity，当调用finish()时，只是将活动推向后台，并没有立即释放内存，活动的资源并没有被清理</span><br></code></pre></td></tr></tbody></table></figure><p>在我个人见过最恶心的签名校验中，当属三角校验(低调大佬教的)最烦人。</p><p>所谓三角校验，就是so检测dex，动态加载的dex(在软件运行时会解压释放一段dex文件，检测完后就删除)检测so，dex检测动态加载的dex</p><ul><li><p>示例</p><ol><li>打开算法助手的拦截和防止退出</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232135856.png"></p><ol><li>我们可以在日志中查看到拦截信息</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136105.png"></p><ol><li>查找到闪退的方法</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136056.png"></p><ol><li>查询到闪退的代码将其注释掉，就可以解决闪退等问题。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136193.png"></p><ol><li>我们也可以通过算法助手的签名监听来进行定位</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136656.png"></p><ol><li>通过日志中的签名信息找到其相应的堆栈进行查询</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136332.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137296.png"></p><ol><li>对堆栈进行查询找到关键方法<code>checkSign</code>进行分析。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137737.png"></p><ol><li>通过获取安装包签名信息的值与<code>SIGNATURE</code>的值进行比对</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137906.png"></p><ol><li>我们可以将判断的逻辑if-nez改为if-eqz，直接把判断取反</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137976.png"></p><ol><li>直接对sign值进行查询</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137127.png"></p><ol><li>将包内的sign替换掉，就可以通过普通签名校验</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137039.png"></p></li></ul><p>普通获取签名校验代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">SignCheck</span><span class="hljs-params">()</span> {<br>&nbsp; &nbsp; <span class="hljs-type">String</span> <span class="hljs-variable">trueSignMD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">"d0add9987c7c84aeb7198c3ff26ca152"</span>;<br>&nbsp; &nbsp; <span class="hljs-type">String</span> <span class="hljs-variable">nowSignMD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">""</span>;<br>&nbsp; &nbsp; <span class="hljs-keyword">try</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">// 得到签名的MD5</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">PackageInfo</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> getPackageManager().getPackageInfo(getPackageName(),PackageManager.GET_SIGNATURES);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Signature[] signs = packageInfo.signatures;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">signBase64</span> <span class="hljs-operator">=</span> Base64Util.encodeToString(signs[<span class="hljs-number">0</span>].toByteArray());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;nowSignMD5 = MD5Utils.MD5(signBase64);<br>&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> trueSignMD5.equals(nowSignMD5);<br>}<br></code></pre></td></tr></tbody></table></figure><p>系统将应用的签名信息封装在 PackageInfo 中，调用 PackageManager 的 getPackageInfo(String packageName, int flags) 即可获取指定包名的签名信息。</p><h2 id="4-签名校验对抗"><a href="#4-签名校验对抗" class="headerlink" title="4.签名校验对抗"></a><strong>4.签名校验对抗</strong></h2><p>方法一:核心破解插件，不签名安装应用</p><p>方法二:一键过签名工具，例如MT、NP、ARMPro、CNFIX、Modex的去除签名校验功能</p><p>方法三:具体分析签名校验逻辑(手撕签名校验)</p><p>方法四:io重定向–VA&amp;SVC：ptrace+seccomp</p><p><a href="https://bbs.pediy.com/thread-273160.htm">SVC的TraceHook沙箱的实现&amp;无痕Hook实现思路</a></p><p>方法五:去作者家严刑拷打拿到.jks文件和密码</p><ul><li><p>jks文件了</p><p>  <strong><code>.jks</code> 文件</strong>是 <strong>Java KeyStore</strong> 文件，主要用于存储加密密钥、证书和私钥，通常用于 SSL/TLS 证书管理。Java 应用程序使用 <code>.jks</code> 文件来确保安全的通信。</p><h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a><strong>常见用途</strong></h3><ol><li><strong>SSL/TLS 证书管理</strong>（HTTPS 服务器、客户端身份验证）</li><li><strong>Java 应用安全</strong>（如 Spring Boot、Tomcat）</li><li><strong>Android 签名</strong>（用于 APK 签名）</li></ol><h3 id="常见命令（keytool-工具）"><a href="#常见命令（keytool-工具）" class="headerlink" title="常见命令（keytool 工具）"></a><strong>常见命令（keytool 工具）</strong></h3><p>  <code>keytool</code> 是 Java 自带的密钥管理工具，可用于创建和管理 <code>.jks</code> 文件。</p><h3 id="1-生成新的-JKS-文件"><a href="#1-生成新的-JKS-文件" class="headerlink" title="1. 生成新的 JKS 文件"></a><strong>1. 生成新的 JKS 文件</strong></h3>  <figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">keytool</span> -genkey -alias myalias -keyalg RSA -keystore mykeystore.jks -validity <span class="hljs-number">3650</span> -storepass mypassword<br><br></code></pre></td></tr></tbody></table></figure><ul><li><code>alias myalias</code>：指定别名</li><li><code>keyalg RSA</code>：密钥算法</li><li><code>keystore mykeystore.jks</code>：JKS 文件名</li><li><code>validity 3650</code>：证书有效期（天）</li><li><code>storepass mypassword</code>：密钥库密码</li></ul><h3 id="2-查看-JKS-文件内容"><a href="#2-查看-JKS-文件内容" class="headerlink" title="2. 查看 JKS 文件内容"></a><strong>2. 查看 JKS 文件内容</strong></h3>  <figure class="highlight lsl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lsl">keytool -<span class="hljs-type">list</span> -keystore mykeystore.jks -storepass mypassword<br><br></code></pre></td></tr></tbody></table></figure><h3 id="3-导入证书到-JKS"><a href="#3-导入证书到-JKS" class="headerlink" title="3. 导入证书到 JKS"></a><strong>3. 导入证书到 JKS</strong></h3>  <figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">keytool -import -trustcacerts -<span class="hljs-built_in">alias</span> mycert -<span class="hljs-built_in">file</span> mycert.crt -keystore mykeystore.jks<br><br></code></pre></td></tr></tbody></table></figure><h3 id="4-导出证书"><a href="#4-导出证书" class="headerlink" title="4. 导出证书"></a><strong>4. 导出证书</strong></h3>  <figure class="highlight delphi"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">keytool -<span class="hljs-keyword">export</span> -<span class="hljs-keyword">alias</span> myalias -<span class="hljs-keyword">file</span> mycert.crt -keystore mykeystore.jks<br><br></code></pre></td></tr></tbody></table></figure><h3 id="5-转换-JKS-到-PKCS12"><a href="#5-转换-JKS-到-PKCS12" class="headerlink" title="5. 转换 JKS 到 PKCS12"></a><strong>5. 转换 JKS 到 PKCS12</strong></h3>  <figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">keytool -importkeystore -srckeystore mykeystore<span class="hljs-selector-class">.jks</span> -destkeystore mykeystore<span class="hljs-selector-class">.p12</span> -deststoretype PKCS12<br><br></code></pre></td></tr></tbody></table></figure><h3 id="JKS-在-Android-中的应用"><a href="#JKS-在-Android-中的应用" class="headerlink" title="JKS 在 Android 中的应用"></a><strong>JKS 在 Android 中的应用</strong></h3><p>  Android 应用使用 JKS 文件（通常是 <code>.keystore</code> 格式）来签名 APK。例如：</p>  <figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">arsigner -verbose -keystore <span class="hljs-keyword">my</span>-release-key.jks <span class="hljs-keyword">my</span>-app.apk myalias<br><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="5-手动实现PM代-过-滤-理"><a href="#5-手动实现PM代-过-滤-理" class="headerlink" title="5.手动实现PM代{过}{滤}理"></a><strong>5.手动实现PM代{过}{滤}理</strong></h2><h3 id="1-什么是PMS"><a href="#1-什么是PMS" class="headerlink" title="1.什么是PMS"></a><strong>1.什么是PMS</strong></h3><p>思路源自：<a href="https://github.com/fourbrother/HookPmsSignature">Android中Hook 应用签名方法</a></p><p>PackageManagerService（简称PMS），是Android系统核心服务之一，处理包管理相关的工作，常见的比如安装、卸载应用等。</p><h3 id="2-实现方法以及原理解析"><a href="#2-实现方法以及原理解析" class="headerlink" title="2.实现方法以及原理解析"></a><strong>2.实现方法以及原理解析</strong></h3><p>HOOK PMS代码:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zj.hookpms;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.pm.PackageManager;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceManagerWraper</span> {<br><br>&nbsp; &nbsp; <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ZJ</span> <span class="hljs-operator">=</span> <span class="hljs-string">"ZJ595"</span>;<br><br>&nbsp; &nbsp; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPMS</span><span class="hljs-params">(Context context, String signed, String appPkgName, <span class="hljs-type">int</span> hashCode)</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">try</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 获取全局的ActivityThread对象</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Class&lt;?&gt; activityThreadClass = Class.forName(<span class="hljs-string">"android.app.ActivityThread"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Method</span> <span class="hljs-variable">currentActivityThreadMethod</span> <span class="hljs-operator">=</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;activityThreadClass.getDeclaredMethod(<span class="hljs-string">"currentActivityThread"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Object</span> <span class="hljs-variable">currentActivityThread</span> <span class="hljs-operator">=</span> currentActivityThreadMethod.invoke(<span class="hljs-literal">null</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 获取ActivityThread里面原始的sPackageManager</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Field</span> <span class="hljs-variable">sPackageManagerField</span> <span class="hljs-operator">=</span> activityThreadClass.getDeclaredField(<span class="hljs-string">"sPackageManager"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sPackageManagerField.setAccessible(<span class="hljs-literal">true</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Object</span> <span class="hljs-variable">sPackageManager</span> <span class="hljs-operator">=</span> sPackageManagerField.get(currentActivityThread);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 准备好代{过}{滤}理对象, 用来替换原始的对象</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Class&lt;?&gt; iPackageManagerInterface = Class.forName(<span class="hljs-string">"android.content.pm.IPackageManager"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;iPackageManagerInterface.getClassLoader(),<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]{iPackageManagerInterface},<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">new</span> <span class="hljs-title class_">PmsHookBinderInvocationHandler</span>(sPackageManager, signed, appPkgName, <span class="hljs-number">0</span>));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 1. 替换掉ActivityThread里面的 sPackageManager 字段</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sPackageManagerField.set(currentActivityThread, proxy);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 2. 替换 ApplicationPackageManager里面的 mPM对象</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">PackageManager</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> context.getPackageManager();<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Field</span> <span class="hljs-variable">mPmField</span> <span class="hljs-operator">=</span> pm.getClass().getDeclaredField(<span class="hljs-string">"mPM"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;mPmField.setAccessible(<span class="hljs-literal">true</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;mPmField.set(pm, proxy);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;} <span class="hljs-keyword">catch</span> (Exception e) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Log.d(ZJ, <span class="hljs-string">"hook pms error:"</span> + Log.getStackTraceString(e));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp; }<br><br>&nbsp; &nbsp; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPMS</span><span class="hljs-params">(Context context)</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">Sign</span> <span class="hljs-operator">=</span> <span class="hljs-string">"原包的签名信息"</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;hookPMS(context, Sign, <span class="hljs-string">"com.zj.hookpms"</span>, <span class="hljs-number">0</span>);<br>&nbsp; &nbsp; }<br>}<br></code></pre></td></tr></tbody></table></figure><p>ActivityThread的静态变量sPackageManager</p><p>ApplicationPackageManager对象里面的mPM变量</p><ul><li><p>获取原包签名信息</p><ol><li>使用MT管理器，点击签名信息并查看原始数据</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232138337.png"></p><ol><li>这一串内容均为其那名信息，将内容全选复制为base64并与原包签名信息进行替换</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232139337.png"></p><p>  3.替换信息后，调用代码</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232139942.png"></p></li></ul><p>该方法较为过时，简单了解一下即可。</p><h2 id="6-IO重定向"><a href="#6-IO重定向" class="headerlink" title="6.IO重定向"></a><strong>6.IO重定向</strong></h2><ul><li><p>什么是IO重定向</p><pre><code class="hljs">IO 重定向（Input/Output Redirection）是指在计算机系统中，将标准输入（stdin）、标准输出（stdout）或标准错误输出（stderr）重定向到不同的文件或设备，而不是默认的终端（屏幕和键盘）。这是 Unix/Linux 和 Windows 命令行中常见的操作，主要用于控制程序的输入和输出。在 **Android 逆向** 中，**IO 重定向**（Input/Output Redirection）主要用于劫持、修改或捕获应用程序的标准输入、标准输出（stdout）和标准错误（stderr）。它在分析、调试和 Hook 过程中非常重要。</code></pre><hr><h2 id="1-IO-重定向在-Android-逆向中的作用"><a href="#1-IO-重定向在-Android-逆向中的作用" class="headerlink" title="1. IO 重定向在 Android 逆向中的作用"></a><strong>1. IO 重定向在 Android 逆向中的作用</strong></h2><p>  在 Android 逆向过程中，我们通常希望获取应用程序的 <strong>调试日志</strong>、<strong>标准输出</strong>、<strong>标准错误</strong>，或者将输入重定向到目标进程。由于 Android 应用通常运行在 <strong>Linux 环境（基于 Android 内核）</strong> 下，它也遵循 Linux 的 IO 机制，因此可以使用 <strong>重定向技术</strong> 进行信息捕获或干预。</p><hr><h2 id="2-IO-重定向的常见用途"><a href="#2-IO-重定向的常见用途" class="headerlink" title="2. IO 重定向的常见用途"></a><strong>2. IO 重定向的常见用途</strong></h2><h3 id="（1）捕获应用标准输出"><a href="#（1）捕获应用标准输出" class="headerlink" title="（1）捕获应用标准输出"></a><strong>（1）捕获应用标准输出</strong></h3><p>  有些 Android 应用会在 <code>stdout</code> 或 <code>stderr</code> 中打印调试信息，例如：</p>  <figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">c<br>复制编辑<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Secret Key: %s\n"</span>, secretKey);<br><br></code></pre></td></tr></tbody></table></figure><p>  但这些信息不会直接显示在 Logcat 中，而是需要重定向输出才能捕获。</p><h3 id="方法1：使用-strace-或-logcat"><a href="#方法1：使用-strace-或-logcat" class="headerlink" title="方法1：使用 strace 或 logcat"></a><strong>方法1：使用 strace 或 logcat</strong></h3><ul><li><p><strong>使用 <code>strace</code> 监视 IO 调用</strong></p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>strace -p &lt;PID&gt; -e write<br><br></code></pre></td></tr></tbody></table></figure><p>  这可以监视 <code>write</code> 系统调用，捕获应用写入 <code>stdout</code> 和 <code>stderr</code> 的数据。</p></li><li><p><strong>使用 <code>logcat</code> 捕获日志</strong></p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>logcat -s <span class="hljs-string">"AppTag"</span><br><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="方法2：使用-run-as-重定向"><a href="#方法2：使用-run-as-重定向" class="headerlink" title="方法2：使用 run-as 重定向"></a><strong>方法2：使用 <code>run-as</code> 重定向</strong></h3><p>  如果目标应用是 <code>debuggable</code>，可以使用 <code>run-as</code> 切换到应用的 UID 并重定向 IO：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>run-as com.example.app sh -c <span class="hljs-string">'exec &gt; /data/data/com.example.app/output.log 2&gt;&amp;1'</span><br><br></code></pre></td></tr></tbody></table></figure><p>  这会将应用的 <code>stdout</code> 和 <code>stderr</code> 重定向到 <code>output.log</code>，然后可以用 <code>adb pull</code> 拉取日志：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>adb pull /data/data/com.example.app/output.log .<br><br></code></pre></td></tr></tbody></table></figure><hr><h3 id="（2）Hook-IO-函数"><a href="#（2）Hook-IO-函数" class="headerlink" title="（2）Hook IO 函数"></a><strong>（2）Hook IO 函数</strong></h3><p>  <strong>重定向 <code>open</code>、<code>read</code>、<code>write</code> 等系统调用</strong>，可以在动态调试中捕获关键数据，例如应用读写的文件、网络数据等。</p><h3 id="方法1：使用-Frida-Hook-IO"><a href="#方法1：使用-Frida-Hook-IO" class="headerlink" title="方法1：使用 Frida Hook IO"></a><strong>方法1：使用 Frida Hook IO</strong></h3>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">python<br>复制编辑<br><span class="hljs-keyword">import</span> frida<br><br>script_code = <span class="hljs-string">"""</span><br><span class="hljs-string">Interceptor.attach(Module.findExportByName(null, 'write'), {</span><br><span class="hljs-string">    onEnter: function(args) {</span><br><span class="hljs-string">        send("Writing data: " + Memory.readUtf8String(args[1]));</span><br><span class="hljs-string">    }</span><br><span class="hljs-string">});</span><br><span class="hljs-string">"""</span><br>device = frida.get_usb_device()<br>session = device.attach(<span class="hljs-string">"com.target.app"</span>)<br>script = session.create_script(script_code)<br>script.on(<span class="hljs-string">"message"</span>, <span class="hljs-keyword">lambda</span> msg, data: <span class="hljs-built_in">print</span>(msg))<br>script.load()<br><br></code></pre></td></tr></tbody></table></figure><p>  <strong>作用：</strong></p><ul><li>Hook <code>write()</code> 系统调用，劫持目标进程的输出内容（如日志、密钥等）。</li><li>适用于需要 <strong>监视应用输出数据</strong> 的场景。</li></ul><hr><h3 id="（3）修改应用输入"><a href="#（3）修改应用输入" class="headerlink" title="（3）修改应用输入"></a><strong>（3）修改应用输入</strong></h3><p>  在 Android 逆向中，某些应用会通过 <code>stdin</code> 读取数据，比如命令行工具或者 Shell 脚本。可以通过 <strong>输入重定向</strong> 伪造数据输入，例如：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"fake_password"</span> | ./target_binary<br><br></code></pre></td></tr></tbody></table></figure><p>  或者 Hook <code>read()</code> 函数，修改 <code>stdin</code> 输入：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">python<br>复制编辑<br>Interceptor.attach(Module.findExportByName(null, <span class="hljs-string">'read'</span>), {<br>    onEnter: function(args) {<br>        args[<span class="hljs-number">1</span>].writeUtf8String(<span class="hljs-string">"hacked_input"</span>);<br>    }<br>});<br><br></code></pre></td></tr></tbody></table></figure><hr><h3 id="（4）劫持-Java-层-IO"><a href="#（4）劫持-Java-层-IO" class="headerlink" title="（4）劫持 Java 层 IO"></a><strong>（4）劫持 Java 层 IO</strong></h3><p>  在 Java 层，<code>System.out.print()</code> 默认会输出到 <code>stdout</code>，可以通过 Hook <code>System.out</code> 来修改或捕获：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br>System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStream</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span> {<br>        <span class="hljs-comment">// 劫持 IO，改写输出</span><br>    }<br>}));<br><br></code></pre></td></tr></tbody></table></figure><p>  这在 Hook Java 方法时可以用于修改应用日志或隐藏关键输出。</p><hr><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a><strong>3. 总结</strong></h2><table><thead><tr><th><strong>用途</strong></th><th><strong>技术</strong></th></tr></thead><tbody><tr><td><strong>捕获 <code>stdout</code>、<code>stderr</code></strong></td><td><code>strace</code>、<code>logcat</code>、<code>run-as</code></td></tr><tr><td><strong>Hook IO 函数</strong></td><td><code>Frida</code>、<code>Xposed</code>、<code>LD_PRELOAD</code></td></tr><tr><td><strong>修改输入</strong></td><td><code>stdin</code> 重定向、Hook <code>read()</code></td></tr><tr><td><strong>Java 层 IO 劫持</strong></td><td><code>System.setOut()</code></td></tr></tbody></table><p>  <strong>IO 重定向在 Android 逆向中的核心作用：</strong></p><ol><li><strong>获取应用未公开的调试信息</strong></li><li><strong>监视或篡改应用输入</strong></li><li><strong>分析目标应用的日志、密钥或敏感数据</strong></li><li><strong>结合 Frida/Xposed 进行 Hook，提高调试能力</strong></li></ol></li></ul><p>例：在读A文件的时候指向B文件</p><p><a href="https://github.com/virjarRatel/ratel-core">平头哥的核心代码</a></p><p><a href="https://github.com/asLody/VirtualApp">Virtual Engine for Android(Support 12.0 in business version)</a></p><p>IO重定向可以干嘛？</p><p>1，可以让文件只读，不可写</p><p>2，禁止访问文件</p><p>3，路径替换</p><p>具体实现：</p><p>过签名检测(读取原包)</p><p>风控对抗(例:一个文件记录App启动的次数)</p><p>过Root检测，Xposed检测(文件不可取)</p><ul><li><p>新的API签名校验与普通签名校验Ture方法一致</p><ol><li>分析API的签名校验算法，发现它newsign定位好签名之后，将新的API与原来的进行比对，仍可以采用普通校验的方式将新的API替换，ture处理掉。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232139287.png">  </p></li><li><p>CRC校验</p><ol><li>观察校验部分的代码发现，解压后获取dex文件，获取它的crc的一个值。而我们每做一次修改，dex文件中的值都会发生对应的改变，而它的值需要与j进行一个对比，我们顺着思路查看j在哪里.</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140551.png"></p><ol><li>Ctrl+F顺着j进行查找，发现是通过一个方法传入一个值</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140993.png"></p><ol><li>我们顺着观察发现string类里面有crc的值</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140610.png"></p><ol><li>跳转查看发现每一次修改都会使数值发生转变，不可能每一次都对数值进行修改，写死会导致校验失败。需要运用io重定向</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140613.png"></p><ol><li>代码已经写在so文件中，现在缺少一个调用。使用smail代码。它是获取上下文的文本，然后传入到hook方法中，hook方法是一个native方法。</li><li>首先打开编辑器搜索到checkSign方法后，打开导航找到crc，查看他的调用。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140229.png"></p><ol><li>因为要进行重定向，要在校验之前完成这部分工作才可以读到原包。在方法开头将我们的调用代码放入进去。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140491.png"></p><ol><li>在软件数据目录下（数据目录1）新建一个files文件，将没有经过修改的原包复制在该文件中，重命名为base.apk，这样才可以实现一个io的重定向读取原包的信息。（具体原因在代码部分解释）</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232141891.png"></p><ol><li>以上就是一个简单的io重定向的实现（crc读取dex的一个crc值，而hash读取整个APK一个hash的一个值）</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232141186.png"></p></li></ul><p>io重定向原码，相当于hook的open，openat等几个函数（用于读取底层文件函数）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs java">using namespace std;<br>string packname;<br>string origpath;<br>string fakepath;<br><br><span class="hljs-type">int</span> (*orig_open)(const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);<br><span class="hljs-type">int</span> (*orig_openat)(<span class="hljs-type">int</span>,const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);<br>FILE *(*orig_fopen)(const <span class="hljs-type">char</span> *filename, const <span class="hljs-type">char</span> *mode);<br><span class="hljs-keyword">static</span> <span class="hljs-title function_">long</span> <span class="hljs-params">(*orig_syscall)</span><span class="hljs-params">(<span class="hljs-type">long</span> number, ...)</span>;<br><span class="hljs-type">int</span> (*orig__NR_openat)(<span class="hljs-type">int</span>,const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);<br><br><span class="hljs-keyword">void</span>* (*orig_dlopen_CI)(const <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag);<br><span class="hljs-keyword">void</span>* (*orig_dlopen_CIV)(const <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag, const <span class="hljs-keyword">void</span> *extinfo);<br><span class="hljs-keyword">void</span>* (*orig_dlopen_CIVV)(const <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> flags, const <span class="hljs-keyword">void</span> *extinfo, <span class="hljs-keyword">void</span> *caller_addr);<br><br><span class="hljs-keyword">static</span> inline bool <span class="hljs-title function_">needs_mode</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> ((flags &amp; O_CREAT) == O_CREAT) || ((flags &amp; O_TMPFILE) == O_TMPFILE);<br>}<br>bool <span class="hljs-title function_">startsWith</span><span class="hljs-params">(string str, string sub)</span>{<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> str.find(sub)==<span class="hljs-number">0</span>;<br>}<br><br>bool <span class="hljs-title function_">endsWith</span><span class="hljs-params">(string s,string sub)</span>{<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> s.rfind(sub)==(s.length()-sub.length());<br>}<br>bool <span class="hljs-title function_">isOrigAPK</span><span class="hljs-params">(string&nbsp;&nbsp;path)</span>{<br><br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(path==origpath){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br><span class="hljs-comment">//该函数的功能是在打开一个文件时进行拦截，并在满足特定条件时将文件路径替换为另一个路径</span><br><br><span class="hljs-comment">//fake_open 函数有三个参数：</span><br><span class="hljs-comment">//pathname：一个字符串，表示要打开的文件的路径。</span><br><span class="hljs-comment">//flags：一个整数，表示打开文件的方式，例如只读、只写、读写等。</span><br><span class="hljs-comment">//mode（可选参数）：一个整数，表示打开文件时应用的权限模式。</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fake_open</span><span class="hljs-params">(const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">mode_t</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> (needs_mode(flags)) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_list args;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_start(args, flags);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;mode = static_cast&lt;mode_t&gt;(va_arg(args, <span class="hljs-type">int</span>));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_end(args);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-comment">//LOGI("open,&nbsp;&nbsp;path: %s, flags: %d, mode: %d",pathname, flags ,mode);</span><br>&nbsp; &nbsp; string cpp_path= pathname;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(isOrigAPK(cpp_path)){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;LOGI(<span class="hljs-string">"libc_open, redirect: %s, ---&gt;: %s"</span>,pathname, fakepath.data());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> orig_open(<span class="hljs-string">"/data/user/0/com.zj.wuaipojie/files/base.apk"</span>, flags, mode);<br>    }<span class="hljs-comment">//这里已经将我们io后的路径写死，也是我们实例中新建对应文件的原因。</span><br>    &nbsp; <span class="hljs-keyword">return</span>&nbsp;&nbsp;orig_open(pathname, flags, mode);<br><br>}<br><br><span class="hljs-comment">//该函数的功能是在打开一个文件时进行拦截，并在满足特定条件时将文件路径替换为另一个路径</span><br><br><span class="hljs-comment">//fake_openat 函数有四个参数：</span><br><span class="hljs-comment">//fd：一个整数，表示要打开的文件的文件描述符。</span><br><span class="hljs-comment">//pathname：一个字符串，表示要打开的文件的路径。</span><br><span class="hljs-comment">//flags：一个整数，表示打开文件的方式，例如只读、只写、读写等。</span><br><span class="hljs-comment">//mode（可选参数）：一个整数，表示打开文件时应用的权限模式。</span><br><span class="hljs-comment">//openat 函数的作用类似于 open 函数，但是它使用文件描述符来指定文件路径，而不是使用文件路径本身。这样，就可以在打开文件时使用相对路径，而不必提供完整的文件路径。</span><br><span class="hljs-comment">//例如，如果要打开相对于当前目录的文件，可以使用 openat 函数，而不是 open 函数，因为 open 函数只能使用绝对路径。</span><br><span class="hljs-comment">//</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fake_openat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">mode_t</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> (needs_mode(flags)) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_list args;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_start(args, flags);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;mode = static_cast&lt;mode_t&gt;(va_arg(args, <span class="hljs-type">int</span>));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_end(args);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; LOGI(<span class="hljs-string">"openat, fd: %d, path: %s, flags: %d, mode: %d"</span>,fd ,pathname, flags ,mode);<br>&nbsp; &nbsp; string cpp_path= pathname;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(isOrigAPK(cpp_path)){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;LOGI(<span class="hljs-string">"libc_openat, redirect: %s, ---&gt;: %s"</span>,pathname, fakepath.data());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span>&nbsp;&nbsp;orig_openat(fd,fakepath.data(), flags, mode);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> orig_openat(fd,pathname, flags, mode);<br><br>}<br>FILE *fake_fopen(const <span class="hljs-type">char</span> *filename, const <span class="hljs-type">char</span> *mode) {<br>&nbsp; &nbsp; string cpp_path= filename;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(isOrigAPK(cpp_path)){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span>&nbsp;&nbsp;orig_fopen(fakepath.data(), mode);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> orig_fopen(filename, mode);<br>}<br><span class="hljs-comment">//该函数的功能是在执行系统调用时进行拦截，并在满足特定条件时修改系统调用的参数。</span><br><span class="hljs-comment">//syscall 函数是一个系统调用，是程序访问内核功能的方法之一。使用 syscall 函数可以调用大量的系统调用，它们用于实现操作系统的各种功能，例如打开文件、创建进程、分配内存等。</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">fake_syscall</span><span class="hljs-params">(<span class="hljs-type">long</span> number, ...)</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">void</span> *arg[<span class="hljs-number">7</span>];<br>&nbsp; &nbsp; va_list list;<br><br>&nbsp; &nbsp; va_start(list, number);<br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;arg[i] = va_arg(list, <span class="hljs-keyword">void</span> *);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; va_end(list);<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> (number == __NR_openat){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;const <span class="hljs-type">char</span> *cpp_path = static_cast&lt;const <span class="hljs-type">char</span> *&gt;(arg[<span class="hljs-number">1</span>]);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;LOGI(<span class="hljs-string">"syscall __NR_openat, fd: %d, path: %s, flags: %d, mode: %d"</span>,arg[<span class="hljs-number">0</span>] ,arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">2</span>], arg[<span class="hljs-number">3</span>]);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">if</span> (isOrigAPK(cpp_path)){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LOGI(<span class="hljs-string">"syscall __NR_openat, redirect: %s, ---&gt;: %s"</span>,arg[<span class="hljs-number">1</span>], fakepath.data());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">return</span> orig_syscall(number,arg[<span class="hljs-number">0</span>], fakepath.data() ,arg[<span class="hljs-number">2</span>],arg[<span class="hljs-number">3</span>]);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> orig_syscall(number, arg[<span class="hljs-number">0</span>], arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">2</span>], arg[<span class="hljs-number">3</span>], arg[<span class="hljs-number">4</span>], arg[<span class="hljs-number">5</span>], arg[<span class="hljs-number">6</span>]);<br><br>}<br><br><span class="hljs-comment">//函数的功能是获取当前应用的包名、APK 文件路径以及库文件路径，并将这些信息保存在全局变量中</span><br><span class="hljs-comment">//函数调用 GetObjectClass 和 GetMethodID 函数来获取 context 对象的类型以及 getPackageName 方法的 ID。然后，函数调用 CallObjectMethod 函数来调用 getPackageName 方法，获取当前应用的包名。最后，函数使用 GetStringUTFChars 函数将包名转换为 C 字符串，并将包名保存在 packname 全局变量中</span><br><span class="hljs-comment">//接着，函数使用 fakepath 全局变量保存了 /data/user/0/&lt;packname&gt;/files/base.apk 这样的路径，其中 &lt;packname&gt; 是当前应用的包名。</span><br><span class="hljs-comment">//然后，函数再次调用 GetObjectClass 和 GetMethodID 函数来获取 context 对象的类型以及 getApplicationInfo 方法的 ID。然后，函数调用 CallObjectMethod 函数来调用 getApplicationInfo 方法，获取当前应用的 ApplicationInfo 对象。</span><br><span class="hljs-comment">//它先调用 GetObjectClass 函数获取 ApplicationInfo 对象的类型，然后调用 GetFieldID 函数获取 sourceDir 字段的 ID。接着，函数使用 GetObjectField 函数获取 sourceDir 字段的值，并使用 GetStringUTFChars 函数将其转换为 C 字符串。最后，函数将 C 字符串保存在 origpath 全局变量中，表示当前应用的 APK 文件路径。</span><br><span class="hljs-comment">//最后，函数使用 GetFieldID 和 GetObjectField 函数获取 nativeLibraryDir 字段的值，并使用 GetStringUTFChars 函数将其转换为 C 字符串。函数最后调用 LOGI 函数打印库文件路径，但是并没有将其保存在全局变量中。</span><br><br>extern <span class="hljs-string">"C"</span> JNIEXPORT <span class="hljs-keyword">void</span> JNICALL<br><span class="hljs-title function_">Java_com_zj_wuaipojie_util_SecurityUtil_hook</span><span class="hljs-params">(JNIEnv *env, jclass clazz, jobject context)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">jclass</span> <span class="hljs-variable">conext_class</span> <span class="hljs-operator">=</span> env-&gt;GetObjectClass(context);<br>&nbsp; &nbsp; <span class="hljs-type">jmethodID</span> <span class="hljs-variable">methodId_pack</span> <span class="hljs-operator">=</span> env-&gt;GetMethodID(conext_class, <span class="hljs-string">"getPackageName"</span>,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-string">"()Ljava/lang/String;"</span>);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">packname_js</span> <span class="hljs-operator">=</span> reinterpret_cast&lt;jstring&gt;(env-&gt;CallObjectMethod(context, methodId_pack));<br>&nbsp; &nbsp; const <span class="hljs-type">char</span> *pn = env-&gt;GetStringUTFChars(packname_js, <span class="hljs-number">0</span>);<br>&nbsp; &nbsp; packname = string(pn);<br><br>&nbsp; &nbsp; env-&gt;ReleaseStringUTFChars(packname_js, pn);<br>&nbsp; &nbsp; <span class="hljs-comment">//LOGI("packname: %s", packname.data());</span><br>&nbsp; &nbsp; fakepath= <span class="hljs-string">"/data/user/0/"</span>+ packname +<span class="hljs-string">"/files/base.apk"</span>;<br><br>&nbsp; &nbsp; <span class="hljs-type">jclass</span> <span class="hljs-variable">conext_class2</span> <span class="hljs-operator">=</span> env-&gt;GetObjectClass(context);<br>&nbsp; &nbsp; <span class="hljs-type">jmethodID</span> <span class="hljs-variable">methodId_pack2</span> <span class="hljs-operator">=</span> env-&gt;GetMethodID(conext_class2,<span class="hljs-string">"getApplicationInfo"</span>,<span class="hljs-string">"()Landroid/content/pm/ApplicationInfo;"</span>);<br>&nbsp; &nbsp; <span class="hljs-type">jobject</span> <span class="hljs-variable">application_info</span> <span class="hljs-operator">=</span> env-&gt;CallObjectMethod(context,methodId_pack2);<br>&nbsp; &nbsp; <span class="hljs-type">jclass</span> <span class="hljs-variable">pm_clazz</span> <span class="hljs-operator">=</span> env-&gt;GetObjectClass(application_info);<br><br>&nbsp; &nbsp; <span class="hljs-type">jfieldID</span> <span class="hljs-variable">package_info_id</span> <span class="hljs-operator">=</span> env-&gt;GetFieldID(pm_clazz,<span class="hljs-string">"sourceDir"</span>,<span class="hljs-string">"Ljava/lang/String;"</span>);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">sourceDir_js</span> <span class="hljs-operator">=</span> reinterpret_cast&lt;jstring&gt;(env-&gt;GetObjectField(application_info,package_info_id));<br>&nbsp; &nbsp; const <span class="hljs-type">char</span> *sourceDir = env-&gt;GetStringUTFChars(sourceDir_js, <span class="hljs-number">0</span>);<br>&nbsp; &nbsp; origpath = string(sourceDir);<br>&nbsp; &nbsp; LOGI(<span class="hljs-string">"sourceDir: %s"</span>, sourceDir);<br><br>&nbsp; &nbsp; <span class="hljs-type">jfieldID</span> <span class="hljs-variable">package_info_id2</span> <span class="hljs-operator">=</span> env-&gt;GetFieldID(pm_clazz,<span class="hljs-string">"nativeLibraryDir"</span>,<span class="hljs-string">"Ljava/lang/String;"</span>);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">nativeLibraryDir_js</span> <span class="hljs-operator">=</span> reinterpret_cast&lt;jstring&gt;(env-&gt;GetObjectField(application_info,package_info_id2));<br>&nbsp; &nbsp; const <span class="hljs-type">char</span> *nativeLibraryDir = env-&gt;GetStringUTFChars(nativeLibraryDir_js, <span class="hljs-number">0</span>);<br>&nbsp; &nbsp; LOGI(<span class="hljs-string">"nativeLibraryDir: %s"</span>, nativeLibraryDir);<br>&nbsp; &nbsp; <span class="hljs-comment">//LOGI("%s", "Start Hook");</span><br><br>&nbsp; &nbsp; <span class="hljs-comment">//启动hook</span><br>&nbsp; &nbsp; <span class="hljs-keyword">void</span> *handle = dlopen(<span class="hljs-string">"libc.so"</span>,RTLD_NOW);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">pagesize</span> <span class="hljs-operator">=</span> sysconf(_SC_PAGE_SIZE);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> ((uintptr_t)dlsym(handle,<span class="hljs-string">"open"</span>) &amp; (-pagesize));<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">addr2</span> <span class="hljs-operator">=</span> ((uintptr_t)dlsym(handle,<span class="hljs-string">"openat"</span>) &amp; (-pagesize));<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">addr3</span> <span class="hljs-operator">=</span> ((uintptr_t)fopen) &amp; (-pagesize);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">addr4</span> <span class="hljs-operator">=</span> ((uintptr_t)syscall) &amp; (-pagesize);<br><br>&nbsp; &nbsp; <span class="hljs-comment">//解除部分机型open被保护</span><br>&nbsp; &nbsp; mprotect((<span class="hljs-keyword">void</span>*)addr, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);<br>&nbsp; &nbsp; mprotect((<span class="hljs-keyword">void</span>*)addr2, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);<br>&nbsp; &nbsp; mprotect((<span class="hljs-keyword">void</span>*)addr3, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);<br>&nbsp; &nbsp; mprotect((<span class="hljs-keyword">void</span>*)addr4, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);<br><br>&nbsp; &nbsp; DobbyHook((<span class="hljs-keyword">void</span> *)dlsym(handle,<span class="hljs-string">"open"</span>), (<span class="hljs-keyword">void</span> *)fake_open, (<span class="hljs-keyword">void</span> **)&amp;orig_open);<br>&nbsp; &nbsp; DobbyHook((<span class="hljs-keyword">void</span> *)dlsym(handle,<span class="hljs-string">"openat"</span>), (<span class="hljs-keyword">void</span> *)fake_openat, (<span class="hljs-keyword">void</span> **)&amp;orig_openat);<br>&nbsp; &nbsp; DobbyHook((<span class="hljs-keyword">void</span> *)fopen, (<span class="hljs-keyword">void</span> *)fake_fopen, (<span class="hljs-keyword">void</span>**)&amp;orig_fopen);<br>&nbsp; &nbsp; DobbyHook((<span class="hljs-keyword">void</span> *)syscall, (<span class="hljs-keyword">void</span> *)fake_syscall, (<span class="hljs-keyword">void</span> **)&amp;orig_syscall);<br>}<br><br></code></pre></td></tr></tbody></table></figure><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali"> <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<span class="hljs-built_in">&nbsp;sget-object </span>p10, <span class="hljs-class">Lcom/zj/wuaipojie/util/ContextUtils;</span>-&gt;INSTANCE:<span class="hljs-class">Lcom/zj/wuaipojie/util/ContextUtils;</span><br><br>&nbsp; &nbsp;<span class="hljs-built_in"> invoke-virtual </span>{p10}, <span class="hljs-class">Lcom/zj/wuaipojie/util/ContextUtils;</span>-&gt;getContext()<span class="hljs-class">Landroid/content/Context;</span><br><br>&nbsp; &nbsp;<span class="hljs-built_in"> move-result-object </span>p10<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> invoke-static </span>{p10}, <span class="hljs-class">Lcom/zj/wuaipojie/util/SecurityUtil;</span>-&gt;hook(<span class="hljs-class">Landroid/content/Context;</span>)V<br></code></pre></td></tr></tbody></table></figure><h2 id="7-其他常见校验"><a href="#7-其他常见校验" class="headerlink" title="7.其他常见校验"></a><strong>7.其他常见校验</strong></h2><h3 id="root检测："><a href="#root检测：" class="headerlink" title="root检测："></a><strong>root检测：</strong></h3><p>反制手段</p><p>1.算法助手、对话框取消等插件一键hook</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232142228.png"></p><p>2.分析具体的检测代码</p><p>3.利用IO重定向使文件不可读</p><p>4.修改Andoird源码，去除常见指纹</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"> 复制代码 隐藏代码<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isDeviceRooted</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> checkRootMethod1() || checkRootMethod2() || checkRootMethod3()<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod1</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">val</span> buildTags = android.os.Build.TAGS<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> buildTags != <span class="hljs-literal">null</span> &amp;&amp; buildTags.contains(<span class="hljs-string">"test-keys"</span>)<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod2</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">val</span> paths = arrayOf(<span class="hljs-string">"/system/app/Superuser.apk"</span>, <span class="hljs-string">"/sbin/su"</span>, <span class="hljs-string">"/system/bin/su"</span>, <span class="hljs-string">"/system/xbin/su"</span>, <span class="hljs-string">"/data/local/xbin/su"</span>, <span class="hljs-string">"/data/local/bin/su"</span>, <span class="hljs-string">"/system/sd/xbin/su"</span>,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-string">"/system/bin/failsafe/su"</span>, <span class="hljs-string">"/data/local/su"</span>, <span class="hljs-string">"/su/bin/su"</span>)<br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> (path <span class="hljs-keyword">in</span> paths) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">if</span> (File(path).exists()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod3</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">var</span> process: Process? = <span class="hljs-literal">null</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;process = Runtime.getRuntime().exec(arrayOf(<span class="hljs-string">"/system/xbin/which"</span>, <span class="hljs-string">"su"</span>))<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">val</span> bufferedReader = BufferedReader(InputStreamReader(process.inputStream))<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;bufferedReader.readLine() != <span class="hljs-literal">null</span><br>&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (t: Throwable) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-literal">false</span><br>&nbsp; &nbsp; } <span class="hljs-keyword">finally</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;process?.destroy()<br>&nbsp; &nbsp; }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>定义了一个&nbsp;<code>isDeviceRooted()</code>&nbsp;函数，该函数调用了三个检测 root 的方法：<code>checkRootMethod1()</code>、<code>checkRootMethod2()</code>&nbsp;和&nbsp;<code>checkRootMethod3()</code>。</p><p><code>checkRootMethod1()</code>&nbsp;方法检查设备的&nbsp;<code>build tags</code>&nbsp;是否包含&nbsp;<code>test-keys</code>。这通常是用于测试的设备，因此如果检测到这个标记，则可以认为设备已被 root。</p><p><code>checkRootMethod2()</code>&nbsp;方法检查设备是否存在一些特定的文件，这些文件通常被用于执行 root 操作。如果检测到这些文件，则可以认为设备已被 root。</p><p><code>checkRootMethod3()</code>&nbsp;方法使用&nbsp;<code>Runtime.exec()</code>&nbsp;方法来执行&nbsp;<code>which su</code>&nbsp;命令，然后检查命令的输出是否不为空。如果输出不为空，则可以认为设备已被 root。</p><h3 id="模拟器检测"><a href="#模拟器检测" class="headerlink" title="模拟器检测"></a><strong>模拟器检测</strong></h3><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isEmulator</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> Build.FINGERPRINT.startsWith(<span class="hljs-string">"generic"</span>) || Build.FINGERPRINT.startsWith(<span class="hljs-string">"unknown"</span>) || Build.MODEL.contains(<span class="hljs-string">"google_sdk"</span>) Build.MODEL.contains(<span class="hljs-string">"Emulator"</span>) || Build.MODEL.contains(<span class="hljs-string">"Android SDK built for x86"</span>) || Build.MANUFACTURER.contains(<span class="hljs-string">"Genymotion"</span>) || Build.HOST.startsWith(<span class="hljs-string">"Build"</span>) || Build.PRODUCT == <span class="hljs-string">"google_sdk"</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br><br></code></pre></td></tr></tbody></table></figure><p>通过检测系统的&nbsp;<code>Build</code>&nbsp;对象来判断当前设备是否为模拟器。具体方法是检测&nbsp;<code>Build.FINGERPRINT</code>&nbsp;属性是否包含字符串&nbsp;<code>"generic"</code>。</p><p><a href="https://www.notion.so/04dbaf39091f42519b14decd2a87fde7?pvs=21">模拟器检测对抗</a></p><h3 id="反调试检测"><a href="#反调试检测" class="headerlink" title="反调试检测"></a><strong>反调试检测</strong></h3><p>安卓系统自带调试检测函数</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkForDebugger</span><span class="hljs-params">()</span></span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> (Debug.isDebuggerConnected()) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">// 如果调试器已连接，则终止应用程序</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;System.exit(<span class="hljs-number">0</span>)<br>&nbsp; &nbsp; }<br>}<br></code></pre></td></tr></tbody></table></figure><p>debuggable属性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getAppCanDebug</span><span class="hljs-params">(Context context)</span><span class="hljs-comment">//上下文对象为xxActivity.this</span><br>{<br>&nbsp; &nbsp; <span class="hljs-type">boolean</span> <span class="hljs-variable">isDebug</span> <span class="hljs-operator">=</span> context.getApplicationInfo() != <span class="hljs-literal">null</span> &amp;&amp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;(context.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="hljs-number">0</span>;<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> isDebug;<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>ptrace检测</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ptrace_protect</span><span class="hljs-params">()</span><span class="hljs-comment">//ptrace附加自身线程 会导致此进程TracerPid 变为父进程的TracerPid 即zygote</span></span><br><span class="hljs-function"></span>{<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-built_in">ptrace</span>(PTRACE_TRACEME,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);;<span class="hljs-comment">//返回-1即为已经被调试</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>每个进程同时刻只能被1个调试进程ptrace&nbsp;&nbsp;，主动ptrace本进程可以使得其他调试器无法调试</p><p>调试进程名检测</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SearchObjProcess</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>&nbsp; &nbsp; FILE* pfile=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp; <span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>]={<span class="hljs-number">0</span>};<br><br>&nbsp; &nbsp; pfile=<span class="hljs-built_in">popen</span>(<span class="hljs-string">"ps"</span>,<span class="hljs-string">"r"</span>);<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==pfile)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">//LOGA("SearchObjProcess popen打开命令失败!\n");</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-comment">// 获取结果</span><br>&nbsp; &nbsp; <span class="hljs-comment">//LOGA("popen方案:\n");</span><br>&nbsp; &nbsp; <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fgets</span>(buf,<span class="hljs-built_in">sizeof</span>(buf),pfile))<br>&nbsp; &nbsp; {<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">char</span>* strA=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">char</span>* strB=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">char</span>* strC=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">char</span>* strD=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;strA=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">"android_server"</span>);<span class="hljs-comment">//通过查找匹配子串判断</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;strB=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">"gdbserver"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;strC=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">"gdb"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;strD=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">"fuwu"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">if</span>(strA || strB ||strC || strD)<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;{<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 执行到这里，判定为调试状态</span><br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-built_in">pclose</span>(pfile);<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><a href="https://bbs.pediy.com/thread-268155.htm">[原创]对安卓反调试和校验检测的一些实践与结论</a></p><h3 id="frida检测"><a href="#frida检测" class="headerlink" title="frida检测"></a><strong>frida检测</strong></h3><p><a href="https://github.com/xxr0ss/AntiFrida">一些Frida检测手段</a></p><h2 id="8-smali语法小课堂之赋值"><a href="#8-smali语法小课堂之赋值" class="headerlink" title="8.smali语法小课堂之赋值"></a><strong>8.smali语法小课堂之赋值</strong></h2><h3 id="1-Int型赋值"><a href="#1-Int型赋值" class="headerlink" title="1.Int型赋值"></a><strong>1.Int型赋值</strong></h3><figure class="highlight smalltalk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><br>.method private static final onCreate<span class="hljs-string">$l</span>ambda<span class="hljs-number">-0</span>(<span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;<span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;<span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;<span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;<span class="hljs-type">Landroid</span>/view/<span class="hljs-type">View</span>;)<span class="hljs-type">V</span><br>&nbsp; &nbsp; .registers <span class="hljs-number">9</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">21</span><br>&nbsp; &nbsp; invoke-virtual {p0}, <span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;-&gt;isVip()<span class="hljs-type">I</span><br><br>&nbsp; &nbsp; move-result p4<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;//判断vip的值分别对应不用的会员的等级<br>&nbsp; &nbsp; if-eqz p4, :cond_35<br><br>&nbsp; &nbsp; const/<span class="hljs-number">4</span> v0, <span class="hljs-number">0x1</span><br><br>&nbsp; &nbsp; if-eq p4, v0, :cond_2d<br><br>&nbsp; &nbsp; const/<span class="hljs-number">4</span> v0, <span class="hljs-number">0x4</span><br><br>&nbsp; &nbsp; if-eq p4, v0, :cond_25<br><br>&nbsp; &nbsp; const/<span class="hljs-number">16</span> v0, <span class="hljs-number">0x10</span><br><br>&nbsp; &nbsp; if-eq p4, v0, :cond_1d<br><br>&nbsp; &nbsp; const/<span class="hljs-number">16</span> v0, <span class="hljs-number">0x63</span><br><br>&nbsp; &nbsp; if-eq p4, v0, :cond_15<br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_15<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"至尊会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">26</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_1d<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"超级会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">25</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_25<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"大会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">24</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_2d<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">23</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_35<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"非会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">22</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;.line <span class="hljs-number">28</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;//判断vipEndTime的时间戳是否小于系统时间<br>&nbsp; &nbsp; :goto_3c<br>&nbsp; &nbsp; new-instance p1, <span class="hljs-type">Ljava</span>/util/<span class="hljs-type">Date</span>;<br><br>&nbsp; &nbsp; invoke-direct {p1}, <span class="hljs-type">Ljava</span>/util/<span class="hljs-type">Date</span>;-&gt;&lt;init&gt;()<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; invoke-virtual {p1}, <span class="hljs-type">Ljava</span>/util/<span class="hljs-type">Date</span>;-&gt;getTime()<span class="hljs-type">J</span><br><br>&nbsp; &nbsp; move-result-wide v0<br><br>&nbsp; &nbsp; .line <span class="hljs-number">29</span><br>&nbsp; &nbsp; new-instance p1, <span class="hljs-type">Ljava</span>/text/<span class="hljs-type">SimpleDateFormat</span>;<br><br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"yyyy-MM-dd"</span><br><br>&nbsp; &nbsp; invoke-direct {p1, p4}, <span class="hljs-type">Ljava</span>/text/<span class="hljs-type">SimpleDateFormat</span>;-&gt;&lt;init&gt;(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">String</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">30</span><br>&nbsp; &nbsp; invoke-virtual {p0}, <span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;-&gt;vipEndTime()<span class="hljs-type">J</span><br><br>&nbsp; &nbsp; move-result-wide v2<br><br>&nbsp; &nbsp; cmp-long p4, v2, v0<br><br>&nbsp; &nbsp; if-gez p4, :cond_5c<br><br>&nbsp; &nbsp; const-string p1, <span class="hljs-comment">"已过期"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">31</span><br>&nbsp; &nbsp; check-cast p1, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p2, p1}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_6d<br><br>&nbsp; &nbsp; .line <span class="hljs-number">33</span><br>&nbsp; &nbsp; :cond_5c<br>&nbsp; &nbsp; invoke-virtual {p0}, <span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;-&gt;vipEndTime()<span class="hljs-type">J</span><br><br>&nbsp; &nbsp; move-result-wide v0<br><br>&nbsp; &nbsp; invoke-static {v0, v1}, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">Long</span>;-&gt;valueOf(<span class="hljs-type">J</span>)<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">Long</span>;<br><br>&nbsp; &nbsp; move-result-object p4<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Ljava</span>/text/<span class="hljs-type">SimpleDateFormat</span>;-&gt;format(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">Object</span>;)<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">String</span>;<br><br>&nbsp; &nbsp; move-result-object p1<br><br>&nbsp; &nbsp; check-cast p1, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p2, p1}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">35</span><br>&nbsp; &nbsp; :goto_6d<br>&nbsp; &nbsp; iget p0, p0, <span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;-&gt;vip_coin:<span class="hljs-type">I</span><br><br>&nbsp; &nbsp; if-eqz p0, :cond_74<br><br>&nbsp; &nbsp; .line <span class="hljs-number">36</span><br>&nbsp; &nbsp; invoke-static {p0}, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">String</span>;-&gt;valueOf(<span class="hljs-type">I</span>)<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">String</span>;<br><br>&nbsp; &nbsp; move-result-object p0<br><br>&nbsp; &nbsp; check-cast p0, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p3, p0}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; :cond_74<br>&nbsp; &nbsp; return-void<br>.end method<br></code></pre></td></tr></tbody></table></figure><p>const/4和const/16的区别？</p><p>const/4 最大只允许存放4个二进制位(4bit)，</p><p>const/16 最大值允许存放16个二进制位(16bit)， 第一位(即最高位)默认为符号位。单位换算 1byte=8bit</p><p>举例说明下寄存器的取值范围: # 以下数据定义高位默认为符号位</p><p>const/4 v0,0x2 # 最大只允许存放半字节数据 取值范围为 -8 and 7</p><p>const/16 v0 , 0xABCD # 定义一个寄存器变量，最大只允许存放16位数据 比如short类型数据 取值范围为-32768~32767</p><p>const v0 , 0xA# 定义一个寄存器， 最大只允许存放32位数据,比如int类型数据 将数字10赋值给v0 取值范围-2147483647~2147483647</p><p>const/high16 #定义一个寄存器， 最大只允许存放高16位数值 比如0xFFFF0000末四位补0 存入高四位0XFFFF</p><h3 id="2-Long型赋值"><a href="#2-Long型赋值" class="headerlink" title="2.Long型赋值"></a><strong>2.Long型赋值</strong></h3><p><strong>const-wide vx, lit32</strong>&nbsp;表示将一个 32 位的常量存储到 vx 与 vx+1 两个寄存器中 —— 即一个 long 类型的数据</p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali"><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> final</span> vipEndTime()J<br>&nbsp; &nbsp; .registers 3<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> const-wide </span>v0, 0x1854460ef29L<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> return-wide </span>v0<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end method</span><br><br></code></pre></td></tr></tbody></table></figure><p>会员到期时间就是2022年12月24日。那么1854460ef29L 怎么来的呢？也就是（2022年12月24日-1970年1月1日）×365天×24小时×60分钟×60秒×1000毫秒，转换成16进制就大概是那个数了</p><p><a href="https://www.beijing-time.org/shijianchuo/">在线时间戳转换</a></p><h3 id="3-变量赋值-正则"><a href="#3-变量赋值-正则" class="headerlink" title="3.变量赋值(正则)"></a><strong>3.变量赋值(正则)</strong></h3><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs smali"><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<span class="hljs-built_in">&nbsp;iget </span>p0, p0, <span class="hljs-class">Lcom/zj/wuaipojie/ui/SmaliLearn;</span>-&gt;vip_coin:I<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> if-eqz </span>p0,<span class="hljs-keyword"> :cond_74</span><br><br>&nbsp; &nbsp; .line 36<br>&nbsp; &nbsp;<span class="hljs-built_in"> invoke-static </span>{p0}, <span class="hljs-class">Ljava/lang/String;</span>-&gt;valueOf(I)<span class="hljs-class">Ljava/lang/String;</span><br><br>&nbsp; &nbsp;<span class="hljs-built_in"> move-result-object </span>p0<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> check-cast </span>p0, <span class="hljs-class">Ljava/lang/CharSequence;</span><br><br>&nbsp; &nbsp;<span class="hljs-built_in"> invoke-virtual </span>{p3, p0}, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232142255.png"></p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">(.*) .*<span class="hljs-built_in"></span><br><span class="hljs-built_in">const/4 </span>$1 0x1  //替换<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>签名校验</tag>
      
      <tag>smali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jeb动态调试，Log插桩</title>
    <link href="/2025/03/23/ZJ5/jeb%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%EF%BC%8CLog%E6%8F%92%E6%A1%A9%201b1a6f4b4daf80a68a87f1bcc2c5232d/"/>
    <url>/2025/03/23/ZJ5/jeb%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%EF%BC%8CLog%E6%8F%92%E6%A1%A9%201b1a6f4b4daf80a68a87f1bcc2c5232d/</url>
    
    <content type="html"><![CDATA[<h1 id="jeb动态调试，Log插桩"><a href="#jeb动态调试，Log插桩" class="headerlink" title="jeb动态调试，Log插桩"></a>jeb动态调试，Log插桩</h1><h2 id="1-什么是动态调试"><a href="#1-什么是动态调试" class="headerlink" title="1.什么是动态调试"></a><strong>1.什么是动态调试</strong></h2><p>动态调试是指自带的调试器跟踪自己软件的运行，可以在调试的过程中知道参数或者局部变量的值以及履清代码运行的先后顺序。多用于爆破注册码。与静态分析（直接阅读反编译的代码）不同，动态调试允许实时监控内存、寄存器、变量值和执行流程，尤其适合分析复杂逻辑或加密/混淆后的代码。</p><ul><li><p><strong>动态调试 vs 静态分析</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>动态调试</strong></th><th><strong>静态分析</strong></th></tr></thead><tbody><tr><td><strong>执行状态</strong></td><td>程序正在运行</td><td>程序未运行，仅分析代码文件</td></tr><tr><td><strong>优势</strong></td><td>观察实时数据流、内存变化，绕过部分反逆向技术</td><td>全面查看代码结构，无执行环境依赖</td></tr><tr><td><strong>劣势</strong></td><td>需处理反调试机制，依赖运行环境</td><td>无法追踪运行时状态，难以分析动态逻辑</td></tr><tr><td><strong>典型工具</strong></td><td>GDB、LLDB、IDA Pro、Frida、Android Studio</td><td>JADX、Ghidra、IDA Pro、Binary Ninja</td></tr></tbody></table></li></ul><h2 id="2-动态调试步骤"><a href="#2-动态调试步骤" class="headerlink" title="2.动态调试步骤"></a><strong>2.动态调试步骤</strong></h2><h3 id="1-修改debug权限"><a href="#1-修改debug权限" class="headerlink" title="1.修改debug权限"></a><strong>1.修改debug权限</strong></h3><p>方法一:在AndroidManifest.xml里添加可调试权限</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:debuggable="true"<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><p>  1.先提取安装包进行后续修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115640.png"></p><p>  2.对文件进行修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115589.png"></p><p>  3.将权限添加在<code>application</code>中</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115786.png"></p><p>  4.重新安装完成后即可得到一个可以调试的安装包。</p></li></ul><p>方法二：XappDebug模块hook对应的app</p><p>项目地址</p><p><a href="https://github.com/Palatis/XAppDebug">XappDebug</a></p><p>方法三：Magisk命令(重启失效)</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span>&nbsp;&nbsp;adb shell #adb进入命令行模式<br><br><span class="hljs-bullet">2.</span>&nbsp;&nbsp;su #切换至超级用户<br><br><span class="hljs-bullet">3.</span>&nbsp;&nbsp;magisk resetprop ro.debuggable 1<br><br><span class="hljs-bullet">4.</span>&nbsp;&nbsp;stop;start; #一定要通过该方式重启<br></code></pre></td></tr></tbody></table></figure><p>方法四:刷入MagiskHide Props Config模块</p><p>一般来说，在4选项中如果有ro.debuggable那就直接修改</p><p>没有的话就选5</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115387.png"></p><p>修改ro.debuggable的值为1</p><h3 id="2-端口转发以及开启adb权限"><a href="#2-端口转发以及开启adb权限" class="headerlink" title="2.端口转发以及开启adb权限"></a><strong>2.端口转发以及开启adb权限</strong></h3><p>版本号点击七次开启开发者模式并开启adb调试权限</p><p>夜神模拟器：adb connect 127.0.0.1:62001（雷电模拟器自带端口转发）</p><h3 id="3-下段点"><a href="#3-下段点" class="headerlink" title="3.下段点"></a><strong>3.下段点</strong></h3><p>ctrl+b下断点</p><h3 id="4-debug模式启动"><a href="#4-debug模式启动" class="headerlink" title="4.debug模式启动"></a><strong>4.debug模式启动</strong></h3><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start -D -n <span class="hljs-keyword">com</span>.zj.wuaipojie/.ui.MainActivity<br></code></pre></td></tr></tbody></table></figure><p>adb shell am start -D -n</p><p>adb shell am start -D -n 包名/类名</p><p>am start -n 表示启动一个activity</p><p>am start -D 表示将应用设置为可调试模式</p><p><a href="https://blog.csdn.net/jinmie0193/article/details/111355867">Android修改ro.debuggable 的四种方法-CSDN博客</a></p><h3 id="5-Jeb附加调试进程"><a href="#5-Jeb附加调试进程" class="headerlink" title="5.Jeb附加调试进程"></a><strong>5.Jeb附加调试进程</strong></h3><p>激活jeb</p><p>在线python运行</p><p><a href="https://tool.lu/coderunner/">https://tool.lu/coderunner/</a></p><ul><li><p>使用案例：</p><p>  1.查询到相关位置</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116197.png"></p><p>  2.将内容编译为JAVA的形式进行分析</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116068.png"></p><p>  3.通过初步分析判断关键点在<code>chek()</code>方法对我们输入的字符串进行了怎样的判断。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116137.png"></p><p>  4.双击进入到<code>chek()</code>代码，发现它是一个经过一串运算后进行base64编码与字符进行对比</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116429.png"></p><p>  5.查找到关键中间字符的代码进行下断点（Ctrl+b）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116510.png"></p><p>  6.使用debug启动该软件，依次获取包名和启动类名</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117031.png"></p><p>  去掉包名的部分，后边的一串属于是要填写的类名</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117489.png"></p><p>  7.启动后返回界面出现下列提示说明已正常运行debug模式</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117217.png"></p><p>  8.使用jeb对下断点的地方进行调试，我们检查调试端口和报名对应正确且进程存在，点击<strong>附上</strong></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117764.png"></p><ol start="9"><li></li></ol></li></ul><p>算号代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"> 复制代码 隐藏代码<br><span class="hljs-comment">#https://bbs.pediy.com/</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> os, sys, struct, time, binascii, hashlib<br><br>RC4_Key2= <span class="hljs-string">'Eg\xa2\x99_\x83\xf1\x10'</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">Key, inData</span>):<br>&nbsp; &nbsp; Buf = <span class="hljs-string">""</span><br>&nbsp; &nbsp; S = <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)<br>&nbsp; &nbsp; K = (<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:<span class="hljs-built_in">ord</span>(x), Key) * (<span class="hljs-number">256</span> / <span class="hljs-built_in">len</span>(Key) + <span class="hljs-number">1</span>))[:<span class="hljs-number">256</span>]<br>&nbsp; &nbsp; j = <span class="hljs-number">0</span><br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;j = (S[i] + K[i] + j) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;S[i], S[j] = S[j], S[i]<br>&nbsp; &nbsp; i, j = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inData)):<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;j = (j + S[i]) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;S[i], S[j] = S[j], S[i]<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Buf += <span class="hljs-built_in">chr</span>(S[(S[j] + S[i]) % <span class="hljs-number">256</span>] ^ <span class="hljs-built_in">ord</span>(inData[x]))<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> Buf<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Long2Int</span>(<span class="hljs-params">longdata</span>):<br>&nbsp; &nbsp; lo = longdata &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; hi = (longdata &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0x7FFFFFFF</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> hi, lo<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KeygenSN</span>(<span class="hljs-params">LicenseSerial, MachineID</span>):<br>&nbsp; &nbsp; mhi, mlo = Long2Int(MachineID)<br>&nbsp; &nbsp; lhi, llo = Long2Int(LicenseSerial)<br>&nbsp; &nbsp; hi_Key = (mhi - lhi + <span class="hljs-number">0x55667788</span>) &amp; <span class="hljs-number">0x7FFFFFFF</span><br>&nbsp; &nbsp; lo_Key = (mlo + llo + <span class="hljs-number">0x11223344</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; Z0, = struct.unpack(<span class="hljs-string">'&lt;Q'</span>, struct.pack(<span class="hljs-string">'&lt;LL'</span>, lo_Key, hi_Key))<br>&nbsp; &nbsp; Z1 = <span class="hljs-built_in">int</span>(time.time()) ^ <span class="hljs-number">0x56739ACD</span><br>&nbsp; &nbsp; s = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:<span class="hljs-built_in">int</span>(x, <span class="hljs-number">16</span>), <span class="hljs-string">"%x"</span> % Z1)) % <span class="hljs-number">10</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-string">"%dZ%d%d"</span> % (Z0, Z1, s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ParsePost</span>(<span class="hljs-params">buf</span>):<br>&nbsp; &nbsp; Info = struct.unpack(<span class="hljs-string">'&lt;3L2Q4LQ3L'</span>, buf[:<span class="hljs-number">0x40</span>])<br>&nbsp; &nbsp; flag, CRC, UserSerial, LicenseSerial, MachineID, build_type, \<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; Ver_Major, Ver_Minor, Ver_Buildid, Ver_Timestamp, \<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; TimeOffset, Kclass, Random2 = Info<br>&nbsp; &nbsp; SysInfoData = buf[<span class="hljs-number">0x40</span>:]<br>&nbsp; &nbsp; <span class="hljs-keyword">assert</span> CRC == binascii.crc32(buf[<span class="hljs-number">8</span>:]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> Info, SysInfoData<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">DecodeRc4Str</span>(<span class="hljs-params">buf</span>):<br>&nbsp; &nbsp; buf = buf.decode(<span class="hljs-string">'hex'</span>)<br>&nbsp; &nbsp; i, s = ParsePost(rc4(buf[:<span class="hljs-number">8</span>] + RC4_Key2, buf[<span class="hljs-number">8</span>:]))<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> i, s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetJebLicenseKey</span>():<br>&nbsp; &nbsp; licdata = <span class="hljs-string">""</span><br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> licdata:<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;i, MachineID = DecodeRc4Str(licdata)<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;SN = KeygenSN(i[<span class="hljs-number">3</span>], i[<span class="hljs-number">4</span>])<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">print</span> <span class="hljs-string">"JEB License Key:"</span>, SN<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> SN<br><br>GetJebLicenseKey()<br>raw_input(<span class="hljs-string">"Enter to Exit..."</span>)<br><br></code></pre></td></tr></tbody></table></figure><p>快捷键：</p><p>^F6进入方法</p><p>F6跳过方法</p><p>F7从方法中跳出来</p><p>R运行到光标处</p><h3 id="3-Log插桩"><a href="#3-Log插桩" class="headerlink" title="3.Log插桩"></a><strong>3.Log插桩</strong></h3><p>定义：Log插桩指的是反编译APK文件时，在对应的smali文件里，添加相应的smali代码，将程序中的关键信息，以log日志的形式进行输出。</p><p>调用命令</p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali"> 复制代码 隐藏代码<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-static </span>{对应寄存器}, <span class="hljs-class">Lcom/mtools/LogUtils;</span>-&gt;v(<span class="hljs-class">Ljava/lang/Object;</span>)V<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态调试</tag>
      
      <tag>jeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弹窗定位去更新，广告分析与布局优化</title>
    <link href="/2025/03/23/ZJ4/%E5%BC%B9%E7%AA%97%E5%AE%9A%E4%BD%8D%E5%8E%BB%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%B9%BF%E5%91%8A%E5%88%86%E6%9E%90%E4%B8%8E%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%201b0a6f4b4daf80019ef2e0767f50ce0e/"/>
    <url>/2025/03/23/ZJ4/%E5%BC%B9%E7%AA%97%E5%AE%9A%E4%BD%8D%E5%8E%BB%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%B9%BF%E5%91%8A%E5%88%86%E6%9E%90%E4%B8%8E%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%201b0a6f4b4daf80019ef2e0767f50ce0e/</url>
    
    <content type="html"><![CDATA[<h1 id="弹窗定位去更新，广告分析与布局优化"><a href="#弹窗定位去更新，广告分析与布局优化" class="headerlink" title="弹窗定位去更新，广告分析与布局优化"></a>弹窗定位去更新，广告分析与布局优化</h1><h2 id="1-广告类型"><a href="#1-广告类型" class="headerlink" title="1.广告类型"></a><strong>1.广告类型</strong></h2><p>启动广告&nbsp; &nbsp;&nbsp;&nbsp;弹窗&amp;更新广告&nbsp; &nbsp;横幅广告</p><h2 id="2-安卓四大组件"><a href="#2-安卓四大组件" class="headerlink" title="2.安卓四大组件"></a>2.安卓四大组件</h2><table><thead><tr><th><strong>组件</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Activity(活动)</td><td>在应用中的一个Activity可以用来表示一个界面，意思可以理解为“活动”，即一个活动开始，代表 Activity组件启动，活动结束，代表一个Activity的生命周期结束。一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</td></tr><tr><td>Service(服务)</td><td>Service它可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等。</td></tr><tr><td>Broadcast Receiver(广播接收器)</td><td>一个用于接收广播信息，并做出对应处理的组件。比如我们常见的系统广播：通知时区改变、电量低、用户改变了语言选项等。</td></tr><tr><td>Content Provider(内容提供者)</td><td>作为应用程序之间唯一的共享数据的途径，Content Provider主要的功能就是存储并检索数据以及向其他应用程序提供访问数据的接口。Android内置的许多数据都是使用Content Provider形式，供开发者调用的（如视频，音频，图片，通讯录等）</td></tr></tbody></table><h3 id="1-activity的切换"><a href="#1-activity的切换" class="headerlink" title="1.activity的切换"></a><strong>1.activity的切换</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!---声明实现应用部分可视化界面的 Activity，必须使用 AndroidManifest 中的 &lt;activity&gt; 元素表示所有 Activity。系统不会识别和运行任何未进行声明的Activity。-----&gt;<br>&lt;activity  <br>    android:label=<span class="hljs-string">"@string/app_name"</span>  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.MainActivity"</span>  <br>    android:exported=<span class="hljs-string">"true"</span>&gt;  &lt;!--当前Activity是否可以被另一个Application的组件启动：<span class="hljs-literal">true</span>允许被启动；<span class="hljs-literal">false</span>不允许被启动--&gt;<br>    &lt;!---指明这个activity可以以什么样的意图(intent)启动---&gt;<br>    &lt;intent-filter&gt;  <br>        &lt;!--表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动---&gt;<br>        &lt;action  <br>            android:name=<span class="hljs-string">"android.intent.action.MAIN"</span> /&gt;  <br>        &lt;!--这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity--&gt;<br>        &lt;category  <br>            android:name=<span class="hljs-string">"android.intent.category.LAUNCHER"</span> /&gt;  <br>    &lt;/intent-filter&gt;  <br>&lt;/activity&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFirst"</span> /&gt;<br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFifth"</span>  <br>    android:exported=<span class="hljs-string">"true"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFourth"</span>  <br>    android:exported=<span class="hljs-string">"true"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeThird"</span>  <br>    android:exported=<span class="hljs-string">"false"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeSecond"</span>  <br>    android:exported=<span class="hljs-string">"false"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.AdActivity"</span> /&gt;  <span class="hljs-comment">//广告的Activity</span><br></code></pre></td></tr></tbody></table></figure><p>启动广告流程：<br>启动Activity-&gt;广告Activity-&gt;主页Activity</p><p>修改方法：<br>1.修改加载时间<br>2.Acitivity切换定位，修改Intent的Activity类名</p><ul><li><p>修改Intent的Activity类名示例</p><p>  1.在查找过程中我们可以直接排除他自身一个类的调用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231717814.png"></p><p>  2.观察改代码的调用逻辑</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (position) {  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent.setClass(it.getContext(), ChallengeFirst.class);  <br>        it.getContext().startActivity(intent);  <br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent2.setClass(it.getContext(), ChallengeSecond.class);  <br>        it.getContext().startActivity(intent2);  <br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <span class="hljs-comment">//new一个Intent，</span><br>        intent3.setClass(it.getContext(), AdActivity.class);  <span class="hljs-comment">//传入要切换的Acitivity的类名</span><br>        it.getContext().startActivity(intent3);  <span class="hljs-comment">//启动对应的Activity</span><br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent4.setClass(it.getContext(), ChallengeFourth.class);  <br>        it.getContext().startActivity(intent4);  <br>        <span class="hljs-keyword">return</span>; <br>    <span class="hljs-keyword">default</span>:  <br>        <span class="hljs-keyword">return</span>;  <br>}<br></code></pre></td></tr></tbody></table></figure><p>  3.通过观察发现AdActivity.class是插入广告的地方，我们进入该地方将传入的广告Activity切换为我们正常的页面Activity</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231712525.png"></p><p>  4.重新签名安装后就发现我们直接进入到正常的Activity页面。该方法定位到具体的代码地方修改可以避免直接在XMl文件里修改而产生的页面内容无法加载或闪退等情况。</p></li></ul><h3 id="activity切换定位法"><a href="#activity切换定位法" class="headerlink" title="activity切换定位法"></a>activity切换定位法</h3><ul><li><p>修改时间示例</p><p>  1.先打开Activity记录</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713500.png"></p><p>  2.可以查找定位到我们刚刚打开界面或自动弹出界面的Activity</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713929.png"></p><p>  3.点击复制进行查找</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713873.png"></p><p>  4.修改时间来关闭弹窗，我们发现调用时间的是loadAd()方法。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713028.png"></p><ol><li><code>0xbb8</code>是十六进制数值，对应十进制的&nbsp;3000 毫秒（3 秒）。我们可以将其修改为0x0使其读秒数变为0</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713307.png"></p><p>  6.保存安装后就可以发现界面仍会走到，但是因为停留时间太短可以忽略。</p></li></ul><h2 id="3-Activity生命周期"><a href="#3-Activity生命周期" class="headerlink" title="3.Activity生命周期"></a>3.<strong>Activity生命周期</strong></h2><table><thead><tr><th><strong>函数名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>onCreate()</td><td>一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td></tr><tr><td>onStart()</td><td>当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td></tr><tr><td>onResume()</td><td>这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td></tr><tr><td>onPause()</td><td>这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td></tr><tr><td>onStop()</td><td>这个方法是在Activity完全不可见的时候调用的。</td></tr><tr><td>onDestroy()</td><td>这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td></tr><tr><td>onRestart()</td><td>当Activity从停止stop状态恢进入start状态时调用状态。</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714521.png"></p><h2 id="4-弹窗定位-堆栈分析"><a href="#4-弹窗定位-堆栈分析" class="headerlink" title="4.弹窗定位&amp;堆栈分析"></a><strong>4.弹窗定位&amp;堆栈分析</strong></h2><p>修改方法：</p><ul><li><p>1.修改xml中的versiocode</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714745.png"></p></li><li><p>2.Hook弹窗(推荐算法助手开启弹窗定位)</p><p>  （1）启动模块，勾选作用域重启软件</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714395.png"></p><p>  （2）打开算法助手，找到该软件分别打开应用总开关和弹窗定位。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714171.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714172.png"><br>  （3）启动后点击返回就可以实现返回，但在Hook之前会把返回键给劫持掉。相当于去掉弹窗。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715113.png"></p><p>  （4）也可以直接启用的关键词弹窗，直接Hook掉两个弹窗。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715712.png"></p></li><li><p>3.修改dex弹窗代码</p><p>  （1）打开日志找到最新弹窗，可以查看该弹窗的相关内容以及堆栈的调用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715655.png"></p><p>  （2）因为最终要定位到该onCreate方法，我们定位到最精准的地方进行查看。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715361.png"></p><p>  （3）会发现后面调用了show()方法来显示弹窗信息，我们可以将该段代码注释掉或删除。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715201.png"></p></li><li><p>4.抓包修改响应体(也可以路由器拦截)</p><p>  详见后面抓包内容</p></li><li><p>横幅广告</p><p>  1.使用开发助手的布局查看功能，同意其申请权限</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715524.png"></p><p>  2.使用小放大镜选取横幅，查看其相关信息，ad_image是广告的意思</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716804.png"></p><p>  3.进一步我们查看到其id等信息</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716397.png"></p><p>  4.我们可以使用XML查找</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716426.png"></p><p>  5.到定位位置修改其界面的相关信息</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716519.png"></p><p>  6.同样也可以加入xml隐藏代码将该布局隐藏起来</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>android:visibility="gone"<br></code></pre></td></tr></tbody></table></figure><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716656.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓四大组件</tag>
      
      <tag>Activity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Smail</title>
    <link href="/2025/03/22/ZJ3/%E5%88%9D%E8%AF%86smail%201aba6f4b4daf80fb9bbfc0bb1c274e44/"/>
    <url>/2025/03/22/ZJ3/%E5%88%9D%E8%AF%86smail%201aba6f4b4daf80fb9bbfc0bb1c274e44/</url>
    
    <content type="html"><![CDATA[<h1 id="初识smail"><a href="#初识smail" class="headerlink" title="初识smail"></a>初识smail</h1><h1 id="1-什么是JVM、Dalvik、ART"><a href="#1-什么是JVM、Dalvik、ART" class="headerlink" title="1.什么是JVM、Dalvik、ART"></a>1.什么是JVM、Dalvik、ART</h1><p>JVM是JAVA虚拟机，运行JAVA字节码程序</p><p>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex(Dalvik executable)</p><p>Art(Android Runtime)相当于Dalvik的升级版，本质与Dalvik无异</p><ul><li><p><strong>JVM</strong>&nbsp;是 Java 生态的通用运行时，<strong>Dalvik</strong>&nbsp;是 Android 早期的移动优化方案，<strong>ART</strong>&nbsp;是更现代的 Android 运行时，通过预编译和混合模式显著提升性能。三者的演进反映了从跨平台兼容性到移动端极致性能的权衡</p><h3 id="1-JVM（Java-Virtual-Machine）"><a href="#1-JVM（Java-Virtual-Machine）" class="headerlink" title="1. JVM（Java Virtual Machine）"></a><strong>1. JVM（Java Virtual Machine）</strong></h3><ul><li><strong>定义</strong>：JVM 是 Java 平台的核心组件，负责执行&nbsp;<strong>Java 字节码</strong>（<code>.class</code>&nbsp;文件）。</li><li><strong>特点</strong>：<ul><li><strong>跨平台</strong>：遵循“一次编写，到处运行”的理念，通过字节码和 JVM 的适配实现跨平台。</li><li><strong>基于栈的架构</strong>：指令操作基于栈（操作数栈），指令更紧凑但可能执行较慢。</li><li><strong>JIT 编译</strong>（Just-In-Time）：运行时将热点代码（频繁执行的代码）动态编译为本地机器码以提高性能。</li></ul></li><li><strong>应用场景</strong>：传统 Java 应用（如桌面、服务器端程序）。</li></ul><hr><h3 id="2-Dalvik"><a href="#2-Dalvik" class="headerlink" title="2. Dalvik"></a><strong>2. Dalvik</strong></h3><ul><li><strong>定义</strong>：Dalvik 是 Android 早期（5.0 之前）使用的<strong>虚拟机</strong>，专为移动设备优化。</li><li><strong>特点</strong>：<ul><li><strong>基于寄存器架构</strong>：指令直接操作寄存器，执行效率更高（但指令更长）。</li><li><strong>运行 Dex 文件</strong>：将多个&nbsp;<code>.class</code>&nbsp;文件合并优化为单个&nbsp;<code>.dex</code>&nbsp;文件，减少体积和冗余。</li><li><strong>JIT 编译</strong>：在应用运行时动态编译字节码为机器码，但每次启动都需要重新编译。</li><li><strong>多实例设计</strong>：每个 Android 应用运行在独立的 Dalvik 进程中，实现沙盒隔离。</li></ul></li><li><strong>局限性</strong>：JIT 编译导致启动慢、内存占用高，且运行时性能不如预先编译。</li></ul><hr><h3 id="3-ART（Android-Runtime）"><a href="#3-ART（Android-Runtime）" class="headerlink" title="3. ART（Android Runtime）"></a><strong>3. ART（Android Runtime）</strong></h3><ul><li><strong>定义</strong>：ART 是 Android 5.0（Lollipop）及之后取代 Dalvik 的<strong>新一代运行时</strong>。</li><li><strong>核心改进</strong>：<ul><li><strong>AOT 编译</strong>（Ahead-Of-Time）：<strong>安装时</strong>将 Dex 字节码完全编译为本地机器码，直接执行，大幅提升运行速度和能效。</li><li><strong>性能优化</strong>：减少运行时编译开销，CPU 和内存效率更高。</li><li><strong>垃圾回收改进</strong>：减少暂停时间，支持并行处理。</li><li><strong>支持 64 位</strong>：更好地利用现代硬件。</li></ul></li><li><strong>代价</strong>：应用安装时间变长，存储占用增加（需存储编译后的机器码）。</li><li><strong>混合编译（Android 7.0+）</strong>：结合 JIT 和 AOT，安装时仅部分编译，运行时收集热点代码再优化，平衡速度和存储。</li></ul><hr><h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a><strong>对比总结</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>JVM</strong></th><th><strong>Dalvik</strong></th><th><strong>ART</strong></th></tr></thead><tbody><tr><td><strong>架构</strong></td><td>基于栈</td><td>基于寄存器</td><td>基于寄存器（兼容 Dex）</td></tr><tr><td><strong>编译方式</strong></td><td>JIT</td><td>JIT</td><td>AOT + JIT（混合模式）</td></tr><tr><td><strong>文件格式</strong></td><td><code>.class</code>&nbsp;文件</td><td><code>.dex</code>&nbsp;文件</td><td><code>.dex</code>&nbsp;→ 本地机器码</td></tr><tr><td><strong>性能</strong></td><td>适中（跨平台代价）</td><td>启动慢，运行时优化</td><td>启动快，运行高效</td></tr><tr><td><strong>存储占用</strong></td><td>低</td><td>低</td><td>较高（存储预编译机器码）</td></tr><tr><td><strong>适用场景</strong></td><td>桌面/服务器 Java 应用</td><td>早期 Android 设备</td><td>现代 Android 设备（5.0+）</td></tr></tbody></table><hr><h3 id="为什么-Android-不用-JVM？"><a href="#为什么-Android-不用-JVM？" class="headerlink" title="为什么 Android 不用 JVM？"></a><strong>为什么 Android 不用 JVM？</strong></h3><ol><li><strong>专利与授权</strong>：早期 Oracle 对 JVM 专利控制严格，Android 选择绕过。</li><li><strong>移动端优化</strong>：Dalvik/ART 针对低内存、低功耗设备设计（如寄存器架构、Dex 优化）。</li><li><strong>生态隔离</strong>：Android 通过自定义运行时避免与 Java ME 生态冲突。</li></ol></li></ul><h1 id="2-smali及其语法"><a href="#2-smali及其语法" class="headerlink" title="2.smali及其语法"></a><strong>2.smali及其语法</strong></h1><p>smali是Dalvik的寄存器语言，smali代码是dex反编译而来的。（静态修改前提条件）</p><p><a href="https://www.52pojie.cn/thread-1485681-1-1.html">【原木文章】Android改造者之路-02.初探smali功法 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-396966-1-1.html">吾爱破解安卓逆向入门教程（三）-深入Smali文件 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-397858-1-1.html">吾爱破解安卓逆向入门教程（四）-Smali函数分析 - 吾爱破解 - 52pojie.cn</a></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><strong>关键字</strong></h3><table><thead><tr><th><strong>名称</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>.class</td><td>类名</td></tr><tr><td>.super</td><td>父类名，继承的上级类名名称</td></tr><tr><td>.source</td><td>源名</td></tr><tr><td>.field</td><td>变量</td></tr><tr><td>.method</td><td>方法名</td></tr><tr><td>.register</td><td>寄存器</td></tr><tr><td>.end method</td><td>方法名的结束</td></tr><tr><td>public</td><td>公有</td></tr><tr><td>protected</td><td>半公开，只有同一家人才能用</td></tr><tr><td>private</td><td>私有，只能自己使用</td></tr><tr><td>.parameter</td><td>方法参数</td></tr><tr><td>.prologue</td><td>方法开始</td></tr><tr><td>.line xxx</td><td>位于第xxx行</td></tr></tbody></table><h3 id="数据类型对应"><a href="#数据类型对应" class="headerlink" title="数据类型对应"></a>数据类型对应</h3><table><thead><tr><th><strong>smali类型</strong></th><th><strong>java类型</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>V</td><td>void</td><td>无返回值</td></tr><tr><td>Z</td><td>boolean</td><td>布尔值类型，返回0或1</td></tr><tr><td>B</td><td>byte</td><td>字节类型，返回字节</td></tr><tr><td>S</td><td>short</td><td>短整数类型，返回数字</td></tr><tr><td>C</td><td>char</td><td>字符类型，返回字符</td></tr><tr><td>I</td><td>int</td><td>整数类型，返回数字</td></tr><tr><td>J</td><td>long （64位 需要2个寄存器存储）</td><td>长整数类型，返回数字</td></tr><tr><td>F</td><td>float</td><td>单浮点类型，返回数字</td></tr><tr><td>D</td><td>double （64位 需要2个寄存器存储）</td><td>双浮点类型，返回数字</td></tr><tr><td>string</td><td>String</td><td>文本类型，返回字符串</td></tr><tr><td>Lxxx/xxx/xxx</td><td>object</td><td>对象类型，返回对象</td></tr></tbody></table><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><table><thead><tr><th><strong>关键字</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>const</td><td>重写整数属性，真假属性内容，只能是数字类型</td></tr><tr><td>const-string</td><td>重写字符串内容</td></tr><tr><td>const-wide</td><td>重写长整数类型，多用于修改到期时间。</td></tr><tr><td>return</td><td>返回指令</td></tr><tr><td>if-eq</td><td>全称equal(a=b)，比较寄存器ab内容，相同则跳</td></tr><tr><td>if-ne</td><td>全称not equal(a!=b)，ab内容不相同则跳</td></tr><tr><td>if-eqz</td><td>全称equal zero(a=0)，z即是0的标记，a等于0则跳</td></tr><tr><td>if-nez</td><td>全称not equal zero(a!=0)，a不等于0则跳</td></tr><tr><td>if-ge</td><td>全称greater&nbsp;equal(a&gt;=b)，a大于或等于则跳</td></tr><tr><td>if-le</td><td>全称little equal(a&lt;=b)，a小于或等于则跳</td></tr><tr><td>goto</td><td>强制跳到指定位置</td></tr><tr><td>switch</td><td>分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td></tr><tr><td>iget</td><td>获取寄存器数据</td></tr></tbody></table><ul><li><p>if-eqz 另一个是if-nez 这两条指令是相对的</p><p>  (1)if-eqz vA, vB, :cond_**”&nbsp; &nbsp;如果vA等于vB则跳转到:cond_**</p><p>  (2)if-nez vA, vB, :cond_**”&nbsp; &nbsp;如果vA不等于vB则跳转到:cond_**</p></li></ul><p>其余指令可用语法工具查询</p><p>定位方法：搜索弹窗关键字、抓取按钮id</p><ul><li><p>分析示例</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个私有、静态、不可变的方法   方法名</span><br>.method <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> onCreate$lambda-<span class="hljs-number">2</span>(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z <span class="hljs-comment">//(这里面是方法的参数)这里是方法返回值类型，表示布尔值类型，返回假或真</span><br>    .registers <span class="hljs-number">7</span>  <span class="hljs-comment">//寄存器数量</span><br><br>    .line <span class="hljs-number">33</span>  <span class="hljs-comment">//代码所在的行数</span><br>    iget p0, p0, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I  <span class="hljs-comment">//读取p0(第一个参数，参考寄存器知识)中element的值赋值给p0</span><br><br>    const/<span class="hljs-number">4</span> p5, <span class="hljs-number">0x1</span>  <span class="hljs-comment">//p5赋值1</span><br><br>    const/<span class="hljs-number">16</span> v0, <span class="hljs-number">0xa</span> <span class="hljs-comment">//v0赋值10，在16进制里a表示10</span><br><br>    <span class="hljs-keyword">if</span>-ge p0, v0, :cond_15  <span class="hljs-comment">//判断p0的值是否大于或等于v0的值(即p0的值是否大于或等于10)，如果大于或等于则跳转到:cond_15</span><br><br>    .line <span class="hljs-number">34</span>  <span class="hljs-comment">//以下是常见的Toast弹窗代码</span><br>    check-cast p1, Landroid/content/Context; <span class="hljs-comment">//检查Context对象引用</span><br><br>    const-string p0, <span class="hljs-string">"请先获取10个硬币哦"</span> <span class="hljs-comment">//弹窗文本信息，把""里的字符串数据赋值给p0</span><br><br>    check-cast p0, Ljava/lang/CharSequence; <span class="hljs-comment">//检查CharSequence对象引用</span><br><br>    invoke-<span class="hljs-keyword">static</span> {p1, p0, p5}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast; <br>    <span class="hljs-comment">//将弹窗文本、显示时间等信息传给p1</span><br><br>    move-result-object p0  <span class="hljs-comment">//结果传递给p0</span><br><br>    invoke-virtual {p0}, Landroid/widget/Toast;-&gt;show()V  <span class="hljs-comment">//当看到这个Toast;-&gt;show你就应该反应过来这里是弹窗代码</span><br><br>    <span class="hljs-keyword">goto</span> :goto_31  <span class="hljs-comment">//跳转到:goto_31</span><br><br>    :cond_15 <span class="hljs-comment">//跳转的一个地址</span><br><br>    invoke-virtual {p1}, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z  <span class="hljs-comment">//判断isvip方法的返回值是否为真(即结果是否为1)</span><br><br>    move-result p0  <span class="hljs-comment">//结果赋值给p0</span><br><br>    <span class="hljs-keyword">if</span>-eqz p0, :cond_43 <span class="hljs-comment">//如果结果为0则跳转cond_43地址</span><br><br>    const p0, <span class="hljs-number">0x7f0d0018</span>  <span class="hljs-comment">//在arsc中的id索引，这个值可以进行查询</span><br><br>    .line <span class="hljs-number">37</span><br>    invoke-virtual {p2, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V <span class="hljs-comment">//设置图片资源</span><br><br>    const p0, <span class="hljs-number">0x7f0d0008</span><br><br>    .line <span class="hljs-number">38</span><br>    invoke-virtual {p3, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V<br><br>    const p0, <span class="hljs-number">0x7f0d000a</span><br><br>    .line <span class="hljs-number">39</span><br>    invoke-virtual {p4, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V<br><br>    .line <span class="hljs-number">40</span><br>    sget-object p0, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; <br><br>    check-cast p1, Landroid/content/Context;<br><br>    const/<span class="hljs-number">4</span> p2, <span class="hljs-number">0x2</span> <span class="hljs-comment">//p2赋值2</span><br><br>    const-string p3, <span class="hljs-string">"level"</span> <span class="hljs-comment">//sp的索引</span><br><br>    invoke-virtual {p0, p1, p3, p2}, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;Ljava/lang/String;I)V <span class="hljs-comment">//写入数据</span><br><br>    <span class="hljs-keyword">goto</span> :goto_50 <span class="hljs-comment">//跳转地址</span><br><br>    :cond_43<br><br>    check-cast p1, Landroid/content/Context;<br><br>    const-string p0, <span class="hljs-string">"\u8bf7\u5148\u5145\u503c\u5927\u4f1a\u5458\u54e6\uff01"</span> <span class="hljs-comment">//请先充值大会员哦！</span><br><br>    check-cast p0, Ljava/lang/CharSequence;<br><br>    invoke-<span class="hljs-keyword">static</span> {p1, p0, p5}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;<br><br>    move-result-object p0<br><br>    invoke-virtual {p0}, Landroid/widget/Toast;-&gt;show()V<br><br>    :goto_50<br>    <span class="hljs-keyword">return</span> p5  <span class="hljs-comment">//返回p5的值</span><br>.end method <span class="hljs-comment">//方法结束</span><br><br><span class="hljs-comment">//判断是否是大会员的方法</span><br>.method <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-title function_">isvip</span><span class="hljs-params">()</span>Z<br>    .registers <span class="hljs-number">2</span><br><br>    const/<span class="hljs-number">4</span> v0, <span class="hljs-number">0x0</span> <span class="hljs-comment">//v0赋值0</span><br><br>    <span class="hljs-keyword">return</span> v0 <span class="hljs-comment">//返回v0的值</span><br><br>.end method<br><br></code></pre></td></tr></tbody></table></figure><p>  <a href="https://www.52pojie.cn/thread-650395-1-1.html">https://www.52pojie.cn/thread-650395-1-1.html</a></p><p>  <a href="https://www.52pojie.cn/thread-632178-1-1.html">安卓游戏内购破解之滚动的天空 - 吾爱破解 - 52pojie.cn</a></p><p>  <a href="https://www.52pojie.cn/thread-654654-1-1.html">《教我兄弟学Android逆向03 破解第一个Android游戏 》 - 吾爱破解 - 52pojie.cn</a></p></li></ul><h1 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h1><ul><li><p>1.首先安装好核心破解，勾选后重启可以使用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222040498.png"></p></li><li><p>2.安装课程所需Demo</p><p>  <a href="https://pan.baidu.com/s/1cUInoi">https://pan.baidu.com/s/1cUInoi</a>   密码：07p9</p></li><li><p>3.在jadx中查询关键字（有时候反编译过程中会将汉字反编译为unicode编码）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041246.png"></p></li><li><p>修改代码逻辑</p><p>  将判断条件改为强制跳转</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041482.png"></p><p>  跳转后注释掉其判断条件，不管是否为真都执行下列逻辑</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041586.png"></p></li></ul><p><a href="https://www.notion.so/1b0a6f4b4daf8074a46adc1041b616a6?pvs=21">切水果大战</a></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222042093.png"></p>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>smail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识APK文件结构，双开，汉化，基础修改</title>
    <link href="/2025/03/05/ZJ2/%E5%88%9D%E8%AF%86APK%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8F%8C%E5%BC%80%EF%BC%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E5%9F%BA%E7%A1%80%E4%BF%AE%E6%94%B9%201aba6f4b4daf806ab293e060e8f7d41f/"/>
    <url>/2025/03/05/ZJ2/%E5%88%9D%E8%AF%86APK%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8F%8C%E5%BC%80%EF%BC%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E5%9F%BA%E7%A1%80%E4%BF%AE%E6%94%B9%201aba6f4b4daf806ab293e060e8f7d41f/</url>
    
    <content type="html"><![CDATA[<h1 id="初识APK文件结构，双开，汉化，基础修改"><a href="#初识APK文件结构，双开，汉化，基础修改" class="headerlink" title="初识APK文件结构，双开，汉化，基础修改"></a>初识APK文件结构，双开，汉化，基础修改</h1><h1 id="1-APK结构"><a href="#1-APK结构" class="headerlink" title="1.APK结构"></a>1.APK结构</h1><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p><table><thead><tr><th><strong>文件</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>assets目录</td><td>存放APK的静态资源文件，比如视频，音频，图片等</td></tr><tr><td>lib 目录</td><td>armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，其目录下的.so文件是c或c++编译的动态链接库文件</td></tr><tr><td>META-INF目录</td><td>保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证(验证文件是否又被修改)</td></tr><tr><td>res目录</td><td>res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</td></tr><tr><td>AndroidManifest.xml文件</td><td>APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td></tr><tr><td>classes.dex文件</td><td>classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td></tr><tr><td>resources.arsc文件</td><td>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td></tr></tbody></table><ul><li><p>APK 文件是一个压缩文件，可通过解压工具对其进行解压缩以查看其内部结构，但解压缩后的文件不能直接运行，必须重新打包并签名后才能安装到设备上。</p><h3 id="1-文件结构"><a href="#1-文件结构" class="headerlink" title="1. 文件结构"></a><strong>1. 文件结构</strong></h3><ul><li><strong>/META-INF文件夹</strong> ：包含应用程序的签名信息等元数据，如MANIFEST.MF（应用的清单文件）、CERT.SF（包含签名信息，用于校验应用包的完整性）、CERT.RSA（应用的数字证书，存储了证书信息）。</li><li><strong>/res文件夹</strong> ：存储应用程序的各种资源文件，如界面布局（布局文件，如<code>activity_main.xml</code>）、图形图像（放在\drawable- [配置]文件夹中，不同的屏幕密度有不同的目录）、字符串（<code>strings.xml</code>）、样式（<code>styles.xml</code>）、颜色（<code>colors.xml</code>）、动画（如<code>animated.xml</code>）等。</li><li><strong>/assets文件夹</strong> ：存放应用程序的任意资源，如配置文件、图片、视频等，这些文件会在编译时保留在原样，不会被处理。</li><li><strong>/lib文件夹</strong> ：用于存储应用程序的原生代码库（ <code>.so</code>文件），针对不同的处理器架构有不同的文件夹（如<code>/lib/armeabi- v7a/</code>、<code>/lib/arm64- v8a/</code>、<code>/lib/x86/</code>等）。</li><li><strong>/AndroidManifest.xml</strong> ：是应用程序的配置文件，声明了应用程序的组件（如活动、服务、广播接收器、内容提供者）、权限、图标、标签、版本等重要信息。</li><li><strong>/classes.dex文件</strong> ：是应用程序的 Java 或 Kotlin 编译生成的字节码文件，包含应用程序的执行逻辑。</li><li><strong>/resources.arsc文件</strong> ：是 Android 资源文件，包含了应用程序中的各种资源（如字符串、样式、颜色等）的索引信息。</li><li><strong>其他文件</strong> ：如证书文件（如<code>/META-INF/CERT.SF</code> 和<code>/META-INF/CERT.RSA</code>）、应用图标、应用启动屏文件等。</li></ul><h3 id="2-APK的加载过程"><a href="#2-APK的加载过程" class="headerlink" title="2. APK的加载过程"></a><strong>2. APK的加载过程</strong></h3><p>  当用户安装 APK 文件时，Android 系统会解析 APK 文件的结构，提取其中的 AndroidManifest.xml 文件和 resources.arsc 文件，识别出应用程序的组件、资源、权限等信息。之后，系统会将 classes.dex 文件中的字节码加载到内存中，并解释执行，完成应用程序的启动和运行。在运行过程中，系统会根据需要动态加载并使用其他资源文件（如 res 文件夹中的资源文件和 assets 文件夹中的文件）。</p></li></ul><h1 id="2-双开及原理"><a href="#2-双开及原理" class="headerlink" title="2.双开及原理"></a>2.双开及原理</h1><p><a href="https://blog.csdn.net/u014294681/article/details/116270479">【VirtualAPP 双开系列08】如何实现多开 - UID_virtualapp 使用-CSDN博客</a></p><p>双开：简单来说，就是手机同时运行两个或多个相同的应用，例如同时运行两个微信</p><table><thead><tr><th><strong>原理</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>修改包名</td><td>让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td></tr><tr><td>修改Framework</td><td>对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td></tr><tr><td>通过虚拟化技术实现</td><td>虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td></tr><tr><td>以插件机制运行</td><td>利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td></tr></tbody></table><h2 id="（1）通过MT管理器修改包名实现双开"><a href="#（1）通过MT管理器修改包名实现双开" class="headerlink" title="（1）通过MT管理器修改包名实现双开"></a>（1）通过MT管理器修改包名实现双开</h2><p>1.使用MT管理器提取应用的安装包</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/51cc4787-95b3-4e35-a392-92d492744021.png"></p><p>2.找到我们要提取的apk，提取定位</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/image.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221955092.png"></p><p>3.通过APK共存功能修改包名实现apk双开</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957108.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957109.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957110.png"></p><p>4.实现双开</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958621.png"></p><h2 id="（2）通过NP管理器修改包名实现双开"><a href="#（2）通过NP管理器修改包名实现双开" class="headerlink" title="（2）通过NP管理器修改包名实现双开"></a>（2）通过NP管理器修改包名实现双开</h2><p>流程与MT大致相同</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958997.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958998.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958999.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958000.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958001.png"></p><p>打开修改报名后的apk安装</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221959552.png"></p><p>就可以在手机上完成双开。因为修改报名实现双开动了应用的签名信息，如果开发者做了签名校验可能会出现安装后闪退崩溃等情况。</p><h1 id="3-汉化APK"><a href="#3-汉化APK" class="headerlink" title="3.汉化APK"></a>3.汉化APK</h1><p>使用专门的工具对外文版的软件资源进行读取，翻译，修改，回写等一系列处理，使用软件的菜单，对话框，提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化。</p><p>（需要注意，如果要直接装应用就应该先签名安装，看石否有签名校验导致的闪退。）</p><p><strong>基本上字符串都是在arsc里，建议一键汉化，然后再润色。少量没汉化到的字符串参考视频中的方法定位去逐个汉化。</strong></p><p>   <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221959189.png"></p><h2 id="（1）简单的英语字句修改"><a href="#（1）简单的英语字句修改" class="headerlink" title="（1）简单的英语字句修改"></a>（1）简单的英语字句修改</h2><ul><li><p>1.我们在管理器中点击查看</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000125.png"></p></li><li><p>2.利用MT自带的搜索功能</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000631.png"></p></li><li><p>3.点击高级搜索相当使用全局搜索（搜索应用中的全部文件）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000935.png"></p></li><li><p>4.对查询到的结果进行反编译</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001609.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001610.png"></p></li><li><p>5.对内容进行修改后保</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001075.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001076.png"></p></li><li><p>6.发现我们对内容进行了重新签名，应用与最开始安装已经是不一样的了。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222004158.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222002990.png"></p></li><li><p>7.对于卸载提示可以直接关闭处理，在设置里的APK安装检验证关闭就不会再提示</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005497.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005498.png"></p></li><li><p>8.关闭后还会出现签名不一致安装失败的现象。（可以卸载原应用或利用XP的模块核心破解来解决这类问题）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005117.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005118.png"></p></li><li><p>9.完成后我们会发现修改部分已经变为中文模式</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006665.png"></p></li></ul><h2 id="（2）利用开发者助手搜索"><a href="#（2）利用开发者助手搜索" class="headerlink" title="（2）利用开发者助手搜索"></a>（2）利用开发者助手搜索</h2><ul><li><p>1.下载安装后会有一个小图标</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006876.png"></p></li><li><p>2.我们到需要修改的app页面点击图标，点击开始资源分析</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006872.png"></p></li><li><p>3.点击需要查看的亮条部分，点击复制我们需要的文本信息，再回到MT管理器中重复上述步骤即可</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007495.png"></p></li></ul><p>也可以直接再MT浏览器中开通汉化翻译插件</p><p>我们发现第二次签名后软件可以直接安装成功，原因是MT自带的签名信息一致，不会出现签名信息冲突的情况，可以直接覆盖安装</p><h2 id="（3）放在dex文件中"><a href="#（3）放在dex文件中" class="headerlink" title="（3）放在dex文件中"></a>（3）放在dex文件中</h2><ul><li><p>1.选择dex编辑器++</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007447.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007448.png"></p></li><li><p>2.同样来搜索我们修改的字符，搜索类型可以自行选择。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008816.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008817.png"></p></li><li><p>3.很快就能的得到搜索结果</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008163.png"></p></li><li><p>4.修改后保存退出重复上述步骤</p></li></ul><h1 id="4-初识AndroidManifest-xml"><a href="#4-初识AndroidManifest-xml" class="headerlink" title="4.初识AndroidManifest.xml"></a>4.<strong>初识AndroidManifest.xml</strong></h1><p>AndroidManifest.xml文件是整个应用程序的信息描述文件，定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p><table><thead><tr><th><strong>属性</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>versionCode</td><td>版本号，主要用来更新，例如:12</td></tr><tr><td>versionName</td><td>版本名，给用户看的，例如:1.2</td></tr><tr><td>package</td><td>包名，例如：com.zj.52pj.demo</td></tr><tr><td>uses-permission android:name=””</td><td>应用权限，例如：android.permission.INTERNET 代表网络权限</td></tr><tr><td>android:label=”@string/app_name”</td><td>应用名称</td></tr><tr><td>android:icon=”@mipmap/ic_launcher”</td><td>应用图标路径</td></tr><tr><td>android:debuggable=”true”</td><td>应用是否开启debug权限</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>使用NT浏览器修改AndroidManifest.xml文件</p><ul><li><p>1.直接进入查看编译</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008126.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009665.png"></p></li><li><p>2.修改apk图标和名字，在NP管理器中使用通用编辑进行修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009864.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009865.png"></p></li><li><p>3.保存安装发现又出现签名信息不一致因为上边用的MT管理器签名，和现在NP签名不一致，按上述方法解决即可，安装后可以观察到修改成功。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009655.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009656.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009657.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APK结构</tag>
      
      <tag>双开原理</tag>
      
      <tag>APK汉化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/02/hello-world/"/>
    <url>/2025/03/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
