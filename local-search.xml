<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jeb动态调试，Log插桩</title>
    <link href="/2025/03/23/ZJ5/jeb%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%EF%BC%8CLog%E6%8F%92%E6%A1%A9%201b1a6f4b4daf80a68a87f1bcc2c5232d/"/>
    <url>/2025/03/23/ZJ5/jeb%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%EF%BC%8CLog%E6%8F%92%E6%A1%A9%201b1a6f4b4daf80a68a87f1bcc2c5232d/</url>
    
    <content type="html"><![CDATA[<h1 id="jeb动态调试，Log插桩"><a href="#jeb动态调试，Log插桩" class="headerlink" title="jeb动态调试，Log插桩"></a>jeb动态调试，Log插桩</h1><h2 id="1-什么是动态调试"><a href="#1-什么是动态调试" class="headerlink" title="1.什么是动态调试"></a><strong>1.什么是动态调试</strong></h2><p>动态调试是指自带的调试器跟踪自己软件的运行，可以在调试的过程中知道参数或者局部变量的值以及履清代码运行的先后顺序。多用于爆破注册码。与静态分析（直接阅读反编译的代码）不同，动态调试允许实时监控内存、寄存器、变量值和执行流程，尤其适合分析复杂逻辑或加密/混淆后的代码。</p><ul><li><p><strong>动态调试 vs 静态分析</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>动态调试</strong></th><th><strong>静态分析</strong></th></tr></thead><tbody><tr><td><strong>执行状态</strong></td><td>程序正在运行</td><td>程序未运行，仅分析代码文件</td></tr><tr><td><strong>优势</strong></td><td>观察实时数据流、内存变化，绕过部分反逆向技术</td><td>全面查看代码结构，无执行环境依赖</td></tr><tr><td><strong>劣势</strong></td><td>需处理反调试机制，依赖运行环境</td><td>无法追踪运行时状态，难以分析动态逻辑</td></tr><tr><td><strong>典型工具</strong></td><td>GDB、LLDB、IDA Pro、Frida、Android Studio</td><td>JADX、Ghidra、IDA Pro、Binary Ninja</td></tr></tbody></table></li></ul><h2 id="2-动态调试步骤"><a href="#2-动态调试步骤" class="headerlink" title="2.动态调试步骤"></a><strong>2.动态调试步骤</strong></h2><h3 id="1-修改debug权限"><a href="#1-修改debug权限" class="headerlink" title="1.修改debug权限"></a><strong>1.修改debug权限</strong></h3><p>方法一:在AndroidManifest.xml里添加可调试权限</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:debuggable="true"<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><p>  1.先提取安装包进行后续修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115640.png"></p><p>  2.对文件进行修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115589.png"></p><p>  3.将权限添加在<code>application</code>中</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115786.png"></p><p>  4.重新安装完成后即可得到一个可以调试的安装包。</p></li></ul><p>方法二：XappDebug模块hook对应的app</p><p>项目地址</p><p><a href="https://github.com/Palatis/XAppDebug">XappDebug</a></p><p>方法三：Magisk命令(重启失效)</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span>&nbsp;&nbsp;adb shell #adb进入命令行模式<br><br><span class="hljs-bullet">2.</span>&nbsp;&nbsp;su #切换至超级用户<br><br><span class="hljs-bullet">3.</span>&nbsp;&nbsp;magisk resetprop ro.debuggable 1<br><br><span class="hljs-bullet">4.</span>&nbsp;&nbsp;stop;start; #一定要通过该方式重启<br></code></pre></td></tr></tbody></table></figure><p>方法四:刷入MagiskHide Props Config模块</p><p>一般来说，在4选项中如果有ro.debuggable那就直接修改</p><p>没有的话就选5</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115387.png"></p><p>修改ro.debuggable的值为1</p><h3 id="2-端口转发以及开启adb权限"><a href="#2-端口转发以及开启adb权限" class="headerlink" title="2.端口转发以及开启adb权限"></a><strong>2.端口转发以及开启adb权限</strong></h3><p>版本号点击七次开启开发者模式并开启adb调试权限</p><p>夜神模拟器：adb connect 127.0.0.1:62001（雷电模拟器自带端口转发）</p><h3 id="3-下段点"><a href="#3-下段点" class="headerlink" title="3.下段点"></a><strong>3.下段点</strong></h3><p>ctrl+b下断点</p><h3 id="4-debug模式启动"><a href="#4-debug模式启动" class="headerlink" title="4.debug模式启动"></a><strong>4.debug模式启动</strong></h3><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start -D -n <span class="hljs-keyword">com</span>.zj.wuaipojie/.ui.MainActivity<br></code></pre></td></tr></tbody></table></figure><p>adb shell am start -D -n</p><p>adb shell am start -D -n 包名/类名</p><p>am start -n 表示启动一个activity</p><p>am start -D 表示将应用设置为可调试模式</p><p><a href="https://blog.csdn.net/jinmie0193/article/details/111355867">Android修改ro.debuggable 的四种方法-CSDN博客</a></p><h3 id="5-Jeb附加调试进程"><a href="#5-Jeb附加调试进程" class="headerlink" title="5.Jeb附加调试进程"></a><strong>5.Jeb附加调试进程</strong></h3><p>激活jeb</p><p>在线python运行</p><p><a href="https://tool.lu/coderunner/">https://tool.lu/coderunner/</a></p><ul><li><p>使用案例：</p><p>  1.查询到相关位置</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116197.png"></p><p>  2.将内容编译为JAVA的形式进行分析</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116068.png"></p><p>  3.通过初步分析判断关键点在<code>chek()</code>方法对我们输入的字符串进行了怎样的判断。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116137.png"></p><p>  4.双击进入到<code>chek()</code>代码，发现它是一个经过一串运算后进行base64编码与字符进行对比</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116429.png"></p><p>  5.查找到关键中间字符的代码进行下断点（Ctrl+b）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116510.png"></p><p>  6.使用debug启动该软件，依次获取包名和启动类名</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117031.png"></p><p>  去掉包名的部分，后边的一串属于是要填写的类名</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117489.png"></p><p>  7.启动后返回界面出现下列提示说明已正常运行debug模式</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117217.png"></p><p>  8.使用jeb对下断点的地方进行调试，我们检查调试端口和报名对应正确且进程存在，点击<strong>附上</strong></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117764.png"></p><ol start="9"><li></li></ol></li></ul><p>算号代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"> 复制代码 隐藏代码<br><span class="hljs-comment">#https://bbs.pediy.com/</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> os, sys, struct, time, binascii, hashlib<br><br>RC4_Key2= <span class="hljs-string">'Eg\xa2\x99_\x83\xf1\x10'</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">Key, inData</span>):<br>&nbsp; &nbsp; Buf = <span class="hljs-string">""</span><br>&nbsp; &nbsp; S = <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)<br>&nbsp; &nbsp; K = (<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:<span class="hljs-built_in">ord</span>(x), Key) * (<span class="hljs-number">256</span> / <span class="hljs-built_in">len</span>(Key) + <span class="hljs-number">1</span>))[:<span class="hljs-number">256</span>]<br>&nbsp; &nbsp; j = <span class="hljs-number">0</span><br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;j = (S[i] + K[i] + j) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;S[i], S[j] = S[j], S[i]<br>&nbsp; &nbsp; i, j = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inData)):<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;j = (j + S[i]) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;S[i], S[j] = S[j], S[i]<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Buf += <span class="hljs-built_in">chr</span>(S[(S[j] + S[i]) % <span class="hljs-number">256</span>] ^ <span class="hljs-built_in">ord</span>(inData[x]))<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> Buf<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Long2Int</span>(<span class="hljs-params">longdata</span>):<br>&nbsp; &nbsp; lo = longdata &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; hi = (longdata &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0x7FFFFFFF</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> hi, lo<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KeygenSN</span>(<span class="hljs-params">LicenseSerial, MachineID</span>):<br>&nbsp; &nbsp; mhi, mlo = Long2Int(MachineID)<br>&nbsp; &nbsp; lhi, llo = Long2Int(LicenseSerial)<br>&nbsp; &nbsp; hi_Key = (mhi - lhi + <span class="hljs-number">0x55667788</span>) &amp; <span class="hljs-number">0x7FFFFFFF</span><br>&nbsp; &nbsp; lo_Key = (mlo + llo + <span class="hljs-number">0x11223344</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; Z0, = struct.unpack(<span class="hljs-string">'&lt;Q'</span>, struct.pack(<span class="hljs-string">'&lt;LL'</span>, lo_Key, hi_Key))<br>&nbsp; &nbsp; Z1 = <span class="hljs-built_in">int</span>(time.time()) ^ <span class="hljs-number">0x56739ACD</span><br>&nbsp; &nbsp; s = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:<span class="hljs-built_in">int</span>(x, <span class="hljs-number">16</span>), <span class="hljs-string">"%x"</span> % Z1)) % <span class="hljs-number">10</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-string">"%dZ%d%d"</span> % (Z0, Z1, s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ParsePost</span>(<span class="hljs-params">buf</span>):<br>&nbsp; &nbsp; Info = struct.unpack(<span class="hljs-string">'&lt;3L2Q4LQ3L'</span>, buf[:<span class="hljs-number">0x40</span>])<br>&nbsp; &nbsp; flag, CRC, UserSerial, LicenseSerial, MachineID, build_type, \<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; Ver_Major, Ver_Minor, Ver_Buildid, Ver_Timestamp, \<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; TimeOffset, Kclass, Random2 = Info<br>&nbsp; &nbsp; SysInfoData = buf[<span class="hljs-number">0x40</span>:]<br>&nbsp; &nbsp; <span class="hljs-keyword">assert</span> CRC == binascii.crc32(buf[<span class="hljs-number">8</span>:]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> Info, SysInfoData<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">DecodeRc4Str</span>(<span class="hljs-params">buf</span>):<br>&nbsp; &nbsp; buf = buf.decode(<span class="hljs-string">'hex'</span>)<br>&nbsp; &nbsp; i, s = ParsePost(rc4(buf[:<span class="hljs-number">8</span>] + RC4_Key2, buf[<span class="hljs-number">8</span>:]))<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> i, s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetJebLicenseKey</span>():<br>&nbsp; &nbsp; licdata = <span class="hljs-string">""</span><br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> licdata:<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;i, MachineID = DecodeRc4Str(licdata)<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;SN = KeygenSN(i[<span class="hljs-number">3</span>], i[<span class="hljs-number">4</span>])<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">print</span> <span class="hljs-string">"JEB License Key:"</span>, SN<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> SN<br><br>GetJebLicenseKey()<br>raw_input(<span class="hljs-string">"Enter to Exit..."</span>)<br><br></code></pre></td></tr></tbody></table></figure><p>快捷键：</p><p>^F6进入方法</p><p>F6跳过方法</p><p>F7从方法中跳出来</p><p>R运行到光标处</p><h3 id="3-Log插桩"><a href="#3-Log插桩" class="headerlink" title="3.Log插桩"></a><strong>3.Log插桩</strong></h3><p>定义：Log插桩指的是反编译APK文件时，在对应的smali文件里，添加相应的smali代码，将程序中的关键信息，以log日志的形式进行输出。</p><p>调用命令</p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali"> 复制代码 隐藏代码<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-static </span>{对应寄存器}, <span class="hljs-class">Lcom/mtools/LogUtils;</span>-&gt;v(<span class="hljs-class">Ljava/lang/Object;</span>)V<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态调试</tag>
      
      <tag>jeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弹窗定位去更新，广告分析与布局优化</title>
    <link href="/2025/03/23/ZJ4/%E5%BC%B9%E7%AA%97%E5%AE%9A%E4%BD%8D%E5%8E%BB%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%B9%BF%E5%91%8A%E5%88%86%E6%9E%90%E4%B8%8E%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%201b0a6f4b4daf80019ef2e0767f50ce0e/"/>
    <url>/2025/03/23/ZJ4/%E5%BC%B9%E7%AA%97%E5%AE%9A%E4%BD%8D%E5%8E%BB%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%B9%BF%E5%91%8A%E5%88%86%E6%9E%90%E4%B8%8E%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%201b0a6f4b4daf80019ef2e0767f50ce0e/</url>
    
    <content type="html"><![CDATA[<h1 id="弹窗定位去更新，广告分析与布局优化"><a href="#弹窗定位去更新，广告分析与布局优化" class="headerlink" title="弹窗定位去更新，广告分析与布局优化"></a>弹窗定位去更新，广告分析与布局优化</h1><h2 id="1-广告类型"><a href="#1-广告类型" class="headerlink" title="1.广告类型"></a><strong>1.广告类型</strong></h2><p>启动广告&nbsp; &nbsp;&nbsp;&nbsp;弹窗&amp;更新广告&nbsp; &nbsp;横幅广告</p><h2 id="2-安卓四大组件"><a href="#2-安卓四大组件" class="headerlink" title="2.安卓四大组件"></a>2.安卓四大组件</h2><table><thead><tr><th><strong>组件</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Activity(活动)</td><td>在应用中的一个Activity可以用来表示一个界面，意思可以理解为“活动”，即一个活动开始，代表 Activity组件启动，活动结束，代表一个Activity的生命周期结束。一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</td></tr><tr><td>Service(服务)</td><td>Service它可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等。</td></tr><tr><td>Broadcast Receiver(广播接收器)</td><td>一个用于接收广播信息，并做出对应处理的组件。比如我们常见的系统广播：通知时区改变、电量低、用户改变了语言选项等。</td></tr><tr><td>Content Provider(内容提供者)</td><td>作为应用程序之间唯一的共享数据的途径，Content Provider主要的功能就是存储并检索数据以及向其他应用程序提供访问数据的接口。Android内置的许多数据都是使用Content Provider形式，供开发者调用的（如视频，音频，图片，通讯录等）</td></tr></tbody></table><h3 id="1-activity的切换"><a href="#1-activity的切换" class="headerlink" title="1.activity的切换"></a><strong>1.activity的切换</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!---声明实现应用部分可视化界面的 Activity，必须使用 AndroidManifest 中的 &lt;activity&gt; 元素表示所有 Activity。系统不会识别和运行任何未进行声明的Activity。-----&gt;<br>&lt;activity  <br>    android:label=<span class="hljs-string">"@string/app_name"</span>  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.MainActivity"</span>  <br>    android:exported=<span class="hljs-string">"true"</span>&gt;  &lt;!--当前Activity是否可以被另一个Application的组件启动：<span class="hljs-literal">true</span>允许被启动；<span class="hljs-literal">false</span>不允许被启动--&gt;<br>    &lt;!---指明这个activity可以以什么样的意图(intent)启动---&gt;<br>    &lt;intent-filter&gt;  <br>        &lt;!--表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动---&gt;<br>        &lt;action  <br>            android:name=<span class="hljs-string">"android.intent.action.MAIN"</span> /&gt;  <br>        &lt;!--这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity--&gt;<br>        &lt;category  <br>            android:name=<span class="hljs-string">"android.intent.category.LAUNCHER"</span> /&gt;  <br>    &lt;/intent-filter&gt;  <br>&lt;/activity&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFirst"</span> /&gt;<br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFifth"</span>  <br>    android:exported=<span class="hljs-string">"true"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFourth"</span>  <br>    android:exported=<span class="hljs-string">"true"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeThird"</span>  <br>    android:exported=<span class="hljs-string">"false"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeSecond"</span>  <br>    android:exported=<span class="hljs-string">"false"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.AdActivity"</span> /&gt;  <span class="hljs-comment">//广告的Activity</span><br></code></pre></td></tr></tbody></table></figure><p>启动广告流程：<br>启动Activity-&gt;广告Activity-&gt;主页Activity</p><p>修改方法：<br>1.修改加载时间<br>2.Acitivity切换定位，修改Intent的Activity类名</p><ul><li><p>修改Intent的Activity类名示例</p><p>  1.在查找过程中我们可以直接排除他自身一个类的调用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231717814.png"></p><p>  2.观察改代码的调用逻辑</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (position) {  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent.setClass(it.getContext(), ChallengeFirst.class);  <br>        it.getContext().startActivity(intent);  <br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent2.setClass(it.getContext(), ChallengeSecond.class);  <br>        it.getContext().startActivity(intent2);  <br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <span class="hljs-comment">//new一个Intent，</span><br>        intent3.setClass(it.getContext(), AdActivity.class);  <span class="hljs-comment">//传入要切换的Acitivity的类名</span><br>        it.getContext().startActivity(intent3);  <span class="hljs-comment">//启动对应的Activity</span><br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent4.setClass(it.getContext(), ChallengeFourth.class);  <br>        it.getContext().startActivity(intent4);  <br>        <span class="hljs-keyword">return</span>; <br>    <span class="hljs-keyword">default</span>:  <br>        <span class="hljs-keyword">return</span>;  <br>}<br></code></pre></td></tr></tbody></table></figure><p>  3.通过观察发现AdActivity.class是插入广告的地方，我们进入该地方将传入的广告Activity切换为我们正常的页面Activity</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231712525.png"></p><p>  4.重新签名安装后就发现我们直接进入到正常的Activity页面。该方法定位到具体的代码地方修改可以避免直接在XMl文件里修改而产生的页面内容无法加载或闪退等情况。</p></li></ul><h3 id="activity切换定位法"><a href="#activity切换定位法" class="headerlink" title="activity切换定位法"></a>activity切换定位法</h3><ul><li><p>修改时间示例</p><p>  1.先打开Activity记录</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713500.png"></p><p>  2.可以查找定位到我们刚刚打开界面或自动弹出界面的Activity</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713929.png"></p><p>  3.点击复制进行查找</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713873.png"></p><p>  4.修改时间来关闭弹窗，我们发现调用时间的是loadAd()方法。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713028.png"></p><ol><li><code>0xbb8</code>是十六进制数值，对应十进制的&nbsp;3000 毫秒（3 秒）。我们可以将其修改为0x0使其读秒数变为0</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713307.png"></p><p>  6.保存安装后就可以发现界面仍会走到，但是因为停留时间太短可以忽略。</p></li></ul><h2 id="3-Activity生命周期"><a href="#3-Activity生命周期" class="headerlink" title="3.Activity生命周期"></a>3.<strong>Activity生命周期</strong></h2><table><thead><tr><th><strong>函数名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>onCreate()</td><td>一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td></tr><tr><td>onStart()</td><td>当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td></tr><tr><td>onResume()</td><td>这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td></tr><tr><td>onPause()</td><td>这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td></tr><tr><td>onStop()</td><td>这个方法是在Activity完全不可见的时候调用的。</td></tr><tr><td>onDestroy()</td><td>这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td></tr><tr><td>onRestart()</td><td>当Activity从停止stop状态恢进入start状态时调用状态。</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714521.png"></p><h2 id="4-弹窗定位-堆栈分析"><a href="#4-弹窗定位-堆栈分析" class="headerlink" title="4.弹窗定位&amp;堆栈分析"></a><strong>4.弹窗定位&amp;堆栈分析</strong></h2><p>修改方法：</p><ul><li><p>1.修改xml中的versiocode</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714745.png"></p></li><li><p>2.Hook弹窗(推荐算法助手开启弹窗定位)</p><p>  （1）启动模块，勾选作用域重启软件</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714395.png"></p><p>  （2）打开算法助手，找到该软件分别打开应用总开关和弹窗定位。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714171.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714172.png"><br>  （3）启动后点击返回就可以实现返回，但在Hook之前会把返回键给劫持掉。相当于去掉弹窗。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715113.png"></p><p>  （4）也可以直接启用的关键词弹窗，直接Hook掉两个弹窗。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715712.png"></p></li><li><p>3.修改dex弹窗代码</p><p>  （1）打开日志找到最新弹窗，可以查看该弹窗的相关内容以及堆栈的调用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715655.png"></p><p>  （2）因为最终要定位到该onCreate方法，我们定位到最精准的地方进行查看。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715361.png"></p><p>  （3）会发现后面调用了show()方法来显示弹窗信息，我们可以将该段代码注释掉或删除。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715201.png"></p></li><li><p>4.抓包修改响应体(也可以路由器拦截)</p><p>  详见后面抓包内容</p></li><li><p>横幅广告</p><p>  1.使用开发助手的布局查看功能，同意其申请权限</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715524.png"></p><p>  2.使用小放大镜选取横幅，查看其相关信息，ad_image是广告的意思</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716804.png"></p><p>  3.进一步我们查看到其id等信息</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716397.png"></p><p>  4.我们可以使用XML查找</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716426.png"></p><p>  5.到定位位置修改其界面的相关信息</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716519.png"></p><p>  6.同样也可以加入xml隐藏代码将该布局隐藏起来</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>android:visibility="gone"<br></code></pre></td></tr></tbody></table></figure><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716656.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓四大组件</tag>
      
      <tag>Activity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Smail</title>
    <link href="/2025/03/22/ZJ3/%E5%88%9D%E8%AF%86smail%201aba6f4b4daf80fb9bbfc0bb1c274e44/"/>
    <url>/2025/03/22/ZJ3/%E5%88%9D%E8%AF%86smail%201aba6f4b4daf80fb9bbfc0bb1c274e44/</url>
    
    <content type="html"><![CDATA[<h1 id="初识smail"><a href="#初识smail" class="headerlink" title="初识smail"></a>初识smail</h1><h1 id="1-什么是JVM、Dalvik、ART"><a href="#1-什么是JVM、Dalvik、ART" class="headerlink" title="1.什么是JVM、Dalvik、ART"></a>1.什么是JVM、Dalvik、ART</h1><p>JVM是JAVA虚拟机，运行JAVA字节码程序</p><p>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex(Dalvik executable)</p><p>Art(Android Runtime)相当于Dalvik的升级版，本质与Dalvik无异</p><ul><li><p><strong>JVM</strong>&nbsp;是 Java 生态的通用运行时，<strong>Dalvik</strong>&nbsp;是 Android 早期的移动优化方案，<strong>ART</strong>&nbsp;是更现代的 Android 运行时，通过预编译和混合模式显著提升性能。三者的演进反映了从跨平台兼容性到移动端极致性能的权衡</p><h3 id="1-JVM（Java-Virtual-Machine）"><a href="#1-JVM（Java-Virtual-Machine）" class="headerlink" title="1. JVM（Java Virtual Machine）"></a><strong>1. JVM（Java Virtual Machine）</strong></h3><ul><li><strong>定义</strong>：JVM 是 Java 平台的核心组件，负责执行&nbsp;<strong>Java 字节码</strong>（<code>.class</code>&nbsp;文件）。</li><li><strong>特点</strong>：<ul><li><strong>跨平台</strong>：遵循“一次编写，到处运行”的理念，通过字节码和 JVM 的适配实现跨平台。</li><li><strong>基于栈的架构</strong>：指令操作基于栈（操作数栈），指令更紧凑但可能执行较慢。</li><li><strong>JIT 编译</strong>（Just-In-Time）：运行时将热点代码（频繁执行的代码）动态编译为本地机器码以提高性能。</li></ul></li><li><strong>应用场景</strong>：传统 Java 应用（如桌面、服务器端程序）。</li></ul><hr><h3 id="2-Dalvik"><a href="#2-Dalvik" class="headerlink" title="2. Dalvik"></a><strong>2. Dalvik</strong></h3><ul><li><strong>定义</strong>：Dalvik 是 Android 早期（5.0 之前）使用的<strong>虚拟机</strong>，专为移动设备优化。</li><li><strong>特点</strong>：<ul><li><strong>基于寄存器架构</strong>：指令直接操作寄存器，执行效率更高（但指令更长）。</li><li><strong>运行 Dex 文件</strong>：将多个&nbsp;<code>.class</code>&nbsp;文件合并优化为单个&nbsp;<code>.dex</code>&nbsp;文件，减少体积和冗余。</li><li><strong>JIT 编译</strong>：在应用运行时动态编译字节码为机器码，但每次启动都需要重新编译。</li><li><strong>多实例设计</strong>：每个 Android 应用运行在独立的 Dalvik 进程中，实现沙盒隔离。</li></ul></li><li><strong>局限性</strong>：JIT 编译导致启动慢、内存占用高，且运行时性能不如预先编译。</li></ul><hr><h3 id="3-ART（Android-Runtime）"><a href="#3-ART（Android-Runtime）" class="headerlink" title="3. ART（Android Runtime）"></a><strong>3. ART（Android Runtime）</strong></h3><ul><li><strong>定义</strong>：ART 是 Android 5.0（Lollipop）及之后取代 Dalvik 的<strong>新一代运行时</strong>。</li><li><strong>核心改进</strong>：<ul><li><strong>AOT 编译</strong>（Ahead-Of-Time）：<strong>安装时</strong>将 Dex 字节码完全编译为本地机器码，直接执行，大幅提升运行速度和能效。</li><li><strong>性能优化</strong>：减少运行时编译开销，CPU 和内存效率更高。</li><li><strong>垃圾回收改进</strong>：减少暂停时间，支持并行处理。</li><li><strong>支持 64 位</strong>：更好地利用现代硬件。</li></ul></li><li><strong>代价</strong>：应用安装时间变长，存储占用增加（需存储编译后的机器码）。</li><li><strong>混合编译（Android 7.0+）</strong>：结合 JIT 和 AOT，安装时仅部分编译，运行时收集热点代码再优化，平衡速度和存储。</li></ul><hr><h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a><strong>对比总结</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>JVM</strong></th><th><strong>Dalvik</strong></th><th><strong>ART</strong></th></tr></thead><tbody><tr><td><strong>架构</strong></td><td>基于栈</td><td>基于寄存器</td><td>基于寄存器（兼容 Dex）</td></tr><tr><td><strong>编译方式</strong></td><td>JIT</td><td>JIT</td><td>AOT + JIT（混合模式）</td></tr><tr><td><strong>文件格式</strong></td><td><code>.class</code>&nbsp;文件</td><td><code>.dex</code>&nbsp;文件</td><td><code>.dex</code>&nbsp;→ 本地机器码</td></tr><tr><td><strong>性能</strong></td><td>适中（跨平台代价）</td><td>启动慢，运行时优化</td><td>启动快，运行高效</td></tr><tr><td><strong>存储占用</strong></td><td>低</td><td>低</td><td>较高（存储预编译机器码）</td></tr><tr><td><strong>适用场景</strong></td><td>桌面/服务器 Java 应用</td><td>早期 Android 设备</td><td>现代 Android 设备（5.0+）</td></tr></tbody></table><hr><h3 id="为什么-Android-不用-JVM？"><a href="#为什么-Android-不用-JVM？" class="headerlink" title="为什么 Android 不用 JVM？"></a><strong>为什么 Android 不用 JVM？</strong></h3><ol><li><strong>专利与授权</strong>：早期 Oracle 对 JVM 专利控制严格，Android 选择绕过。</li><li><strong>移动端优化</strong>：Dalvik/ART 针对低内存、低功耗设备设计（如寄存器架构、Dex 优化）。</li><li><strong>生态隔离</strong>：Android 通过自定义运行时避免与 Java ME 生态冲突。</li></ol></li></ul><h1 id="2-smali及其语法"><a href="#2-smali及其语法" class="headerlink" title="2.smali及其语法"></a><strong>2.smali及其语法</strong></h1><p>smali是Dalvik的寄存器语言，smali代码是dex反编译而来的。（静态修改前提条件）</p><p><a href="https://www.52pojie.cn/thread-1485681-1-1.html">【原木文章】Android改造者之路-02.初探smali功法 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-396966-1-1.html">吾爱破解安卓逆向入门教程（三）-深入Smali文件 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-397858-1-1.html">吾爱破解安卓逆向入门教程（四）-Smali函数分析 - 吾爱破解 - 52pojie.cn</a></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><strong>关键字</strong></h3><table><thead><tr><th><strong>名称</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>.class</td><td>类名</td></tr><tr><td>.super</td><td>父类名，继承的上级类名名称</td></tr><tr><td>.source</td><td>源名</td></tr><tr><td>.field</td><td>变量</td></tr><tr><td>.method</td><td>方法名</td></tr><tr><td>.register</td><td>寄存器</td></tr><tr><td>.end method</td><td>方法名的结束</td></tr><tr><td>public</td><td>公有</td></tr><tr><td>protected</td><td>半公开，只有同一家人才能用</td></tr><tr><td>private</td><td>私有，只能自己使用</td></tr><tr><td>.parameter</td><td>方法参数</td></tr><tr><td>.prologue</td><td>方法开始</td></tr><tr><td>.line xxx</td><td>位于第xxx行</td></tr></tbody></table><h3 id="数据类型对应"><a href="#数据类型对应" class="headerlink" title="数据类型对应"></a>数据类型对应</h3><table><thead><tr><th><strong>smali类型</strong></th><th><strong>java类型</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>V</td><td>void</td><td>无返回值</td></tr><tr><td>Z</td><td>boolean</td><td>布尔值类型，返回0或1</td></tr><tr><td>B</td><td>byte</td><td>字节类型，返回字节</td></tr><tr><td>S</td><td>short</td><td>短整数类型，返回数字</td></tr><tr><td>C</td><td>char</td><td>字符类型，返回字符</td></tr><tr><td>I</td><td>int</td><td>整数类型，返回数字</td></tr><tr><td>J</td><td>long （64位 需要2个寄存器存储）</td><td>长整数类型，返回数字</td></tr><tr><td>F</td><td>float</td><td>单浮点类型，返回数字</td></tr><tr><td>D</td><td>double （64位 需要2个寄存器存储）</td><td>双浮点类型，返回数字</td></tr><tr><td>string</td><td>String</td><td>文本类型，返回字符串</td></tr><tr><td>Lxxx/xxx/xxx</td><td>object</td><td>对象类型，返回对象</td></tr></tbody></table><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><table><thead><tr><th><strong>关键字</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>const</td><td>重写整数属性，真假属性内容，只能是数字类型</td></tr><tr><td>const-string</td><td>重写字符串内容</td></tr><tr><td>const-wide</td><td>重写长整数类型，多用于修改到期时间。</td></tr><tr><td>return</td><td>返回指令</td></tr><tr><td>if-eq</td><td>全称equal(a=b)，比较寄存器ab内容，相同则跳</td></tr><tr><td>if-ne</td><td>全称not equal(a!=b)，ab内容不相同则跳</td></tr><tr><td>if-eqz</td><td>全称equal zero(a=0)，z即是0的标记，a等于0则跳</td></tr><tr><td>if-nez</td><td>全称not equal zero(a!=0)，a不等于0则跳</td></tr><tr><td>if-ge</td><td>全称greater&nbsp;equal(a&gt;=b)，a大于或等于则跳</td></tr><tr><td>if-le</td><td>全称little equal(a&lt;=b)，a小于或等于则跳</td></tr><tr><td>goto</td><td>强制跳到指定位置</td></tr><tr><td>switch</td><td>分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td></tr><tr><td>iget</td><td>获取寄存器数据</td></tr></tbody></table><ul><li><p>if-eqz 另一个是if-nez 这两条指令是相对的</p><p>  (1)if-eqz vA, vB, :cond_**”&nbsp; &nbsp;如果vA等于vB则跳转到:cond_**</p><p>  (2)if-nez vA, vB, :cond_**”&nbsp; &nbsp;如果vA不等于vB则跳转到:cond_**</p></li></ul><p>其余指令可用语法工具查询</p><p>定位方法：搜索弹窗关键字、抓取按钮id</p><ul><li><p>分析示例</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个私有、静态、不可变的方法   方法名</span><br>.method <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> onCreate$lambda-<span class="hljs-number">2</span>(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z <span class="hljs-comment">//(这里面是方法的参数)这里是方法返回值类型，表示布尔值类型，返回假或真</span><br>    .registers <span class="hljs-number">7</span>  <span class="hljs-comment">//寄存器数量</span><br><br>    .line <span class="hljs-number">33</span>  <span class="hljs-comment">//代码所在的行数</span><br>    iget p0, p0, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I  <span class="hljs-comment">//读取p0(第一个参数，参考寄存器知识)中element的值赋值给p0</span><br><br>    const/<span class="hljs-number">4</span> p5, <span class="hljs-number">0x1</span>  <span class="hljs-comment">//p5赋值1</span><br><br>    const/<span class="hljs-number">16</span> v0, <span class="hljs-number">0xa</span> <span class="hljs-comment">//v0赋值10，在16进制里a表示10</span><br><br>    <span class="hljs-keyword">if</span>-ge p0, v0, :cond_15  <span class="hljs-comment">//判断p0的值是否大于或等于v0的值(即p0的值是否大于或等于10)，如果大于或等于则跳转到:cond_15</span><br><br>    .line <span class="hljs-number">34</span>  <span class="hljs-comment">//以下是常见的Toast弹窗代码</span><br>    check-cast p1, Landroid/content/Context; <span class="hljs-comment">//检查Context对象引用</span><br><br>    const-string p0, <span class="hljs-string">"请先获取10个硬币哦"</span> <span class="hljs-comment">//弹窗文本信息，把""里的字符串数据赋值给p0</span><br><br>    check-cast p0, Ljava/lang/CharSequence; <span class="hljs-comment">//检查CharSequence对象引用</span><br><br>    invoke-<span class="hljs-keyword">static</span> {p1, p0, p5}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast; <br>    <span class="hljs-comment">//将弹窗文本、显示时间等信息传给p1</span><br><br>    move-result-object p0  <span class="hljs-comment">//结果传递给p0</span><br><br>    invoke-virtual {p0}, Landroid/widget/Toast;-&gt;show()V  <span class="hljs-comment">//当看到这个Toast;-&gt;show你就应该反应过来这里是弹窗代码</span><br><br>    <span class="hljs-keyword">goto</span> :goto_31  <span class="hljs-comment">//跳转到:goto_31</span><br><br>    :cond_15 <span class="hljs-comment">//跳转的一个地址</span><br><br>    invoke-virtual {p1}, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z  <span class="hljs-comment">//判断isvip方法的返回值是否为真(即结果是否为1)</span><br><br>    move-result p0  <span class="hljs-comment">//结果赋值给p0</span><br><br>    <span class="hljs-keyword">if</span>-eqz p0, :cond_43 <span class="hljs-comment">//如果结果为0则跳转cond_43地址</span><br><br>    const p0, <span class="hljs-number">0x7f0d0018</span>  <span class="hljs-comment">//在arsc中的id索引，这个值可以进行查询</span><br><br>    .line <span class="hljs-number">37</span><br>    invoke-virtual {p2, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V <span class="hljs-comment">//设置图片资源</span><br><br>    const p0, <span class="hljs-number">0x7f0d0008</span><br><br>    .line <span class="hljs-number">38</span><br>    invoke-virtual {p3, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V<br><br>    const p0, <span class="hljs-number">0x7f0d000a</span><br><br>    .line <span class="hljs-number">39</span><br>    invoke-virtual {p4, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V<br><br>    .line <span class="hljs-number">40</span><br>    sget-object p0, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; <br><br>    check-cast p1, Landroid/content/Context;<br><br>    const/<span class="hljs-number">4</span> p2, <span class="hljs-number">0x2</span> <span class="hljs-comment">//p2赋值2</span><br><br>    const-string p3, <span class="hljs-string">"level"</span> <span class="hljs-comment">//sp的索引</span><br><br>    invoke-virtual {p0, p1, p3, p2}, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;Ljava/lang/String;I)V <span class="hljs-comment">//写入数据</span><br><br>    <span class="hljs-keyword">goto</span> :goto_50 <span class="hljs-comment">//跳转地址</span><br><br>    :cond_43<br><br>    check-cast p1, Landroid/content/Context;<br><br>    const-string p0, <span class="hljs-string">"\u8bf7\u5148\u5145\u503c\u5927\u4f1a\u5458\u54e6\uff01"</span> <span class="hljs-comment">//请先充值大会员哦！</span><br><br>    check-cast p0, Ljava/lang/CharSequence;<br><br>    invoke-<span class="hljs-keyword">static</span> {p1, p0, p5}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;<br><br>    move-result-object p0<br><br>    invoke-virtual {p0}, Landroid/widget/Toast;-&gt;show()V<br><br>    :goto_50<br>    <span class="hljs-keyword">return</span> p5  <span class="hljs-comment">//返回p5的值</span><br>.end method <span class="hljs-comment">//方法结束</span><br><br><span class="hljs-comment">//判断是否是大会员的方法</span><br>.method <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-title function_">isvip</span><span class="hljs-params">()</span>Z<br>    .registers <span class="hljs-number">2</span><br><br>    const/<span class="hljs-number">4</span> v0, <span class="hljs-number">0x0</span> <span class="hljs-comment">//v0赋值0</span><br><br>    <span class="hljs-keyword">return</span> v0 <span class="hljs-comment">//返回v0的值</span><br><br>.end method<br><br></code></pre></td></tr></tbody></table></figure><p>  <a href="https://www.52pojie.cn/thread-650395-1-1.html">https://www.52pojie.cn/thread-650395-1-1.html</a></p><p>  <a href="https://www.52pojie.cn/thread-632178-1-1.html">安卓游戏内购破解之滚动的天空 - 吾爱破解 - 52pojie.cn</a></p><p>  <a href="https://www.52pojie.cn/thread-654654-1-1.html">《教我兄弟学Android逆向03 破解第一个Android游戏 》 - 吾爱破解 - 52pojie.cn</a></p></li></ul><h1 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h1><ul><li><p>1.首先安装好核心破解，勾选后重启可以使用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222040498.png"></p></li><li><p>2.安装课程所需Demo</p><p>  <a href="https://pan.baidu.com/s/1cUInoi">https://pan.baidu.com/s/1cUInoi</a>   密码：07p9</p></li><li><p>3.在jadx中查询关键字（有时候反编译过程中会将汉字反编译为unicode编码）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041246.png"></p></li><li><p>修改代码逻辑</p><p>  将判断条件改为强制跳转</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041482.png"></p><p>  跳转后注释掉其判断条件，不管是否为真都执行下列逻辑</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041586.png"></p></li></ul><p><a href="https://www.notion.so/1b0a6f4b4daf8074a46adc1041b616a6?pvs=21">切水果大战</a></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222042093.png"></p>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>smail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识APK文件结构，双开，汉化，基础修改</title>
    <link href="/2025/03/05/ZJ2/%E5%88%9D%E8%AF%86APK%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8F%8C%E5%BC%80%EF%BC%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E5%9F%BA%E7%A1%80%E4%BF%AE%E6%94%B9%201aba6f4b4daf806ab293e060e8f7d41f/"/>
    <url>/2025/03/05/ZJ2/%E5%88%9D%E8%AF%86APK%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8F%8C%E5%BC%80%EF%BC%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E5%9F%BA%E7%A1%80%E4%BF%AE%E6%94%B9%201aba6f4b4daf806ab293e060e8f7d41f/</url>
    
    <content type="html"><![CDATA[<h1 id="初识APK文件结构，双开，汉化，基础修改"><a href="#初识APK文件结构，双开，汉化，基础修改" class="headerlink" title="初识APK文件结构，双开，汉化，基础修改"></a>初识APK文件结构，双开，汉化，基础修改</h1><h1 id="1-APK结构"><a href="#1-APK结构" class="headerlink" title="1.APK结构"></a>1.APK结构</h1><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p><table><thead><tr><th><strong>文件</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>assets目录</td><td>存放APK的静态资源文件，比如视频，音频，图片等</td></tr><tr><td>lib 目录</td><td>armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，其目录下的.so文件是c或c++编译的动态链接库文件</td></tr><tr><td>META-INF目录</td><td>保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证(验证文件是否又被修改)</td></tr><tr><td>res目录</td><td>res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</td></tr><tr><td>AndroidManifest.xml文件</td><td>APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td></tr><tr><td>classes.dex文件</td><td>classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td></tr><tr><td>resources.arsc文件</td><td>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td></tr></tbody></table><ul><li><p>APK 文件是一个压缩文件，可通过解压工具对其进行解压缩以查看其内部结构，但解压缩后的文件不能直接运行，必须重新打包并签名后才能安装到设备上。</p><h3 id="1-文件结构"><a href="#1-文件结构" class="headerlink" title="1. 文件结构"></a><strong>1. 文件结构</strong></h3><ul><li><strong>/META-INF文件夹</strong> ：包含应用程序的签名信息等元数据，如MANIFEST.MF（应用的清单文件）、CERT.SF（包含签名信息，用于校验应用包的完整性）、CERT.RSA（应用的数字证书，存储了证书信息）。</li><li><strong>/res文件夹</strong> ：存储应用程序的各种资源文件，如界面布局（布局文件，如<code>activity_main.xml</code>）、图形图像（放在\drawable- [配置]文件夹中，不同的屏幕密度有不同的目录）、字符串（<code>strings.xml</code>）、样式（<code>styles.xml</code>）、颜色（<code>colors.xml</code>）、动画（如<code>animated.xml</code>）等。</li><li><strong>/assets文件夹</strong> ：存放应用程序的任意资源，如配置文件、图片、视频等，这些文件会在编译时保留在原样，不会被处理。</li><li><strong>/lib文件夹</strong> ：用于存储应用程序的原生代码库（ <code>.so</code>文件），针对不同的处理器架构有不同的文件夹（如<code>/lib/armeabi- v7a/</code>、<code>/lib/arm64- v8a/</code>、<code>/lib/x86/</code>等）。</li><li><strong>/AndroidManifest.xml</strong> ：是应用程序的配置文件，声明了应用程序的组件（如活动、服务、广播接收器、内容提供者）、权限、图标、标签、版本等重要信息。</li><li><strong>/classes.dex文件</strong> ：是应用程序的 Java 或 Kotlin 编译生成的字节码文件，包含应用程序的执行逻辑。</li><li><strong>/resources.arsc文件</strong> ：是 Android 资源文件，包含了应用程序中的各种资源（如字符串、样式、颜色等）的索引信息。</li><li><strong>其他文件</strong> ：如证书文件（如<code>/META-INF/CERT.SF</code> 和<code>/META-INF/CERT.RSA</code>）、应用图标、应用启动屏文件等。</li></ul><h3 id="2-APK的加载过程"><a href="#2-APK的加载过程" class="headerlink" title="2. APK的加载过程"></a><strong>2. APK的加载过程</strong></h3><p>  当用户安装 APK 文件时，Android 系统会解析 APK 文件的结构，提取其中的 AndroidManifest.xml 文件和 resources.arsc 文件，识别出应用程序的组件、资源、权限等信息。之后，系统会将 classes.dex 文件中的字节码加载到内存中，并解释执行，完成应用程序的启动和运行。在运行过程中，系统会根据需要动态加载并使用其他资源文件（如 res 文件夹中的资源文件和 assets 文件夹中的文件）。</p></li></ul><h1 id="2-双开及原理"><a href="#2-双开及原理" class="headerlink" title="2.双开及原理"></a>2.双开及原理</h1><p><a href="https://blog.csdn.net/u014294681/article/details/116270479">【VirtualAPP 双开系列08】如何实现多开 - UID_virtualapp 使用-CSDN博客</a></p><p>双开：简单来说，就是手机同时运行两个或多个相同的应用，例如同时运行两个微信</p><table><thead><tr><th><strong>原理</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>修改包名</td><td>让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td></tr><tr><td>修改Framework</td><td>对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td></tr><tr><td>通过虚拟化技术实现</td><td>虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td></tr><tr><td>以插件机制运行</td><td>利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td></tr></tbody></table><h2 id="（1）通过MT管理器修改包名实现双开"><a href="#（1）通过MT管理器修改包名实现双开" class="headerlink" title="（1）通过MT管理器修改包名实现双开"></a>（1）通过MT管理器修改包名实现双开</h2><p>1.使用MT管理器提取应用的安装包</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/51cc4787-95b3-4e35-a392-92d492744021.png"></p><p>2.找到我们要提取的apk，提取定位</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/image.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221955092.png"></p><p>3.通过APK共存功能修改包名实现apk双开</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957108.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957109.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957110.png"></p><p>4.实现双开</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958621.png"></p><h2 id="（2）通过NP管理器修改包名实现双开"><a href="#（2）通过NP管理器修改包名实现双开" class="headerlink" title="（2）通过NP管理器修改包名实现双开"></a>（2）通过NP管理器修改包名实现双开</h2><p>流程与MT大致相同</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958997.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958998.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958999.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958000.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958001.png"></p><p>打开修改报名后的apk安装</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221959552.png"></p><p>就可以在手机上完成双开。因为修改报名实现双开动了应用的签名信息，如果开发者做了签名校验可能会出现安装后闪退崩溃等情况。</p><h1 id="3-汉化APK"><a href="#3-汉化APK" class="headerlink" title="3.汉化APK"></a>3.汉化APK</h1><p>使用专门的工具对外文版的软件资源进行读取，翻译，修改，回写等一系列处理，使用软件的菜单，对话框，提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化。</p><p>（需要注意，如果要直接装应用就应该先签名安装，看石否有签名校验导致的闪退。）</p><p><strong>基本上字符串都是在arsc里，建议一键汉化，然后再润色。少量没汉化到的字符串参考视频中的方法定位去逐个汉化。</strong></p><p>   <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221959189.png"></p><h2 id="（1）简单的英语字句修改"><a href="#（1）简单的英语字句修改" class="headerlink" title="（1）简单的英语字句修改"></a>（1）简单的英语字句修改</h2><ul><li><p>1.我们在管理器中点击查看</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000125.png"></p></li><li><p>2.利用MT自带的搜索功能</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000631.png"></p></li><li><p>3.点击高级搜索相当使用全局搜索（搜索应用中的全部文件）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000935.png"></p></li><li><p>4.对查询到的结果进行反编译</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001609.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001610.png"></p></li><li><p>5.对内容进行修改后保</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001075.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001076.png"></p></li><li><p>6.发现我们对内容进行了重新签名，应用与最开始安装已经是不一样的了。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222004158.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222002990.png"></p></li><li><p>7.对于卸载提示可以直接关闭处理，在设置里的APK安装检验证关闭就不会再提示</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005497.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005498.png"></p></li><li><p>8.关闭后还会出现签名不一致安装失败的现象。（可以卸载原应用或利用XP的模块核心破解来解决这类问题）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005117.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005118.png"></p></li><li><p>9.完成后我们会发现修改部分已经变为中文模式</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006665.png"></p></li></ul><h2 id="（2）利用开发者助手搜索"><a href="#（2）利用开发者助手搜索" class="headerlink" title="（2）利用开发者助手搜索"></a>（2）利用开发者助手搜索</h2><ul><li><p>1.下载安装后会有一个小图标</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006876.png"></p></li><li><p>2.我们到需要修改的app页面点击图标，点击开始资源分析</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006872.png"></p></li><li><p>3.点击需要查看的亮条部分，点击复制我们需要的文本信息，再回到MT管理器中重复上述步骤即可</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007495.png"></p></li></ul><p>也可以直接再MT浏览器中开通汉化翻译插件</p><p>我们发现第二次签名后软件可以直接安装成功，原因是MT自带的签名信息一致，不会出现签名信息冲突的情况，可以直接覆盖安装</p><h2 id="（3）放在dex文件中"><a href="#（3）放在dex文件中" class="headerlink" title="（3）放在dex文件中"></a>（3）放在dex文件中</h2><ul><li><p>1.选择dex编辑器++</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007447.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007448.png"></p></li><li><p>2.同样来搜索我们修改的字符，搜索类型可以自行选择。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008816.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008817.png"></p></li><li><p>3.很快就能的得到搜索结果</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008163.png"></p></li><li><p>4.修改后保存退出重复上述步骤</p></li></ul><h1 id="4-初识AndroidManifest-xml"><a href="#4-初识AndroidManifest-xml" class="headerlink" title="4.初识AndroidManifest.xml"></a>4.<strong>初识AndroidManifest.xml</strong></h1><p>AndroidManifest.xml文件是整个应用程序的信息描述文件，定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p><table><thead><tr><th><strong>属性</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>versionCode</td><td>版本号，主要用来更新，例如:12</td></tr><tr><td>versionName</td><td>版本名，给用户看的，例如:1.2</td></tr><tr><td>package</td><td>包名，例如：com.zj.52pj.demo</td></tr><tr><td>uses-permission android:name=””</td><td>应用权限，例如：android.permission.INTERNET 代表网络权限</td></tr><tr><td>android:label=”@string/app_name”</td><td>应用名称</td></tr><tr><td>android:icon=”@mipmap/ic_launcher”</td><td>应用图标路径</td></tr><tr><td>android:debuggable=”true”</td><td>应用是否开启debug权限</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>使用NT浏览器修改AndroidManifest.xml文件</p><ul><li><p>1.直接进入查看编译</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008126.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009665.png"></p></li><li><p>2.修改apk图标和名字，在NP管理器中使用通用编辑进行修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009864.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009865.png"></p></li><li><p>3.保存安装发现又出现签名信息不一致因为上边用的MT管理器签名，和现在NP签名不一致，按上述方法解决即可，安装后可以观察到修改成功。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009655.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009656.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009657.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APK结构</tag>
      
      <tag>双开原理</tag>
      
      <tag>APK汉化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/02/hello-world/"/>
    <url>/2025/03/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
