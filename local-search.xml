<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>签名校验</title>
    <link href="/2025/03/23/ZJ6/%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%201b2a6f4b4daf80b3891ddef3c55cac14/"/>
    <url>/2025/03/23/ZJ6/%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%201b2a6f4b4daf80b3891ddef3c55cac14/</url>
    
    <content type="html"><![CDATA[<h1 id="签名校验"><a href="#签名校验" class="headerlink" title="签名校验"></a>签名校验</h1><p><a href="https://www.52pojie.cn/home.php?mod=space&amp;uid=874154&amp;do=thread&amp;view=me&amp;from=space">芽衣的帖子 - 吾爱破解 - 52pojie.cn</a></p><h2 id="1-什么是校验"><a href="#1-什么是校验" class="headerlink" title="1.什么是校验"></a><strong>1.什么是校验</strong></h2><p>在安卓逆向中，<strong>校验</strong>通常指开发者通过代码逻辑对应用的关键信息（如签名、文件完整性、运行环境等）进行验证，确保应用未被篡改或破解。</p><ul><li>常见的校验有<ol><li><p><strong>签名校验（Signature Check）</strong></p><ul><li><p><strong>目的</strong>：验证APK的签名是否与开发者预期一致，防止应用被重新打包或篡改。</p></li><li><p><strong>实现方式</strong>：</p><ul><li>代码中通过<code>PackageManager</code>获取签名信息，与预设的签名哈希值对比。</li><li>若签名不匹配，触发退出或限制功能（如付费验证失效）。</li></ul></li><li><p><strong>示例代码</strong>：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前APK的签名信息</span><br>Signature[] signatures = getPackageManager().getPackageInfo(getPackageName(), PackageManager.GET_SIGNATURES).signatures;<br><span class="hljs-type">String</span> <span class="hljs-variable">currentSignature</span> <span class="hljs-operator">=</span> signatures[<span class="hljs-number">0</span>].toCharsString();<br><span class="hljs-comment">// 对比预设的合法签名</span><br><span class="hljs-keyword">if</span> (!currentSignature.equals(<span class="hljs-string">"预设的签名哈希值"</span>)) {<br>    exit();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong>文件完整性校验</strong></p><ul><li><strong>目的</strong>：验证APK或资源文件（如DEX、SO库）是否被修改。</li><li><strong>实现方式</strong>：<ul><li>计算文件的哈希值（如MD5、SHA-1）并与预设值对比。</li><li>检测关键文件的大小或修改时间是否异常。</li></ul></li></ul></li><li><p><strong>环境校验</strong></p><ul><li><strong>目的</strong>：检测是否运行在模拟器、Root环境或调试模式。</li><li><strong>实现方式</strong>：<ul><li>检查系统属性（如<code>ro.build.tags</code>是否包含<code>test-keys</code>）。</li><li>检测<code>su</code>文件是否存在（Root环境）。</li><li>使用<code>android.os.Debug.isDebuggerConnected()</code>检测调试状态。</li></ul></li></ul></li><li><p><strong>逻辑校验</strong></p><ul><li><strong>目的</strong>：验证关键业务逻辑是否被篡改（如付费验证、加密算法）。</li><li><strong>实现方式</strong>：<ul><li>校验关键函数的返回值是否符合预期。</li><li>使用代码混淆或Native代码（C/C++）隐藏校验逻辑。</li></ul></li></ul></li><li><p><strong>JNI/Native 层校验</strong></p></li></ol><ul><li>许多应用会在 C/C++ 层进行完整性检查，检测 <code>lib.so</code> 是否被修改，或者检查 Java 方法的行为是否被 Hook。</li><li>例如，某些反调试技术会在 <code>lib.so</code> 中实现 <code>ptrace</code> 检测或 <code>frida</code> 检测。</li></ul></li></ul><p>签名校验(最常见)、dexcrc校验、apk完整性校验、路径文件校验等</p><h2 id="2-什么是APK签名"><a href="#2-什么是APK签名" class="headerlink" title="2.什么是APK签名"></a><strong>2.什么是APK签名</strong></h2><p>APK签名是Android系统的安全机制，用于验证应用来源和完整性。</p><p>通过对 Apk 进行签名，开发者可以证明对 Apk 的所有权和控制权，可用于安装和更新其应用。而在 Android 设备上的安装 Apk ，如果是一个没有被签名的 Apk，则会被拒绝安装。在安装 Apk 的时候，软件包管理器也会验证 Apk 是否已经被正确签名，并且通过签名证书和数据摘要验证是否合法没有被篡改。只有确认安全无篡改的情况下，才允许安装在设备上。</p><p>简单来说，APK 的签名主要作用有两个： </p><ol><li>证明 APK 的所有者。</li><li>允许 Android 市场和设备校验 APK 的正确性。</li></ol><h3 id="（1）签名机制"><a href="#（1）签名机制" class="headerlink" title="（1）签名机制"></a><strong>（1）签名机制</strong></h3><p>每个安卓应用在打包时都会使用开发者的私钥进行签名，签名信息存储在 <code>META-INF</code> 目录下，主要包括：</p><ul><li><code>CERT.RSA</code>（公钥证书）</li><li><code>CERT.SF</code>（摘要信息）</li><li><code>MANIFEST.MF</code>（文件哈希值）</li></ul><p>当用户安装 APK 时，Android 系统会：</p><ol><li>使用 <code>CERT.RSA</code> 内的公钥验证 <code>CERT.SF</code> 的真实性。</li><li>通过 <code>CERT.SF</code> 的哈希值检查 <code>MANIFEST.MF</code>，确认文件未被修改。</li><li>通过 <code>MANIFEST.MF</code> 中记录的哈希值，校验 APK 内所有文件是否被篡改。</li></ol><p>如果签名校验失败，APK 将无法安装。</p><h3 id="（2）-Android-目前支持以下四种应用签名方案："><a href="#（2）-Android-目前支持以下四种应用签名方案：" class="headerlink" title="**（2）**Android 目前支持以下四种应用签名方案："></a>**（2）**Android 目前支持以下四种应用签名方案：</h3><ul><li><p><strong>V1 签名（JAR 签名，Android 1.6+）</strong></p><ul><li><p>只校验 <code>META-INF</code> 目录下的签名文件，对 <code>APK</code> 本身的完整性保护较弱，可通过 Zip 方式修改 <code>APK</code> 而不影响签名。</p></li><li><p>V1 签名的机制主要就在 META-INF 目录下的三个文件，MANIFEST.MF，ANDROID.SF，ANDROID.RSA，他们都是 V1 签名的产物。</p><p>  （1）MANIFEST.MF：这是摘要文件。程序遍历Apk包中的所有文件(entry)，对非文件夹非签名文件的文件，逐个用SHA1(安全哈希算法)生成摘要信息，再用Base64进行编码。如果你改变了apk包中的文件，那么在apk安装校验时，改变后的文件摘要信息与MANIFEST.MF的检验信息不同，于是程序就不能成功安装。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232134148.png"></p><p>  （2）ANDROID.SF：这是对摘要的签名文件。对前一步生成的MANIFEST.MF，使用SHA1-RSA算法，用开发者的私钥进行签名。在安装时只能使用公钥才能解密它。解密之后，将它与未加密的摘要信息（即，MANIFEST.MF文件）进行对比，如果相符，则表明内容没有被异常修改。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232134186.png"></p><p>  （3）ANDROID.RSA文件中保存了公钥、所采用的加密算法等信息。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232135216.png"></p></li></ul></li><li><p><strong>V2 签名（APK Signature Scheme v2，Android 7.0+）</strong></p><ul><li>直接对整个 APK 文件进行签名，提高了安全性，防止对 APK 进行 Zip 修改后仍能通过签名校验。</li><li>在某些情况下，直接对apk进行v1签名可以绕过apk的签名校验</li></ul><p>  v2方案会将 APK 文件视为 blob，并对整个文件进行签名检查。对 APK 进行的任何修改（包括对 ZIP 元数据进行的修改）都会使 APK 签名作废。这种形式的 APK 验证不仅速度要快得多，而且能够发现更多种未经授权的修改。  </p></li><li><p><strong>V3 签名（APK Signature Scheme v3，Android 9.0+）</strong></p><ul><li>增加了对 Key Rotation（密钥轮换）的支持，允许开发者更换私钥后仍能保持应用更新。</li></ul></li><li><p><strong>V4 签名（APK Signature Scheme v4，Android 11+）</strong></p><ul><li>用于加速 APK 安装，但不会影响完整性校验。</li></ul></li></ul><h2 id="3-什么是签名校验"><a href="#3-什么是签名校验" class="headerlink" title="3.什么是签名校验"></a><strong>3.什么是签名校验</strong></h2><ul><li><p>基本概念</p><h3 id="1-什么是签名校验？"><a href="#1-什么是签名校验？" class="headerlink" title="1. 什么是签名校验？"></a><strong>1. 什么是签名校验？</strong></h3><p>  签名校验是 Android 应用常见的安全机制，<strong>用于检测应用是否被篡改或重新签名</strong>。它的主要目的是防止二次打包和恶意篡改。</p><p>  当开发者编译和打包 APK 时，APK 会使用开发者的私钥进行签名。Android 系统在安装应用时会验证签名，如果 APK 被篡改，签名就会失效，导致无法安装。</p><p>  但在 <strong>逆向分析</strong> 中，攻击者可以修改 APK 并重新签名，因此应用通常会在运行时 <strong>自检签名</strong>，如果签名不匹配，应用可能会终止运行或执行反调试逻辑。</p><hr><h3 id="2-签名校验的工作原理"><a href="#2-签名校验的工作原理" class="headerlink" title="2. 签名校验的工作原理"></a><strong>2. 签名校验的工作原理</strong></h3><p>  签名校验通常分为 <strong>系统级校验</strong> 和 <strong>应用自校验</strong>：</p><h3 id="（1）系统级签名校验"><a href="#（1）系统级签名校验" class="headerlink" title="（1）系统级签名校验"></a><strong>（1）系统级签名校验</strong></h3><ul><li><strong>作用</strong>：当用户安装 APK 时，Android 系统会自动检查 APK 的签名。</li><li><strong>流程</strong>：<ol><li>提取 APK 的 <code>CERT.RSA</code> 证书。</li><li>使用该证书的公钥验证 <code>CERT.SF</code> 和 <code>MANIFEST.MF</code> 文件，确保 APK 未被篡改。</li><li>如果 APK 签名无效（如篡改了 <code>classes.dex</code> 或 <code>AndroidManifest.xml</code>），则安装失败。</li></ol></li><li><strong>特点</strong>：<ul><li>由 Android 系统执行，不可绕过。</li><li>只有相同签名的应用才能相互更新（应用升级必须使用相同的开发者签名）。</li></ul></li></ul><h3 id="（2）应用自校验（运行时签名校验）"><a href="#（2）应用自校验（运行时签名校验）" class="headerlink" title="（2）应用自校验（运行时签名校验）"></a><strong>（2）应用自校验（运行时签名校验）</strong></h3><ul><li><strong>作用</strong>：在应用运行时检查自身签名，防止被二次打包或篡改后运行。</li><li><strong>实现方式</strong>：<ul><li>获取应用的签名信息，并与预存的合法签名进行比对。</li><li>如果签名不匹配，则终止应用运行或执行反调试逻辑。</li></ul></li></ul><hr><h3 id="3-签名校验的实现方式"><a href="#3-签名校验的实现方式" class="headerlink" title="3. 签名校验的实现方式"></a><strong>3. 签名校验的实现方式</strong></h3><p>  在 Android 代码中，签名校验通常通过以下方式实现：</p><h3 id="（1）获取签名（兼容-Android-7-0-）"><a href="#（1）获取签名（兼容-Android-7-0-）" class="headerlink" title="（1）获取签名（兼容 Android 7.0+）"></a><strong>（1）获取签名（兼容 Android 7.0+）</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br><span class="hljs-keyword">import</span> android.content.pm.PackageInfo;<br><span class="hljs-keyword">import</span> android.content.pm.PackageManager;<br><span class="hljs-keyword">import</span> android.content.pm.Signature;<br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSignature</span><span class="hljs-params">(Context context)</span> {<br>    <span class="hljs-keyword">try</span> {<br>        <span class="hljs-type">PackageManager</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> context.getPackageManager();<br>        <span class="hljs-type">PackageInfo</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> pm.getPackageInfo(context.getPackageName(), PackageManager.GET_SIGNING_CERTIFICATES);<br>        Signature[] signatures = packageInfo.signingInfo.getApkContentsSigners();<br><br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">"SHA-256"</span>);<br>        md.update(signatures[<span class="hljs-number">0</span>].toByteArray());<br>        <span class="hljs-keyword">return</span> bytesToHex(md.digest()); <span class="hljs-comment">// 计算签名哈希值</span><br>    } <span class="hljs-keyword">catch</span> (Exception e) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    }<br>}<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> {<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">hexString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : bytes) {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> Integer.toHexString(<span class="hljs-number">0xff</span> &amp; b);<br>        <span class="hljs-keyword">if</span> (hex.length() == <span class="hljs-number">1</span>) {<br>            hexString.append(<span class="hljs-string">'0'</span>);<br>        }<br>        hexString.append(hex);<br>    }<br>    <span class="hljs-keyword">return</span> hexString.toString();<br>}<br><br></code></pre></td></tr></tbody></table></figure><ul><li>该代码计算应用的 SHA-256 签名哈希值，并与预存的值比对，防止篡改。</li></ul><h3 id="（2）比对签名"><a href="#（2）比对签名" class="headerlink" title="（2）比对签名"></a><strong>（2）比对签名</strong></h3>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br><span class="hljs-type">String</span> <span class="hljs-variable">expectedSignature</span> <span class="hljs-operator">=</span> <span class="hljs-string">"ABC123DEF456..."</span>; <span class="hljs-comment">// 预存的签名哈希</span><br><span class="hljs-type">String</span> <span class="hljs-variable">currentSignature</span> <span class="hljs-operator">=</span> getSignature(context);<br><span class="hljs-keyword">if</span> (!expectedSignature.equals(currentSignature)) {<br>    System.exit(<span class="hljs-number">0</span>); <span class="hljs-comment">// 签名不匹配，退出应用</span><br>}<br><br></code></pre></td></tr></tbody></table></figure><hr><h3 id="4-签名校验的常见绕过方法"><a href="#4-签名校验的常见绕过方法" class="headerlink" title="4. 签名校验的常见绕过方法"></a><strong>4. 签名校验的常见绕过方法</strong></h3><p>  在逆向工程中，攻击者通常会修改 APK 并重新签名，使其能够安装并运行。但如果应用进行了运行时签名校验，则需要使用以下方法绕过：</p><h3 id="（1）Hook-绕过"><a href="#（1）Hook-绕过" class="headerlink" title="（1）Hook 绕过"></a><strong>（1）Hook 绕过</strong></h3><p>  使用 Frida/Xposed Hook <code>getPackageInfo()</code> 方法，伪造签名返回值：</p>  <figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx">javascript<br>复制编辑<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">var</span> pm = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">"android.app.ApplicationPackageManager"</span>);<br>    pm.<span class="hljs-property">getPackageInfo</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">"java.lang.String"</span>, <span class="hljs-string">"int"</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">pkg, flags</span>) {<br>        <span class="hljs-keyword">var</span> info = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getPackageInfo</span>(pkg, flags);<br>        <span class="hljs-keyword">var</span> fakeSignature = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">"android.content.pm.Signature"</span>).$new(<span class="hljs-string">"ABC123DEF456..."</span>); <span class="hljs-comment">// 伪造签名</span><br>        info.<span class="hljs-property">signatures</span>.<span class="hljs-property">value</span> = [fakeSignature];<br>        <span class="hljs-keyword">return</span> info;<br>    };<br>});<br><br></code></pre></td></tr></tbody></table></figure><ul><li>该代码 Hook 了 <code>getPackageInfo()</code> 方法，使其始终返回合法的签名。</li></ul><h3 id="（2）修改-Smali-代码"><a href="#（2）修改-Smali-代码" class="headerlink" title="（2）修改 Smali 代码"></a><strong>（2）修改 Smali 代码</strong></h3><ol><li><p>反编译 APK：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>apktool d app.apk -o app_smali<br></code></pre></td></tr></tbody></table></figure></li><li><p>找到 <code>getSignature()</code> 方法，将签名比对逻辑改为 <code>return true</code>：</p> <figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">smali<br>复制编辑<span class="hljs-built_in"></span><br><span class="hljs-built_in">const-string </span>v0, <span class="hljs-string">"ABC123DEF456..."</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">return </span>v0<br><br>//使校验函数直接返回true或跳过校验步骤<br></code></pre></td></tr></tbody></table></figure></li><li><p>重新打包并签名：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>apktool b app_smali -o new_app.apk<br>zipalign -p 4 new_app.apk new_app_aligned.apk<br>apksigner sign --ks mykeystore.jks --out new_app_signed.apk new_app_aligned.apk<br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="（3）直接修改-APK-签名"><a href="#（3）直接修改-APK-签名" class="headerlink" title="（3）直接修改 APK 签名"></a><strong>（3）直接修改 APK 签名</strong></h3><ul><li><p>使用 <code>zipalign</code> 和 <code>apksigner</code> 重新签名 APK：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>zipalign -p 4 modded.apk modded_aligned.apk<br>apksigner sign --ks mykeystore.jks --out modded_signed.apk modded_aligned.apk<br></code></pre></td></tr></tbody></table></figure></li><li><p>但是如果应用内置了签名校验代码，仍然需要 Hook 相关方法绕过。</p></li></ul><hr><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h3><h3 id="如何增强签名校验？（开发者视角）"><a href="#如何增强签名校验？（开发者视角）" class="headerlink" title="如何增强签名校验？（开发者视角）"></a><strong>如何增强签名校验？</strong>（开发者视角）</h3><ol><li><strong>避免硬编码签名值</strong><ul><li>动态从服务器获取合法签名，或通过代码混淆分散存储。</li></ul></li><li><strong>Native层校验</strong><ul><li>将校验逻辑写入C/C++库（.so文件），并添加反调试、代码混淆等保护。</li></ul></li><li><strong>多维度校验</strong><ul><li>同时校验签名哈希、证书序列号、公钥等信息，而非单一哈希值。</li></ul></li><li><strong>环境检测</strong><ul><li>结合Root检测、模拟器检测，防止校验逻辑在调试环境中运行。</li></ul></li><li><strong>服务端协同</strong><ul><li>关键业务请求时，服务端二次校验客户端的签名信息。</li></ul></li></ol><table><thead><tr><th><strong>签名校验类型</strong></th><th><strong>作用</strong></th><th><strong>绕过方式</strong></th></tr></thead><tbody><tr><td><strong>系统级签名校验</strong></td><td>检查 APK 安装时的合法性</td><td>无法绕过，必须重新签名</td></tr><tr><td><strong>应用自校验</strong></td><td>运行时检测签名是否匹配</td><td>Hook <code>getPackageInfo()</code>、修改 Smali</td></tr></tbody></table><ul><li><strong>签名校验主要用于防止二次打包和破解，但可以通过 Hook 或修改 Smali 绕过。</strong></li><li><strong>更高级的保护手段可能会将签名校验与代码完整性校验、JNI 保护等结合，增加破解难度。</strong></li></ul></li></ul><p>如何判断是否有签名校验？</p><p>不做任何修改，直接签名安装，应用闪退则说明大概率有签名校验</p><p>一般来说，普通的签名校验会导致软件的闪退，黑屏，卡启动页等</p><p>当然，以上都算是比较好的，有一些比较狠的作者，则会直接rm -rf /，把基带都格掉的一键变砖。</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br>kill/killProcess<span class="hljs-comment">-----kill/KillProcess()可以杀死当前应用活动的进程，这一操作将会把所有该进程内的资源（包括线程全部清理掉）.当然，由于ActivityManager时刻监听着进程，一旦发现进程被非正常Kill，它将会试图去重启这个进程。这就是为什么，有时候当我们试图这样去结束掉应用时，发现它又自动重新启动的原因.</span><br><br>system.<span class="hljs-built_in">exit</span><span class="hljs-comment">-----杀死了整个进程，这时候活动所占的资源也会被释放。</span><br><br>finish<span class="hljs-comment">----------仅仅针对Activity，当调用finish()时，只是将活动推向后台，并没有立即释放内存，活动的资源并没有被清理</span><br></code></pre></td></tr></tbody></table></figure><p>在我个人见过最恶心的签名校验中，当属三角校验(低调大佬教的)最烦人。</p><p>所谓三角校验，就是so检测dex，动态加载的dex(在软件运行时会解压释放一段dex文件，检测完后就删除)检测so，dex检测动态加载的dex</p><ul><li><p>示例</p><ol><li>打开算法助手的拦截和防止退出</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232135856.png"></p><ol><li>我们可以在日志中查看到拦截信息</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136105.png"></p><ol><li>查找到闪退的方法</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136056.png"></p><ol><li>查询到闪退的代码将其注释掉，就可以解决闪退等问题。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136193.png"></p><ol><li>我们也可以通过算法助手的签名监听来进行定位</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136656.png"></p><ol><li>通过日志中的签名信息找到其相应的堆栈进行查询</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232136332.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137296.png"></p><ol><li>对堆栈进行查询找到关键方法<code>checkSign</code>进行分析。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137737.png"></p><ol><li>通过获取安装包签名信息的值与<code>SIGNATURE</code>的值进行比对</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137906.png"></p><ol><li>我们可以将判断的逻辑if-nez改为if-eqz，直接把判断取反</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137976.png"></p><ol><li>直接对sign值进行查询</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137127.png"></p><ol><li>将包内的sign替换掉，就可以通过普通签名校验</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232137039.png"></p></li></ul><p>普通获取签名校验代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">SignCheck</span><span class="hljs-params">()</span> {<br>&nbsp; &nbsp; <span class="hljs-type">String</span> <span class="hljs-variable">trueSignMD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">"d0add9987c7c84aeb7198c3ff26ca152"</span>;<br>&nbsp; &nbsp; <span class="hljs-type">String</span> <span class="hljs-variable">nowSignMD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">""</span>;<br>&nbsp; &nbsp; <span class="hljs-keyword">try</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">// 得到签名的MD5</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">PackageInfo</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> getPackageManager().getPackageInfo(getPackageName(),PackageManager.GET_SIGNATURES);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Signature[] signs = packageInfo.signatures;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">signBase64</span> <span class="hljs-operator">=</span> Base64Util.encodeToString(signs[<span class="hljs-number">0</span>].toByteArray());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;nowSignMD5 = MD5Utils.MD5(signBase64);<br>&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> trueSignMD5.equals(nowSignMD5);<br>}<br></code></pre></td></tr></tbody></table></figure><p>系统将应用的签名信息封装在 PackageInfo 中，调用 PackageManager 的 getPackageInfo(String packageName, int flags) 即可获取指定包名的签名信息。</p><h2 id="4-签名校验对抗"><a href="#4-签名校验对抗" class="headerlink" title="4.签名校验对抗"></a><strong>4.签名校验对抗</strong></h2><p>方法一:核心破解插件，不签名安装应用</p><p>方法二:一键过签名工具，例如MT、NP、ARMPro、CNFIX、Modex的去除签名校验功能</p><p>方法三:具体分析签名校验逻辑(手撕签名校验)</p><p>方法四:io重定向–VA&amp;SVC：ptrace+seccomp</p><p><a href="https://bbs.pediy.com/thread-273160.htm">SVC的TraceHook沙箱的实现&amp;无痕Hook实现思路</a></p><p>方法五:去作者家严刑拷打拿到.jks文件和密码</p><ul><li><p>jks文件了</p><p>  <strong><code>.jks</code> 文件</strong>是 <strong>Java KeyStore</strong> 文件，主要用于存储加密密钥、证书和私钥，通常用于 SSL/TLS 证书管理。Java 应用程序使用 <code>.jks</code> 文件来确保安全的通信。</p><h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a><strong>常见用途</strong></h3><ol><li><strong>SSL/TLS 证书管理</strong>（HTTPS 服务器、客户端身份验证）</li><li><strong>Java 应用安全</strong>（如 Spring Boot、Tomcat）</li><li><strong>Android 签名</strong>（用于 APK 签名）</li></ol><h3 id="常见命令（keytool-工具）"><a href="#常见命令（keytool-工具）" class="headerlink" title="常见命令（keytool 工具）"></a><strong>常见命令（keytool 工具）</strong></h3><p>  <code>keytool</code> 是 Java 自带的密钥管理工具，可用于创建和管理 <code>.jks</code> 文件。</p><h3 id="1-生成新的-JKS-文件"><a href="#1-生成新的-JKS-文件" class="headerlink" title="1. 生成新的 JKS 文件"></a><strong>1. 生成新的 JKS 文件</strong></h3>  <figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">keytool</span> -genkey -alias myalias -keyalg RSA -keystore mykeystore.jks -validity <span class="hljs-number">3650</span> -storepass mypassword<br><br></code></pre></td></tr></tbody></table></figure><ul><li><code>alias myalias</code>：指定别名</li><li><code>keyalg RSA</code>：密钥算法</li><li><code>keystore mykeystore.jks</code>：JKS 文件名</li><li><code>validity 3650</code>：证书有效期（天）</li><li><code>storepass mypassword</code>：密钥库密码</li></ul><h3 id="2-查看-JKS-文件内容"><a href="#2-查看-JKS-文件内容" class="headerlink" title="2. 查看 JKS 文件内容"></a><strong>2. 查看 JKS 文件内容</strong></h3>  <figure class="highlight lsl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lsl">keytool -<span class="hljs-type">list</span> -keystore mykeystore.jks -storepass mypassword<br><br></code></pre></td></tr></tbody></table></figure><h3 id="3-导入证书到-JKS"><a href="#3-导入证书到-JKS" class="headerlink" title="3. 导入证书到 JKS"></a><strong>3. 导入证书到 JKS</strong></h3>  <figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">keytool -import -trustcacerts -<span class="hljs-built_in">alias</span> mycert -<span class="hljs-built_in">file</span> mycert.crt -keystore mykeystore.jks<br><br></code></pre></td></tr></tbody></table></figure><h3 id="4-导出证书"><a href="#4-导出证书" class="headerlink" title="4. 导出证书"></a><strong>4. 导出证书</strong></h3>  <figure class="highlight delphi"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">keytool -<span class="hljs-keyword">export</span> -<span class="hljs-keyword">alias</span> myalias -<span class="hljs-keyword">file</span> mycert.crt -keystore mykeystore.jks<br><br></code></pre></td></tr></tbody></table></figure><h3 id="5-转换-JKS-到-PKCS12"><a href="#5-转换-JKS-到-PKCS12" class="headerlink" title="5. 转换 JKS 到 PKCS12"></a><strong>5. 转换 JKS 到 PKCS12</strong></h3>  <figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">keytool -importkeystore -srckeystore mykeystore<span class="hljs-selector-class">.jks</span> -destkeystore mykeystore<span class="hljs-selector-class">.p12</span> -deststoretype PKCS12<br><br></code></pre></td></tr></tbody></table></figure><h3 id="JKS-在-Android-中的应用"><a href="#JKS-在-Android-中的应用" class="headerlink" title="JKS 在 Android 中的应用"></a><strong>JKS 在 Android 中的应用</strong></h3><p>  Android 应用使用 JKS 文件（通常是 <code>.keystore</code> 格式）来签名 APK。例如：</p>  <figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">arsigner -verbose -keystore <span class="hljs-keyword">my</span>-release-key.jks <span class="hljs-keyword">my</span>-app.apk myalias<br><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="5-手动实现PM代-过-滤-理"><a href="#5-手动实现PM代-过-滤-理" class="headerlink" title="5.手动实现PM代{过}{滤}理"></a><strong>5.手动实现PM代{过}{滤}理</strong></h2><h3 id="1-什么是PMS"><a href="#1-什么是PMS" class="headerlink" title="1.什么是PMS"></a><strong>1.什么是PMS</strong></h3><p>思路源自：<a href="https://github.com/fourbrother/HookPmsSignature">Android中Hook 应用签名方法</a></p><p>PackageManagerService（简称PMS），是Android系统核心服务之一，处理包管理相关的工作，常见的比如安装、卸载应用等。</p><h3 id="2-实现方法以及原理解析"><a href="#2-实现方法以及原理解析" class="headerlink" title="2.实现方法以及原理解析"></a><strong>2.实现方法以及原理解析</strong></h3><p>HOOK PMS代码:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zj.hookpms;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.pm.PackageManager;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceManagerWraper</span> {<br><br>&nbsp; &nbsp; <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ZJ</span> <span class="hljs-operator">=</span> <span class="hljs-string">"ZJ595"</span>;<br><br>&nbsp; &nbsp; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPMS</span><span class="hljs-params">(Context context, String signed, String appPkgName, <span class="hljs-type">int</span> hashCode)</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">try</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 获取全局的ActivityThread对象</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Class&lt;?&gt; activityThreadClass = Class.forName(<span class="hljs-string">"android.app.ActivityThread"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Method</span> <span class="hljs-variable">currentActivityThreadMethod</span> <span class="hljs-operator">=</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;activityThreadClass.getDeclaredMethod(<span class="hljs-string">"currentActivityThread"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Object</span> <span class="hljs-variable">currentActivityThread</span> <span class="hljs-operator">=</span> currentActivityThreadMethod.invoke(<span class="hljs-literal">null</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 获取ActivityThread里面原始的sPackageManager</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Field</span> <span class="hljs-variable">sPackageManagerField</span> <span class="hljs-operator">=</span> activityThreadClass.getDeclaredField(<span class="hljs-string">"sPackageManager"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sPackageManagerField.setAccessible(<span class="hljs-literal">true</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Object</span> <span class="hljs-variable">sPackageManager</span> <span class="hljs-operator">=</span> sPackageManagerField.get(currentActivityThread);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 准备好代{过}{滤}理对象, 用来替换原始的对象</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Class&lt;?&gt; iPackageManagerInterface = Class.forName(<span class="hljs-string">"android.content.pm.IPackageManager"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;iPackageManagerInterface.getClassLoader(),<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]{iPackageManagerInterface},<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">new</span> <span class="hljs-title class_">PmsHookBinderInvocationHandler</span>(sPackageManager, signed, appPkgName, <span class="hljs-number">0</span>));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 1. 替换掉ActivityThread里面的 sPackageManager 字段</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sPackageManagerField.set(currentActivityThread, proxy);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 2. 替换 ApplicationPackageManager里面的 mPM对象</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">PackageManager</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> context.getPackageManager();<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-type">Field</span> <span class="hljs-variable">mPmField</span> <span class="hljs-operator">=</span> pm.getClass().getDeclaredField(<span class="hljs-string">"mPM"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;mPmField.setAccessible(<span class="hljs-literal">true</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;mPmField.set(pm, proxy);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;} <span class="hljs-keyword">catch</span> (Exception e) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Log.d(ZJ, <span class="hljs-string">"hook pms error:"</span> + Log.getStackTraceString(e));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp; }<br><br>&nbsp; &nbsp; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookPMS</span><span class="hljs-params">(Context context)</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">String</span> <span class="hljs-variable">Sign</span> <span class="hljs-operator">=</span> <span class="hljs-string">"原包的签名信息"</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;hookPMS(context, Sign, <span class="hljs-string">"com.zj.hookpms"</span>, <span class="hljs-number">0</span>);<br>&nbsp; &nbsp; }<br>}<br></code></pre></td></tr></tbody></table></figure><p>ActivityThread的静态变量sPackageManager</p><p>ApplicationPackageManager对象里面的mPM变量</p><ul><li><p>获取原包签名信息</p><ol><li>使用MT管理器，点击签名信息并查看原始数据</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232138337.png"></p><ol><li>这一串内容均为其那名信息，将内容全选复制为base64并与原包签名信息进行替换</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232139337.png"></p><p>  3.替换信息后，调用代码</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232139942.png"></p></li></ul><p>该方法较为过时，简单了解一下即可。</p><h2 id="6-IO重定向"><a href="#6-IO重定向" class="headerlink" title="6.IO重定向"></a><strong>6.IO重定向</strong></h2><ul><li><p>什么是IO重定向</p><pre><code class="hljs">IO 重定向（Input/Output Redirection）是指在计算机系统中，将标准输入（stdin）、标准输出（stdout）或标准错误输出（stderr）重定向到不同的文件或设备，而不是默认的终端（屏幕和键盘）。这是 Unix/Linux 和 Windows 命令行中常见的操作，主要用于控制程序的输入和输出。在 **Android 逆向** 中，**IO 重定向**（Input/Output Redirection）主要用于劫持、修改或捕获应用程序的标准输入、标准输出（stdout）和标准错误（stderr）。它在分析、调试和 Hook 过程中非常重要。</code></pre><hr><h2 id="1-IO-重定向在-Android-逆向中的作用"><a href="#1-IO-重定向在-Android-逆向中的作用" class="headerlink" title="1. IO 重定向在 Android 逆向中的作用"></a><strong>1. IO 重定向在 Android 逆向中的作用</strong></h2><p>  在 Android 逆向过程中，我们通常希望获取应用程序的 <strong>调试日志</strong>、<strong>标准输出</strong>、<strong>标准错误</strong>，或者将输入重定向到目标进程。由于 Android 应用通常运行在 <strong>Linux 环境（基于 Android 内核）</strong> 下，它也遵循 Linux 的 IO 机制，因此可以使用 <strong>重定向技术</strong> 进行信息捕获或干预。</p><hr><h2 id="2-IO-重定向的常见用途"><a href="#2-IO-重定向的常见用途" class="headerlink" title="2. IO 重定向的常见用途"></a><strong>2. IO 重定向的常见用途</strong></h2><h3 id="（1）捕获应用标准输出"><a href="#（1）捕获应用标准输出" class="headerlink" title="（1）捕获应用标准输出"></a><strong>（1）捕获应用标准输出</strong></h3><p>  有些 Android 应用会在 <code>stdout</code> 或 <code>stderr</code> 中打印调试信息，例如：</p>  <figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">c<br>复制编辑<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Secret Key: %s\n"</span>, secretKey);<br><br></code></pre></td></tr></tbody></table></figure><p>  但这些信息不会直接显示在 Logcat 中，而是需要重定向输出才能捕获。</p><h3 id="方法1：使用-strace-或-logcat"><a href="#方法1：使用-strace-或-logcat" class="headerlink" title="方法1：使用 strace 或 logcat"></a><strong>方法1：使用 strace 或 logcat</strong></h3><ul><li><p><strong>使用 <code>strace</code> 监视 IO 调用</strong></p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>strace -p &lt;PID&gt; -e write<br><br></code></pre></td></tr></tbody></table></figure><p>  这可以监视 <code>write</code> 系统调用，捕获应用写入 <code>stdout</code> 和 <code>stderr</code> 的数据。</p></li><li><p><strong>使用 <code>logcat</code> 捕获日志</strong></p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>logcat -s <span class="hljs-string">"AppTag"</span><br><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="方法2：使用-run-as-重定向"><a href="#方法2：使用-run-as-重定向" class="headerlink" title="方法2：使用 run-as 重定向"></a><strong>方法2：使用 <code>run-as</code> 重定向</strong></h3><p>  如果目标应用是 <code>debuggable</code>，可以使用 <code>run-as</code> 切换到应用的 UID 并重定向 IO：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>run-as com.example.app sh -c <span class="hljs-string">'exec &gt; /data/data/com.example.app/output.log 2&gt;&amp;1'</span><br><br></code></pre></td></tr></tbody></table></figure><p>  这会将应用的 <code>stdout</code> 和 <code>stderr</code> 重定向到 <code>output.log</code>，然后可以用 <code>adb pull</code> 拉取日志：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br>adb pull /data/data/com.example.app/output.log .<br><br></code></pre></td></tr></tbody></table></figure><hr><h3 id="（2）Hook-IO-函数"><a href="#（2）Hook-IO-函数" class="headerlink" title="（2）Hook IO 函数"></a><strong>（2）Hook IO 函数</strong></h3><p>  <strong>重定向 <code>open</code>、<code>read</code>、<code>write</code> 等系统调用</strong>，可以在动态调试中捕获关键数据，例如应用读写的文件、网络数据等。</p><h3 id="方法1：使用-Frida-Hook-IO"><a href="#方法1：使用-Frida-Hook-IO" class="headerlink" title="方法1：使用 Frida Hook IO"></a><strong>方法1：使用 Frida Hook IO</strong></h3>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">python<br>复制编辑<br><span class="hljs-keyword">import</span> frida<br><br>script_code = <span class="hljs-string">"""</span><br><span class="hljs-string">Interceptor.attach(Module.findExportByName(null, 'write'), {</span><br><span class="hljs-string">    onEnter: function(args) {</span><br><span class="hljs-string">        send("Writing data: " + Memory.readUtf8String(args[1]));</span><br><span class="hljs-string">    }</span><br><span class="hljs-string">});</span><br><span class="hljs-string">"""</span><br>device = frida.get_usb_device()<br>session = device.attach(<span class="hljs-string">"com.target.app"</span>)<br>script = session.create_script(script_code)<br>script.on(<span class="hljs-string">"message"</span>, <span class="hljs-keyword">lambda</span> msg, data: <span class="hljs-built_in">print</span>(msg))<br>script.load()<br><br></code></pre></td></tr></tbody></table></figure><p>  <strong>作用：</strong></p><ul><li>Hook <code>write()</code> 系统调用，劫持目标进程的输出内容（如日志、密钥等）。</li><li>适用于需要 <strong>监视应用输出数据</strong> 的场景。</li></ul><hr><h3 id="（3）修改应用输入"><a href="#（3）修改应用输入" class="headerlink" title="（3）修改应用输入"></a><strong>（3）修改应用输入</strong></h3><p>  在 Android 逆向中，某些应用会通过 <code>stdin</code> 读取数据，比如命令行工具或者 Shell 脚本。可以通过 <strong>输入重定向</strong> 伪造数据输入，例如：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制编辑<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"fake_password"</span> | ./target_binary<br><br></code></pre></td></tr></tbody></table></figure><p>  或者 Hook <code>read()</code> 函数，修改 <code>stdin</code> 输入：</p>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">python<br>复制编辑<br>Interceptor.attach(Module.findExportByName(null, <span class="hljs-string">'read'</span>), {<br>    onEnter: function(args) {<br>        args[<span class="hljs-number">1</span>].writeUtf8String(<span class="hljs-string">"hacked_input"</span>);<br>    }<br>});<br><br></code></pre></td></tr></tbody></table></figure><hr><h3 id="（4）劫持-Java-层-IO"><a href="#（4）劫持-Java-层-IO" class="headerlink" title="（4）劫持 Java 层 IO"></a><strong>（4）劫持 Java 层 IO</strong></h3><p>  在 Java 层，<code>System.out.print()</code> 默认会输出到 <code>stdout</code>，可以通过 Hook <code>System.out</code> 来修改或捕获：</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">java<br>复制编辑<br>System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStream</span>() {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span> {<br>        <span class="hljs-comment">// 劫持 IO，改写输出</span><br>    }<br>}));<br><br></code></pre></td></tr></tbody></table></figure><p>  这在 Hook Java 方法时可以用于修改应用日志或隐藏关键输出。</p><hr><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a><strong>3. 总结</strong></h2><table><thead><tr><th><strong>用途</strong></th><th><strong>技术</strong></th></tr></thead><tbody><tr><td><strong>捕获 <code>stdout</code>、<code>stderr</code></strong></td><td><code>strace</code>、<code>logcat</code>、<code>run-as</code></td></tr><tr><td><strong>Hook IO 函数</strong></td><td><code>Frida</code>、<code>Xposed</code>、<code>LD_PRELOAD</code></td></tr><tr><td><strong>修改输入</strong></td><td><code>stdin</code> 重定向、Hook <code>read()</code></td></tr><tr><td><strong>Java 层 IO 劫持</strong></td><td><code>System.setOut()</code></td></tr></tbody></table><p>  <strong>IO 重定向在 Android 逆向中的核心作用：</strong></p><ol><li><strong>获取应用未公开的调试信息</strong></li><li><strong>监视或篡改应用输入</strong></li><li><strong>分析目标应用的日志、密钥或敏感数据</strong></li><li><strong>结合 Frida/Xposed 进行 Hook，提高调试能力</strong></li></ol></li></ul><p>例：在读A文件的时候指向B文件</p><p><a href="https://github.com/virjarRatel/ratel-core">平头哥的核心代码</a></p><p><a href="https://github.com/asLody/VirtualApp">Virtual Engine for Android(Support 12.0 in business version)</a></p><p>IO重定向可以干嘛？</p><p>1，可以让文件只读，不可写</p><p>2，禁止访问文件</p><p>3，路径替换</p><p>具体实现：</p><p>过签名检测(读取原包)</p><p>风控对抗(例:一个文件记录App启动的次数)</p><p>过Root检测，Xposed检测(文件不可取)</p><ul><li><p>新的API签名校验与普通签名校验Ture方法一致</p><ol><li>分析API的签名校验算法，发现它newsign定位好签名之后，将新的API与原来的进行比对，仍可以采用普通校验的方式将新的API替换，ture处理掉。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232139287.png">  </p></li><li><p>CRC校验</p><ol><li>观察校验部分的代码发现，解压后获取dex文件，获取它的crc的一个值。而我们每做一次修改，dex文件中的值都会发生对应的改变，而它的值需要与j进行一个对比，我们顺着思路查看j在哪里.</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140551.png"></p><ol><li>Ctrl+F顺着j进行查找，发现是通过一个方法传入一个值</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140993.png"></p><ol><li>我们顺着观察发现string类里面有crc的值</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140610.png"></p><ol><li>跳转查看发现每一次修改都会使数值发生转变，不可能每一次都对数值进行修改，写死会导致校验失败。需要运用io重定向</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140613.png"></p><ol><li>代码已经写在so文件中，现在缺少一个调用。使用smail代码。它是获取上下文的文本，然后传入到hook方法中，hook方法是一个native方法。</li><li>首先打开编辑器搜索到checkSign方法后，打开导航找到crc，查看他的调用。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140229.png"></p><ol><li>因为要进行重定向，要在校验之前完成这部分工作才可以读到原包。在方法开头将我们的调用代码放入进去。</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232140491.png"></p><ol><li>在软件数据目录下（数据目录1）新建一个files文件，将没有经过修改的原包复制在该文件中，重命名为base.apk，这样才可以实现一个io的重定向读取原包的信息。（具体原因在代码部分解释）</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232141891.png"></p><ol><li>以上就是一个简单的io重定向的实现（crc读取dex的一个crc值，而hash读取整个APK一个hash的一个值）</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232141186.png"></p></li></ul><p>io重定向原码，相当于hook的open，openat等几个函数（用于读取底层文件函数）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs java">using namespace std;<br>string packname;<br>string origpath;<br>string fakepath;<br><br><span class="hljs-type">int</span> (*orig_open)(const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);<br><span class="hljs-type">int</span> (*orig_openat)(<span class="hljs-type">int</span>,const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);<br>FILE *(*orig_fopen)(const <span class="hljs-type">char</span> *filename, const <span class="hljs-type">char</span> *mode);<br><span class="hljs-keyword">static</span> <span class="hljs-title function_">long</span> <span class="hljs-params">(*orig_syscall)</span><span class="hljs-params">(<span class="hljs-type">long</span> number, ...)</span>;<br><span class="hljs-type">int</span> (*orig__NR_openat)(<span class="hljs-type">int</span>,const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...);<br><br><span class="hljs-keyword">void</span>* (*orig_dlopen_CI)(const <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag);<br><span class="hljs-keyword">void</span>* (*orig_dlopen_CIV)(const <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag, const <span class="hljs-keyword">void</span> *extinfo);<br><span class="hljs-keyword">void</span>* (*orig_dlopen_CIVV)(const <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> flags, const <span class="hljs-keyword">void</span> *extinfo, <span class="hljs-keyword">void</span> *caller_addr);<br><br><span class="hljs-keyword">static</span> inline bool <span class="hljs-title function_">needs_mode</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> ((flags &amp; O_CREAT) == O_CREAT) || ((flags &amp; O_TMPFILE) == O_TMPFILE);<br>}<br>bool <span class="hljs-title function_">startsWith</span><span class="hljs-params">(string str, string sub)</span>{<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> str.find(sub)==<span class="hljs-number">0</span>;<br>}<br><br>bool <span class="hljs-title function_">endsWith</span><span class="hljs-params">(string s,string sub)</span>{<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> s.rfind(sub)==(s.length()-sub.length());<br>}<br>bool <span class="hljs-title function_">isOrigAPK</span><span class="hljs-params">(string&nbsp;&nbsp;path)</span>{<br><br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(path==origpath){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br><span class="hljs-comment">//该函数的功能是在打开一个文件时进行拦截，并在满足特定条件时将文件路径替换为另一个路径</span><br><br><span class="hljs-comment">//fake_open 函数有三个参数：</span><br><span class="hljs-comment">//pathname：一个字符串，表示要打开的文件的路径。</span><br><span class="hljs-comment">//flags：一个整数，表示打开文件的方式，例如只读、只写、读写等。</span><br><span class="hljs-comment">//mode（可选参数）：一个整数，表示打开文件时应用的权限模式。</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fake_open</span><span class="hljs-params">(const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">mode_t</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> (needs_mode(flags)) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_list args;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_start(args, flags);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;mode = static_cast&lt;mode_t&gt;(va_arg(args, <span class="hljs-type">int</span>));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_end(args);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-comment">//LOGI("open,&nbsp;&nbsp;path: %s, flags: %d, mode: %d",pathname, flags ,mode);</span><br>&nbsp; &nbsp; string cpp_path= pathname;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(isOrigAPK(cpp_path)){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;LOGI(<span class="hljs-string">"libc_open, redirect: %s, ---&gt;: %s"</span>,pathname, fakepath.data());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> orig_open(<span class="hljs-string">"/data/user/0/com.zj.wuaipojie/files/base.apk"</span>, flags, mode);<br>    }<span class="hljs-comment">//这里已经将我们io后的路径写死，也是我们实例中新建对应文件的原因。</span><br>    &nbsp; <span class="hljs-keyword">return</span>&nbsp;&nbsp;orig_open(pathname, flags, mode);<br><br>}<br><br><span class="hljs-comment">//该函数的功能是在打开一个文件时进行拦截，并在满足特定条件时将文件路径替换为另一个路径</span><br><br><span class="hljs-comment">//fake_openat 函数有四个参数：</span><br><span class="hljs-comment">//fd：一个整数，表示要打开的文件的文件描述符。</span><br><span class="hljs-comment">//pathname：一个字符串，表示要打开的文件的路径。</span><br><span class="hljs-comment">//flags：一个整数，表示打开文件的方式，例如只读、只写、读写等。</span><br><span class="hljs-comment">//mode（可选参数）：一个整数，表示打开文件时应用的权限模式。</span><br><span class="hljs-comment">//openat 函数的作用类似于 open 函数，但是它使用文件描述符来指定文件路径，而不是使用文件路径本身。这样，就可以在打开文件时使用相对路径，而不必提供完整的文件路径。</span><br><span class="hljs-comment">//例如，如果要打开相对于当前目录的文件，可以使用 openat 函数，而不是 open 函数，因为 open 函数只能使用绝对路径。</span><br><span class="hljs-comment">//</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fake_openat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, const <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">mode_t</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> (needs_mode(flags)) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_list args;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_start(args, flags);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;mode = static_cast&lt;mode_t&gt;(va_arg(args, <span class="hljs-type">int</span>));<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;va_end(args);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; LOGI(<span class="hljs-string">"openat, fd: %d, path: %s, flags: %d, mode: %d"</span>,fd ,pathname, flags ,mode);<br>&nbsp; &nbsp; string cpp_path= pathname;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(isOrigAPK(cpp_path)){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;LOGI(<span class="hljs-string">"libc_openat, redirect: %s, ---&gt;: %s"</span>,pathname, fakepath.data());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span>&nbsp;&nbsp;orig_openat(fd,fakepath.data(), flags, mode);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> orig_openat(fd,pathname, flags, mode);<br><br>}<br>FILE *fake_fopen(const <span class="hljs-type">char</span> *filename, const <span class="hljs-type">char</span> *mode) {<br>&nbsp; &nbsp; string cpp_path= filename;<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(isOrigAPK(cpp_path)){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span>&nbsp;&nbsp;orig_fopen(fakepath.data(), mode);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> orig_fopen(filename, mode);<br>}<br><span class="hljs-comment">//该函数的功能是在执行系统调用时进行拦截，并在满足特定条件时修改系统调用的参数。</span><br><span class="hljs-comment">//syscall 函数是一个系统调用，是程序访问内核功能的方法之一。使用 syscall 函数可以调用大量的系统调用，它们用于实现操作系统的各种功能，例如打开文件、创建进程、分配内存等。</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">fake_syscall</span><span class="hljs-params">(<span class="hljs-type">long</span> number, ...)</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">void</span> *arg[<span class="hljs-number">7</span>];<br>&nbsp; &nbsp; va_list list;<br><br>&nbsp; &nbsp; va_start(list, number);<br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;arg[i] = va_arg(list, <span class="hljs-keyword">void</span> *);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; va_end(list);<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> (number == __NR_openat){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;const <span class="hljs-type">char</span> *cpp_path = static_cast&lt;const <span class="hljs-type">char</span> *&gt;(arg[<span class="hljs-number">1</span>]);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;LOGI(<span class="hljs-string">"syscall __NR_openat, fd: %d, path: %s, flags: %d, mode: %d"</span>,arg[<span class="hljs-number">0</span>] ,arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">2</span>], arg[<span class="hljs-number">3</span>]);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">if</span> (isOrigAPK(cpp_path)){<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LOGI(<span class="hljs-string">"syscall __NR_openat, redirect: %s, ---&gt;: %s"</span>,arg[<span class="hljs-number">1</span>], fakepath.data());<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">return</span> orig_syscall(number,arg[<span class="hljs-number">0</span>], fakepath.data() ,arg[<span class="hljs-number">2</span>],arg[<span class="hljs-number">3</span>]);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> orig_syscall(number, arg[<span class="hljs-number">0</span>], arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">2</span>], arg[<span class="hljs-number">3</span>], arg[<span class="hljs-number">4</span>], arg[<span class="hljs-number">5</span>], arg[<span class="hljs-number">6</span>]);<br><br>}<br><br><span class="hljs-comment">//函数的功能是获取当前应用的包名、APK 文件路径以及库文件路径，并将这些信息保存在全局变量中</span><br><span class="hljs-comment">//函数调用 GetObjectClass 和 GetMethodID 函数来获取 context 对象的类型以及 getPackageName 方法的 ID。然后，函数调用 CallObjectMethod 函数来调用 getPackageName 方法，获取当前应用的包名。最后，函数使用 GetStringUTFChars 函数将包名转换为 C 字符串，并将包名保存在 packname 全局变量中</span><br><span class="hljs-comment">//接着，函数使用 fakepath 全局变量保存了 /data/user/0/&lt;packname&gt;/files/base.apk 这样的路径，其中 &lt;packname&gt; 是当前应用的包名。</span><br><span class="hljs-comment">//然后，函数再次调用 GetObjectClass 和 GetMethodID 函数来获取 context 对象的类型以及 getApplicationInfo 方法的 ID。然后，函数调用 CallObjectMethod 函数来调用 getApplicationInfo 方法，获取当前应用的 ApplicationInfo 对象。</span><br><span class="hljs-comment">//它先调用 GetObjectClass 函数获取 ApplicationInfo 对象的类型，然后调用 GetFieldID 函数获取 sourceDir 字段的 ID。接着，函数使用 GetObjectField 函数获取 sourceDir 字段的值，并使用 GetStringUTFChars 函数将其转换为 C 字符串。最后，函数将 C 字符串保存在 origpath 全局变量中，表示当前应用的 APK 文件路径。</span><br><span class="hljs-comment">//最后，函数使用 GetFieldID 和 GetObjectField 函数获取 nativeLibraryDir 字段的值，并使用 GetStringUTFChars 函数将其转换为 C 字符串。函数最后调用 LOGI 函数打印库文件路径，但是并没有将其保存在全局变量中。</span><br><br>extern <span class="hljs-string">"C"</span> JNIEXPORT <span class="hljs-keyword">void</span> JNICALL<br><span class="hljs-title function_">Java_com_zj_wuaipojie_util_SecurityUtil_hook</span><span class="hljs-params">(JNIEnv *env, jclass clazz, jobject context)</span> {<br>&nbsp; &nbsp; <span class="hljs-type">jclass</span> <span class="hljs-variable">conext_class</span> <span class="hljs-operator">=</span> env-&gt;GetObjectClass(context);<br>&nbsp; &nbsp; <span class="hljs-type">jmethodID</span> <span class="hljs-variable">methodId_pack</span> <span class="hljs-operator">=</span> env-&gt;GetMethodID(conext_class, <span class="hljs-string">"getPackageName"</span>,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-string">"()Ljava/lang/String;"</span>);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">packname_js</span> <span class="hljs-operator">=</span> reinterpret_cast&lt;jstring&gt;(env-&gt;CallObjectMethod(context, methodId_pack));<br>&nbsp; &nbsp; const <span class="hljs-type">char</span> *pn = env-&gt;GetStringUTFChars(packname_js, <span class="hljs-number">0</span>);<br>&nbsp; &nbsp; packname = string(pn);<br><br>&nbsp; &nbsp; env-&gt;ReleaseStringUTFChars(packname_js, pn);<br>&nbsp; &nbsp; <span class="hljs-comment">//LOGI("packname: %s", packname.data());</span><br>&nbsp; &nbsp; fakepath= <span class="hljs-string">"/data/user/0/"</span>+ packname +<span class="hljs-string">"/files/base.apk"</span>;<br><br>&nbsp; &nbsp; <span class="hljs-type">jclass</span> <span class="hljs-variable">conext_class2</span> <span class="hljs-operator">=</span> env-&gt;GetObjectClass(context);<br>&nbsp; &nbsp; <span class="hljs-type">jmethodID</span> <span class="hljs-variable">methodId_pack2</span> <span class="hljs-operator">=</span> env-&gt;GetMethodID(conext_class2,<span class="hljs-string">"getApplicationInfo"</span>,<span class="hljs-string">"()Landroid/content/pm/ApplicationInfo;"</span>);<br>&nbsp; &nbsp; <span class="hljs-type">jobject</span> <span class="hljs-variable">application_info</span> <span class="hljs-operator">=</span> env-&gt;CallObjectMethod(context,methodId_pack2);<br>&nbsp; &nbsp; <span class="hljs-type">jclass</span> <span class="hljs-variable">pm_clazz</span> <span class="hljs-operator">=</span> env-&gt;GetObjectClass(application_info);<br><br>&nbsp; &nbsp; <span class="hljs-type">jfieldID</span> <span class="hljs-variable">package_info_id</span> <span class="hljs-operator">=</span> env-&gt;GetFieldID(pm_clazz,<span class="hljs-string">"sourceDir"</span>,<span class="hljs-string">"Ljava/lang/String;"</span>);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">sourceDir_js</span> <span class="hljs-operator">=</span> reinterpret_cast&lt;jstring&gt;(env-&gt;GetObjectField(application_info,package_info_id));<br>&nbsp; &nbsp; const <span class="hljs-type">char</span> *sourceDir = env-&gt;GetStringUTFChars(sourceDir_js, <span class="hljs-number">0</span>);<br>&nbsp; &nbsp; origpath = string(sourceDir);<br>&nbsp; &nbsp; LOGI(<span class="hljs-string">"sourceDir: %s"</span>, sourceDir);<br><br>&nbsp; &nbsp; <span class="hljs-type">jfieldID</span> <span class="hljs-variable">package_info_id2</span> <span class="hljs-operator">=</span> env-&gt;GetFieldID(pm_clazz,<span class="hljs-string">"nativeLibraryDir"</span>,<span class="hljs-string">"Ljava/lang/String;"</span>);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">nativeLibraryDir_js</span> <span class="hljs-operator">=</span> reinterpret_cast&lt;jstring&gt;(env-&gt;GetObjectField(application_info,package_info_id2));<br>&nbsp; &nbsp; const <span class="hljs-type">char</span> *nativeLibraryDir = env-&gt;GetStringUTFChars(nativeLibraryDir_js, <span class="hljs-number">0</span>);<br>&nbsp; &nbsp; LOGI(<span class="hljs-string">"nativeLibraryDir: %s"</span>, nativeLibraryDir);<br>&nbsp; &nbsp; <span class="hljs-comment">//LOGI("%s", "Start Hook");</span><br><br>&nbsp; &nbsp; <span class="hljs-comment">//启动hook</span><br>&nbsp; &nbsp; <span class="hljs-keyword">void</span> *handle = dlopen(<span class="hljs-string">"libc.so"</span>,RTLD_NOW);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">pagesize</span> <span class="hljs-operator">=</span> sysconf(_SC_PAGE_SIZE);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> ((uintptr_t)dlsym(handle,<span class="hljs-string">"open"</span>) &amp; (-pagesize));<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">addr2</span> <span class="hljs-operator">=</span> ((uintptr_t)dlsym(handle,<span class="hljs-string">"openat"</span>) &amp; (-pagesize));<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">addr3</span> <span class="hljs-operator">=</span> ((uintptr_t)fopen) &amp; (-pagesize);<br>&nbsp; &nbsp; <span class="hljs-type">auto</span> <span class="hljs-variable">addr4</span> <span class="hljs-operator">=</span> ((uintptr_t)syscall) &amp; (-pagesize);<br><br>&nbsp; &nbsp; <span class="hljs-comment">//解除部分机型open被保护</span><br>&nbsp; &nbsp; mprotect((<span class="hljs-keyword">void</span>*)addr, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);<br>&nbsp; &nbsp; mprotect((<span class="hljs-keyword">void</span>*)addr2, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);<br>&nbsp; &nbsp; mprotect((<span class="hljs-keyword">void</span>*)addr3, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);<br>&nbsp; &nbsp; mprotect((<span class="hljs-keyword">void</span>*)addr4, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);<br><br>&nbsp; &nbsp; DobbyHook((<span class="hljs-keyword">void</span> *)dlsym(handle,<span class="hljs-string">"open"</span>), (<span class="hljs-keyword">void</span> *)fake_open, (<span class="hljs-keyword">void</span> **)&amp;orig_open);<br>&nbsp; &nbsp; DobbyHook((<span class="hljs-keyword">void</span> *)dlsym(handle,<span class="hljs-string">"openat"</span>), (<span class="hljs-keyword">void</span> *)fake_openat, (<span class="hljs-keyword">void</span> **)&amp;orig_openat);<br>&nbsp; &nbsp; DobbyHook((<span class="hljs-keyword">void</span> *)fopen, (<span class="hljs-keyword">void</span> *)fake_fopen, (<span class="hljs-keyword">void</span>**)&amp;orig_fopen);<br>&nbsp; &nbsp; DobbyHook((<span class="hljs-keyword">void</span> *)syscall, (<span class="hljs-keyword">void</span> *)fake_syscall, (<span class="hljs-keyword">void</span> **)&amp;orig_syscall);<br>}<br><br></code></pre></td></tr></tbody></table></figure><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali"> <br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<span class="hljs-built_in">&nbsp;sget-object </span>p10, <span class="hljs-class">Lcom/zj/wuaipojie/util/ContextUtils;</span>-&gt;INSTANCE:<span class="hljs-class">Lcom/zj/wuaipojie/util/ContextUtils;</span><br><br>&nbsp; &nbsp;<span class="hljs-built_in"> invoke-virtual </span>{p10}, <span class="hljs-class">Lcom/zj/wuaipojie/util/ContextUtils;</span>-&gt;getContext()<span class="hljs-class">Landroid/content/Context;</span><br><br>&nbsp; &nbsp;<span class="hljs-built_in"> move-result-object </span>p10<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> invoke-static </span>{p10}, <span class="hljs-class">Lcom/zj/wuaipojie/util/SecurityUtil;</span>-&gt;hook(<span class="hljs-class">Landroid/content/Context;</span>)V<br></code></pre></td></tr></tbody></table></figure><h2 id="7-其他常见校验"><a href="#7-其他常见校验" class="headerlink" title="7.其他常见校验"></a><strong>7.其他常见校验</strong></h2><h3 id="root检测："><a href="#root检测：" class="headerlink" title="root检测："></a><strong>root检测：</strong></h3><p>反制手段</p><p>1.算法助手、对话框取消等插件一键hook</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232142228.png"></p><p>2.分析具体的检测代码</p><p>3.利用IO重定向使文件不可读</p><p>4.修改Andoird源码，去除常见指纹</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"> 复制代码 隐藏代码<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isDeviceRooted</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> checkRootMethod1() || checkRootMethod2() || checkRootMethod3()<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod1</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">val</span> buildTags = android.os.Build.TAGS<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> buildTags != <span class="hljs-literal">null</span> &amp;&amp; buildTags.contains(<span class="hljs-string">"test-keys"</span>)<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod2</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">val</span> paths = arrayOf(<span class="hljs-string">"/system/app/Superuser.apk"</span>, <span class="hljs-string">"/sbin/su"</span>, <span class="hljs-string">"/system/bin/su"</span>, <span class="hljs-string">"/system/xbin/su"</span>, <span class="hljs-string">"/data/local/xbin/su"</span>, <span class="hljs-string">"/data/local/bin/su"</span>, <span class="hljs-string">"/system/sd/xbin/su"</span>,<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-string">"/system/bin/failsafe/su"</span>, <span class="hljs-string">"/data/local/su"</span>, <span class="hljs-string">"/su/bin/su"</span>)<br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> (path <span class="hljs-keyword">in</span> paths) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">if</span> (File(path).exists()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkRootMethod3</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">var</span> process: Process? = <span class="hljs-literal">null</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;process = Runtime.getRuntime().exec(arrayOf(<span class="hljs-string">"/system/xbin/which"</span>, <span class="hljs-string">"su"</span>))<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">val</span> bufferedReader = BufferedReader(InputStreamReader(process.inputStream))<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;bufferedReader.readLine() != <span class="hljs-literal">null</span><br>&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (t: Throwable) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-literal">false</span><br>&nbsp; &nbsp; } <span class="hljs-keyword">finally</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;process?.destroy()<br>&nbsp; &nbsp; }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>定义了一个&nbsp;<code>isDeviceRooted()</code>&nbsp;函数，该函数调用了三个检测 root 的方法：<code>checkRootMethod1()</code>、<code>checkRootMethod2()</code>&nbsp;和&nbsp;<code>checkRootMethod3()</code>。</p><p><code>checkRootMethod1()</code>&nbsp;方法检查设备的&nbsp;<code>build tags</code>&nbsp;是否包含&nbsp;<code>test-keys</code>。这通常是用于测试的设备，因此如果检测到这个标记，则可以认为设备已被 root。</p><p><code>checkRootMethod2()</code>&nbsp;方法检查设备是否存在一些特定的文件，这些文件通常被用于执行 root 操作。如果检测到这些文件，则可以认为设备已被 root。</p><p><code>checkRootMethod3()</code>&nbsp;方法使用&nbsp;<code>Runtime.exec()</code>&nbsp;方法来执行&nbsp;<code>which su</code>&nbsp;命令，然后检查命令的输出是否不为空。如果输出不为空，则可以认为设备已被 root。</p><h3 id="模拟器检测"><a href="#模拟器检测" class="headerlink" title="模拟器检测"></a><strong>模拟器检测</strong></h3><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isEmulator</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> Build.FINGERPRINT.startsWith(<span class="hljs-string">"generic"</span>) || Build.FINGERPRINT.startsWith(<span class="hljs-string">"unknown"</span>) || Build.MODEL.contains(<span class="hljs-string">"google_sdk"</span>) Build.MODEL.contains(<span class="hljs-string">"Emulator"</span>) || Build.MODEL.contains(<span class="hljs-string">"Android SDK built for x86"</span>) || Build.MANUFACTURER.contains(<span class="hljs-string">"Genymotion"</span>) || Build.HOST.startsWith(<span class="hljs-string">"Build"</span>) || Build.PRODUCT == <span class="hljs-string">"google_sdk"</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br><br></code></pre></td></tr></tbody></table></figure><p>通过检测系统的&nbsp;<code>Build</code>&nbsp;对象来判断当前设备是否为模拟器。具体方法是检测&nbsp;<code>Build.FINGERPRINT</code>&nbsp;属性是否包含字符串&nbsp;<code>"generic"</code>。</p><p><a href="https://www.notion.so/04dbaf39091f42519b14decd2a87fde7?pvs=21">模拟器检测对抗</a></p><h3 id="反调试检测"><a href="#反调试检测" class="headerlink" title="反调试检测"></a><strong>反调试检测</strong></h3><p>安卓系统自带调试检测函数</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkForDebugger</span><span class="hljs-params">()</span></span> {<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> (Debug.isDebuggerConnected()) {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">// 如果调试器已连接，则终止应用程序</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;System.exit(<span class="hljs-number">0</span>)<br>&nbsp; &nbsp; }<br>}<br></code></pre></td></tr></tbody></table></figure><p>debuggable属性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getAppCanDebug</span><span class="hljs-params">(Context context)</span><span class="hljs-comment">//上下文对象为xxActivity.this</span><br>{<br>&nbsp; &nbsp; <span class="hljs-type">boolean</span> <span class="hljs-variable">isDebug</span> <span class="hljs-operator">=</span> context.getApplicationInfo() != <span class="hljs-literal">null</span> &amp;&amp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;(context.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="hljs-number">0</span>;<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> isDebug;<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>ptrace检测</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ptrace_protect</span><span class="hljs-params">()</span><span class="hljs-comment">//ptrace附加自身线程 会导致此进程TracerPid 变为父进程的TracerPid 即zygote</span></span><br><span class="hljs-function"></span>{<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-built_in">ptrace</span>(PTRACE_TRACEME,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);;<span class="hljs-comment">//返回-1即为已经被调试</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>每个进程同时刻只能被1个调试进程ptrace&nbsp;&nbsp;，主动ptrace本进程可以使得其他调试器无法调试</p><p>调试进程名检测</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SearchObjProcess</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>&nbsp; &nbsp; FILE* pfile=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp; <span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>]={<span class="hljs-number">0</span>};<br><br>&nbsp; &nbsp; pfile=<span class="hljs-built_in">popen</span>(<span class="hljs-string">"ps"</span>,<span class="hljs-string">"r"</span>);<br>&nbsp; &nbsp; <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==pfile)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-comment">//LOGA("SearchObjProcess popen打开命令失败!\n");</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-comment">// 获取结果</span><br>&nbsp; &nbsp; <span class="hljs-comment">//LOGA("popen方案:\n");</span><br>&nbsp; &nbsp; <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fgets</span>(buf,<span class="hljs-built_in">sizeof</span>(buf),pfile))<br>&nbsp; &nbsp; {<br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">char</span>* strA=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">char</span>* strB=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">char</span>* strC=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-type">char</span>* strD=<span class="hljs-literal">NULL</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;strA=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">"android_server"</span>);<span class="hljs-comment">//通过查找匹配子串判断</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;strB=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">"gdbserver"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;strC=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">"gdb"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;strD=<span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">"fuwu"</span>);<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">if</span>(strA || strB ||strC || strD)<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;{<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<span class="hljs-comment">// 执行到这里，判定为调试状态</span><br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; <span class="hljs-built_in">pclose</span>(pfile);<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><a href="https://bbs.pediy.com/thread-268155.htm">[原创]对安卓反调试和校验检测的一些实践与结论</a></p><h3 id="frida检测"><a href="#frida检测" class="headerlink" title="frida检测"></a><strong>frida检测</strong></h3><p><a href="https://github.com/xxr0ss/AntiFrida">一些Frida检测手段</a></p><h2 id="8-smali语法小课堂之赋值"><a href="#8-smali语法小课堂之赋值" class="headerlink" title="8.smali语法小课堂之赋值"></a><strong>8.smali语法小课堂之赋值</strong></h2><h3 id="1-Int型赋值"><a href="#1-Int型赋值" class="headerlink" title="1.Int型赋值"></a><strong>1.Int型赋值</strong></h3><figure class="highlight smalltalk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><br>.method private static final onCreate<span class="hljs-string">$l</span>ambda<span class="hljs-number">-0</span>(<span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;<span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;<span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;<span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;<span class="hljs-type">Landroid</span>/view/<span class="hljs-type">View</span>;)<span class="hljs-type">V</span><br>&nbsp; &nbsp; .registers <span class="hljs-number">9</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">21</span><br>&nbsp; &nbsp; invoke-virtual {p0}, <span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;-&gt;isVip()<span class="hljs-type">I</span><br><br>&nbsp; &nbsp; move-result p4<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;//判断vip的值分别对应不用的会员的等级<br>&nbsp; &nbsp; if-eqz p4, :cond_35<br><br>&nbsp; &nbsp; const/<span class="hljs-number">4</span> v0, <span class="hljs-number">0x1</span><br><br>&nbsp; &nbsp; if-eq p4, v0, :cond_2d<br><br>&nbsp; &nbsp; const/<span class="hljs-number">4</span> v0, <span class="hljs-number">0x4</span><br><br>&nbsp; &nbsp; if-eq p4, v0, :cond_25<br><br>&nbsp; &nbsp; const/<span class="hljs-number">16</span> v0, <span class="hljs-number">0x10</span><br><br>&nbsp; &nbsp; if-eq p4, v0, :cond_1d<br><br>&nbsp; &nbsp; const/<span class="hljs-number">16</span> v0, <span class="hljs-number">0x63</span><br><br>&nbsp; &nbsp; if-eq p4, v0, :cond_15<br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_15<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"至尊会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">26</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_1d<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"超级会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">25</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_25<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"大会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">24</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_2d<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">23</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_3c<br><br>&nbsp; &nbsp; :cond_35<br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"非会员"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">22</span><br>&nbsp; &nbsp; check-cast p4, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;.line <span class="hljs-number">28</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;//判断vipEndTime的时间戳是否小于系统时间<br>&nbsp; &nbsp; :goto_3c<br>&nbsp; &nbsp; new-instance p1, <span class="hljs-type">Ljava</span>/util/<span class="hljs-type">Date</span>;<br><br>&nbsp; &nbsp; invoke-direct {p1}, <span class="hljs-type">Ljava</span>/util/<span class="hljs-type">Date</span>;-&gt;&lt;init&gt;()<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; invoke-virtual {p1}, <span class="hljs-type">Ljava</span>/util/<span class="hljs-type">Date</span>;-&gt;getTime()<span class="hljs-type">J</span><br><br>&nbsp; &nbsp; move-result-wide v0<br><br>&nbsp; &nbsp; .line <span class="hljs-number">29</span><br>&nbsp; &nbsp; new-instance p1, <span class="hljs-type">Ljava</span>/text/<span class="hljs-type">SimpleDateFormat</span>;<br><br>&nbsp; &nbsp; const-string p4, <span class="hljs-comment">"yyyy-MM-dd"</span><br><br>&nbsp; &nbsp; invoke-direct {p1, p4}, <span class="hljs-type">Ljava</span>/text/<span class="hljs-type">SimpleDateFormat</span>;-&gt;&lt;init&gt;(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">String</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">30</span><br>&nbsp; &nbsp; invoke-virtual {p0}, <span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;-&gt;vipEndTime()<span class="hljs-type">J</span><br><br>&nbsp; &nbsp; move-result-wide v2<br><br>&nbsp; &nbsp; cmp-long p4, v2, v0<br><br>&nbsp; &nbsp; if-gez p4, :cond_5c<br><br>&nbsp; &nbsp; const-string p1, <span class="hljs-comment">"已过期"</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">31</span><br>&nbsp; &nbsp; check-cast p1, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p2, p1}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; goto :goto_6d<br><br>&nbsp; &nbsp; .line <span class="hljs-number">33</span><br>&nbsp; &nbsp; :cond_5c<br>&nbsp; &nbsp; invoke-virtual {p0}, <span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;-&gt;vipEndTime()<span class="hljs-type">J</span><br><br>&nbsp; &nbsp; move-result-wide v0<br><br>&nbsp; &nbsp; invoke-static {v0, v1}, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">Long</span>;-&gt;valueOf(<span class="hljs-type">J</span>)<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">Long</span>;<br><br>&nbsp; &nbsp; move-result-object p4<br><br>&nbsp; &nbsp; invoke-virtual {p1, p4}, <span class="hljs-type">Ljava</span>/text/<span class="hljs-type">SimpleDateFormat</span>;-&gt;format(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">Object</span>;)<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">String</span>;<br><br>&nbsp; &nbsp; move-result-object p1<br><br>&nbsp; &nbsp; check-cast p1, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p2, p1}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; .line <span class="hljs-number">35</span><br>&nbsp; &nbsp; :goto_6d<br>&nbsp; &nbsp; iget p0, p0, <span class="hljs-type">Lcom</span>/zj/wuaipojie/ui/<span class="hljs-type">SmaliLearn</span>;-&gt;vip_coin:<span class="hljs-type">I</span><br><br>&nbsp; &nbsp; if-eqz p0, :cond_74<br><br>&nbsp; &nbsp; .line <span class="hljs-number">36</span><br>&nbsp; &nbsp; invoke-static {p0}, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">String</span>;-&gt;valueOf(<span class="hljs-type">I</span>)<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">String</span>;<br><br>&nbsp; &nbsp; move-result-object p0<br><br>&nbsp; &nbsp; check-cast p0, <span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;<br><br>&nbsp; &nbsp; invoke-virtual {p3, p0}, <span class="hljs-type">Landroid</span>/widget/<span class="hljs-type">TextView</span>;-&gt;setText(<span class="hljs-type">Ljava</span>/lang/<span class="hljs-type">CharSequence</span>;)<span class="hljs-type">V</span><br><br>&nbsp; &nbsp; :cond_74<br>&nbsp; &nbsp; return-void<br>.end method<br></code></pre></td></tr></tbody></table></figure><p>const/4和const/16的区别？</p><p>const/4 最大只允许存放4个二进制位(4bit)，</p><p>const/16 最大值允许存放16个二进制位(16bit)， 第一位(即最高位)默认为符号位。单位换算 1byte=8bit</p><p>举例说明下寄存器的取值范围: # 以下数据定义高位默认为符号位</p><p>const/4 v0,0x2 # 最大只允许存放半字节数据 取值范围为 -8 and 7</p><p>const/16 v0 , 0xABCD # 定义一个寄存器变量，最大只允许存放16位数据 比如short类型数据 取值范围为-32768~32767</p><p>const v0 , 0xA# 定义一个寄存器， 最大只允许存放32位数据,比如int类型数据 将数字10赋值给v0 取值范围-2147483647~2147483647</p><p>const/high16 #定义一个寄存器， 最大只允许存放高16位数值 比如0xFFFF0000末四位补0 存入高四位0XFFFF</p><h3 id="2-Long型赋值"><a href="#2-Long型赋值" class="headerlink" title="2.Long型赋值"></a><strong>2.Long型赋值</strong></h3><p><strong>const-wide vx, lit32</strong>&nbsp;表示将一个 32 位的常量存储到 vx 与 vx+1 两个寄存器中 —— 即一个 long 类型的数据</p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali"><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> final</span> vipEndTime()J<br>&nbsp; &nbsp; .registers 3<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> const-wide </span>v0, 0x1854460ef29L<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> return-wide </span>v0<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end method</span><br><br></code></pre></td></tr></tbody></table></figure><p>会员到期时间就是2022年12月24日。那么1854460ef29L 怎么来的呢？也就是（2022年12月24日-1970年1月1日）×365天×24小时×60分钟×60秒×1000毫秒，转换成16进制就大概是那个数了</p><p><a href="https://www.beijing-time.org/shijianchuo/">在线时间戳转换</a></p><h3 id="3-变量赋值-正则"><a href="#3-变量赋值-正则" class="headerlink" title="3.变量赋值(正则)"></a><strong>3.变量赋值(正则)</strong></h3><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs smali"><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<span class="hljs-built_in">&nbsp;iget </span>p0, p0, <span class="hljs-class">Lcom/zj/wuaipojie/ui/SmaliLearn;</span>-&gt;vip_coin:I<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> if-eqz </span>p0,<span class="hljs-keyword"> :cond_74</span><br><br>&nbsp; &nbsp; .line 36<br>&nbsp; &nbsp;<span class="hljs-built_in"> invoke-static </span>{p0}, <span class="hljs-class">Ljava/lang/String;</span>-&gt;valueOf(I)<span class="hljs-class">Ljava/lang/String;</span><br><br>&nbsp; &nbsp;<span class="hljs-built_in"> move-result-object </span>p0<br><br>&nbsp; &nbsp;<span class="hljs-built_in"> check-cast </span>p0, <span class="hljs-class">Ljava/lang/CharSequence;</span><br><br>&nbsp; &nbsp;<span class="hljs-built_in"> invoke-virtual </span>{p3, p0}, <span class="hljs-class">Landroid/widget/TextView;</span>-&gt;setText(<span class="hljs-class">Ljava/lang/CharSequence;</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232142255.png"></p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">(.*) .*<span class="hljs-built_in"></span><br><span class="hljs-built_in">const/4 </span>$1 0x1  //替换<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>签名校验</tag>
      
      <tag>smali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jeb动态调试，Log插桩</title>
    <link href="/2025/03/23/ZJ5/jeb%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%EF%BC%8CLog%E6%8F%92%E6%A1%A9%201b1a6f4b4daf80a68a87f1bcc2c5232d/"/>
    <url>/2025/03/23/ZJ5/jeb%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%EF%BC%8CLog%E6%8F%92%E6%A1%A9%201b1a6f4b4daf80a68a87f1bcc2c5232d/</url>
    
    <content type="html"><![CDATA[<h1 id="jeb动态调试，Log插桩"><a href="#jeb动态调试，Log插桩" class="headerlink" title="jeb动态调试，Log插桩"></a>jeb动态调试，Log插桩</h1><h2 id="1-什么是动态调试"><a href="#1-什么是动态调试" class="headerlink" title="1.什么是动态调试"></a><strong>1.什么是动态调试</strong></h2><p>动态调试是指自带的调试器跟踪自己软件的运行，可以在调试的过程中知道参数或者局部变量的值以及履清代码运行的先后顺序。多用于爆破注册码。与静态分析（直接阅读反编译的代码）不同，动态调试允许实时监控内存、寄存器、变量值和执行流程，尤其适合分析复杂逻辑或加密/混淆后的代码。</p><ul><li><p><strong>动态调试 vs 静态分析</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>动态调试</strong></th><th><strong>静态分析</strong></th></tr></thead><tbody><tr><td><strong>执行状态</strong></td><td>程序正在运行</td><td>程序未运行，仅分析代码文件</td></tr><tr><td><strong>优势</strong></td><td>观察实时数据流、内存变化，绕过部分反逆向技术</td><td>全面查看代码结构，无执行环境依赖</td></tr><tr><td><strong>劣势</strong></td><td>需处理反调试机制，依赖运行环境</td><td>无法追踪运行时状态，难以分析动态逻辑</td></tr><tr><td><strong>典型工具</strong></td><td>GDB、LLDB、IDA Pro、Frida、Android Studio</td><td>JADX、Ghidra、IDA Pro、Binary Ninja</td></tr></tbody></table></li></ul><h2 id="2-动态调试步骤"><a href="#2-动态调试步骤" class="headerlink" title="2.动态调试步骤"></a><strong>2.动态调试步骤</strong></h2><h3 id="1-修改debug权限"><a href="#1-修改debug权限" class="headerlink" title="1.修改debug权限"></a><strong>1.修改debug权限</strong></h3><p>方法一:在AndroidManifest.xml里添加可调试权限</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:debuggable="true"<br></code></pre></td></tr></tbody></table></figure><ul><li><p>示例</p><p>  1.先提取安装包进行后续修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115640.png"></p><p>  2.对文件进行修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115589.png"></p><p>  3.将权限添加在<code>application</code>中</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115786.png"></p><p>  4.重新安装完成后即可得到一个可以调试的安装包。</p></li></ul><p>方法二：XappDebug模块hook对应的app</p><p>项目地址</p><p><a href="https://github.com/Palatis/XAppDebug">XappDebug</a></p><p>方法三：Magisk命令(重启失效)</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span>&nbsp;&nbsp;adb shell #adb进入命令行模式<br><br><span class="hljs-bullet">2.</span>&nbsp;&nbsp;su #切换至超级用户<br><br><span class="hljs-bullet">3.</span>&nbsp;&nbsp;magisk resetprop ro.debuggable 1<br><br><span class="hljs-bullet">4.</span>&nbsp;&nbsp;stop;start; #一定要通过该方式重启<br></code></pre></td></tr></tbody></table></figure><p>方法四:刷入MagiskHide Props Config模块</p><p>一般来说，在4选项中如果有ro.debuggable那就直接修改</p><p>没有的话就选5</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232115387.png"></p><p>修改ro.debuggable的值为1</p><h3 id="2-端口转发以及开启adb权限"><a href="#2-端口转发以及开启adb权限" class="headerlink" title="2.端口转发以及开启adb权限"></a><strong>2.端口转发以及开启adb权限</strong></h3><p>版本号点击七次开启开发者模式并开启adb调试权限</p><p>夜神模拟器：adb connect 127.0.0.1:62001（雷电模拟器自带端口转发）</p><h3 id="3-下段点"><a href="#3-下段点" class="headerlink" title="3.下段点"></a><strong>3.下段点</strong></h3><p>ctrl+b下断点</p><h3 id="4-debug模式启动"><a href="#4-debug模式启动" class="headerlink" title="4.debug模式启动"></a><strong>4.debug模式启动</strong></h3><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start -D -n <span class="hljs-keyword">com</span>.zj.wuaipojie/.ui.MainActivity<br></code></pre></td></tr></tbody></table></figure><p>adb shell am start -D -n</p><p>adb shell am start -D -n 包名/类名</p><p>am start -n 表示启动一个activity</p><p>am start -D 表示将应用设置为可调试模式</p><p><a href="https://blog.csdn.net/jinmie0193/article/details/111355867">Android修改ro.debuggable 的四种方法-CSDN博客</a></p><h3 id="5-Jeb附加调试进程"><a href="#5-Jeb附加调试进程" class="headerlink" title="5.Jeb附加调试进程"></a><strong>5.Jeb附加调试进程</strong></h3><p>激活jeb</p><p>在线python运行</p><p><a href="https://tool.lu/coderunner/">https://tool.lu/coderunner/</a></p><ul><li><p>使用案例：</p><p>  1.查询到相关位置</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116197.png"></p><p>  2.将内容编译为JAVA的形式进行分析</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116068.png"></p><p>  3.通过初步分析判断关键点在<code>chek()</code>方法对我们输入的字符串进行了怎样的判断。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116137.png"></p><p>  4.双击进入到<code>chek()</code>代码，发现它是一个经过一串运算后进行base64编码与字符进行对比</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116429.png"></p><p>  5.查找到关键中间字符的代码进行下断点（Ctrl+b）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232116510.png"></p><p>  6.使用debug启动该软件，依次获取包名和启动类名</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117031.png"></p><p>  去掉包名的部分，后边的一串属于是要填写的类名</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117489.png"></p><p>  7.启动后返回界面出现下列提示说明已正常运行debug模式</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117217.png"></p><p>  8.使用jeb对下断点的地方进行调试，我们检查调试端口和报名对应正确且进程存在，点击<strong>附上</strong></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503232117764.png"></p><ol start="9"><li></li></ol></li></ul><p>算号代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"> 复制代码 隐藏代码<br><span class="hljs-comment">#https://bbs.pediy.com/</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> os, sys, struct, time, binascii, hashlib<br><br>RC4_Key2= <span class="hljs-string">'Eg\xa2\x99_\x83\xf1\x10'</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">Key, inData</span>):<br>&nbsp; &nbsp; Buf = <span class="hljs-string">""</span><br>&nbsp; &nbsp; S = <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)<br>&nbsp; &nbsp; K = (<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:<span class="hljs-built_in">ord</span>(x), Key) * (<span class="hljs-number">256</span> / <span class="hljs-built_in">len</span>(Key) + <span class="hljs-number">1</span>))[:<span class="hljs-number">256</span>]<br>&nbsp; &nbsp; j = <span class="hljs-number">0</span><br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;j = (S[i] + K[i] + j) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;S[i], S[j] = S[j], S[i]<br>&nbsp; &nbsp; i, j = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>&nbsp; &nbsp; <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inData)):<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;j = (j + S[i]) % <span class="hljs-number">256</span><br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;S[i], S[j] = S[j], S[i]<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Buf += <span class="hljs-built_in">chr</span>(S[(S[j] + S[i]) % <span class="hljs-number">256</span>] ^ <span class="hljs-built_in">ord</span>(inData[x]))<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> Buf<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Long2Int</span>(<span class="hljs-params">longdata</span>):<br>&nbsp; &nbsp; lo = longdata &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; hi = (longdata &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0x7FFFFFFF</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> hi, lo<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KeygenSN</span>(<span class="hljs-params">LicenseSerial, MachineID</span>):<br>&nbsp; &nbsp; mhi, mlo = Long2Int(MachineID)<br>&nbsp; &nbsp; lhi, llo = Long2Int(LicenseSerial)<br>&nbsp; &nbsp; hi_Key = (mhi - lhi + <span class="hljs-number">0x55667788</span>) &amp; <span class="hljs-number">0x7FFFFFFF</span><br>&nbsp; &nbsp; lo_Key = (mlo + llo + <span class="hljs-number">0x11223344</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; Z0, = struct.unpack(<span class="hljs-string">'&lt;Q'</span>, struct.pack(<span class="hljs-string">'&lt;LL'</span>, lo_Key, hi_Key))<br>&nbsp; &nbsp; Z1 = <span class="hljs-built_in">int</span>(time.time()) ^ <span class="hljs-number">0x56739ACD</span><br>&nbsp; &nbsp; s = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:<span class="hljs-built_in">int</span>(x, <span class="hljs-number">16</span>), <span class="hljs-string">"%x"</span> % Z1)) % <span class="hljs-number">10</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-string">"%dZ%d%d"</span> % (Z0, Z1, s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ParsePost</span>(<span class="hljs-params">buf</span>):<br>&nbsp; &nbsp; Info = struct.unpack(<span class="hljs-string">'&lt;3L2Q4LQ3L'</span>, buf[:<span class="hljs-number">0x40</span>])<br>&nbsp; &nbsp; flag, CRC, UserSerial, LicenseSerial, MachineID, build_type, \<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; Ver_Major, Ver_Minor, Ver_Buildid, Ver_Timestamp, \<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; TimeOffset, Kclass, Random2 = Info<br>&nbsp; &nbsp; SysInfoData = buf[<span class="hljs-number">0x40</span>:]<br>&nbsp; &nbsp; <span class="hljs-keyword">assert</span> CRC == binascii.crc32(buf[<span class="hljs-number">8</span>:]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> Info, SysInfoData<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">DecodeRc4Str</span>(<span class="hljs-params">buf</span>):<br>&nbsp; &nbsp; buf = buf.decode(<span class="hljs-string">'hex'</span>)<br>&nbsp; &nbsp; i, s = ParsePost(rc4(buf[:<span class="hljs-number">8</span>] + RC4_Key2, buf[<span class="hljs-number">8</span>:]))<br>&nbsp; &nbsp; <span class="hljs-keyword">return</span> i, s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetJebLicenseKey</span>():<br>&nbsp; &nbsp; licdata = <span class="hljs-string">""</span><br>&nbsp; &nbsp; <span class="hljs-keyword">if</span> licdata:<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;i, MachineID = DecodeRc4Str(licdata)<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;SN = KeygenSN(i[<span class="hljs-number">3</span>], i[<span class="hljs-number">4</span>])<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-built_in">print</span> <span class="hljs-string">"JEB License Key:"</span>, SN<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span class="hljs-keyword">return</span> SN<br><br>GetJebLicenseKey()<br>raw_input(<span class="hljs-string">"Enter to Exit..."</span>)<br><br></code></pre></td></tr></tbody></table></figure><p>快捷键：</p><p>^F6进入方法</p><p>F6跳过方法</p><p>F7从方法中跳出来</p><p>R运行到光标处</p><h3 id="3-Log插桩"><a href="#3-Log插桩" class="headerlink" title="3.Log插桩"></a><strong>3.Log插桩</strong></h3><p>定义：Log插桩指的是反编译APK文件时，在对应的smali文件里，添加相应的smali代码，将程序中的关键信息，以log日志的形式进行输出。</p><p>调用命令</p><figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali"> 复制代码 隐藏代码<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">invoke-static </span>{对应寄存器}, <span class="hljs-class">Lcom/mtools/LogUtils;</span>-&gt;v(<span class="hljs-class">Ljava/lang/Object;</span>)V<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态调试</tag>
      
      <tag>jeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弹窗定位去更新，广告分析与布局优化</title>
    <link href="/2025/03/23/ZJ4/%E5%BC%B9%E7%AA%97%E5%AE%9A%E4%BD%8D%E5%8E%BB%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%B9%BF%E5%91%8A%E5%88%86%E6%9E%90%E4%B8%8E%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%201b0a6f4b4daf80019ef2e0767f50ce0e/"/>
    <url>/2025/03/23/ZJ4/%E5%BC%B9%E7%AA%97%E5%AE%9A%E4%BD%8D%E5%8E%BB%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%B9%BF%E5%91%8A%E5%88%86%E6%9E%90%E4%B8%8E%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%201b0a6f4b4daf80019ef2e0767f50ce0e/</url>
    
    <content type="html"><![CDATA[<h1 id="弹窗定位去更新，广告分析与布局优化"><a href="#弹窗定位去更新，广告分析与布局优化" class="headerlink" title="弹窗定位去更新，广告分析与布局优化"></a>弹窗定位去更新，广告分析与布局优化</h1><h2 id="1-广告类型"><a href="#1-广告类型" class="headerlink" title="1.广告类型"></a><strong>1.广告类型</strong></h2><p>启动广告&nbsp; &nbsp;&nbsp;&nbsp;弹窗&amp;更新广告&nbsp; &nbsp;横幅广告</p><h2 id="2-安卓四大组件"><a href="#2-安卓四大组件" class="headerlink" title="2.安卓四大组件"></a>2.安卓四大组件</h2><table><thead><tr><th><strong>组件</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Activity(活动)</td><td>在应用中的一个Activity可以用来表示一个界面，意思可以理解为“活动”，即一个活动开始，代表 Activity组件启动，活动结束，代表一个Activity的生命周期结束。一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</td></tr><tr><td>Service(服务)</td><td>Service它可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等。</td></tr><tr><td>Broadcast Receiver(广播接收器)</td><td>一个用于接收广播信息，并做出对应处理的组件。比如我们常见的系统广播：通知时区改变、电量低、用户改变了语言选项等。</td></tr><tr><td>Content Provider(内容提供者)</td><td>作为应用程序之间唯一的共享数据的途径，Content Provider主要的功能就是存储并检索数据以及向其他应用程序提供访问数据的接口。Android内置的许多数据都是使用Content Provider形式，供开发者调用的（如视频，音频，图片，通讯录等）</td></tr></tbody></table><h3 id="1-activity的切换"><a href="#1-activity的切换" class="headerlink" title="1.activity的切换"></a><strong>1.activity的切换</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!---声明实现应用部分可视化界面的 Activity，必须使用 AndroidManifest 中的 &lt;activity&gt; 元素表示所有 Activity。系统不会识别和运行任何未进行声明的Activity。-----&gt;<br>&lt;activity  <br>    android:label=<span class="hljs-string">"@string/app_name"</span>  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.MainActivity"</span>  <br>    android:exported=<span class="hljs-string">"true"</span>&gt;  &lt;!--当前Activity是否可以被另一个Application的组件启动：<span class="hljs-literal">true</span>允许被启动；<span class="hljs-literal">false</span>不允许被启动--&gt;<br>    &lt;!---指明这个activity可以以什么样的意图(intent)启动---&gt;<br>    &lt;intent-filter&gt;  <br>        &lt;!--表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动---&gt;<br>        &lt;action  <br>            android:name=<span class="hljs-string">"android.intent.action.MAIN"</span> /&gt;  <br>        &lt;!--这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity--&gt;<br>        &lt;category  <br>            android:name=<span class="hljs-string">"android.intent.category.LAUNCHER"</span> /&gt;  <br>    &lt;/intent-filter&gt;  <br>&lt;/activity&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFirst"</span> /&gt;<br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFifth"</span>  <br>    android:exported=<span class="hljs-string">"true"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeFourth"</span>  <br>    android:exported=<span class="hljs-string">"true"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeThird"</span>  <br>    android:exported=<span class="hljs-string">"false"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.ChallengeSecond"</span>  <br>    android:exported=<span class="hljs-string">"false"</span> /&gt;  <br>&lt;activity  <br>    android:name=<span class="hljs-string">"com.zj.wuaipojie.ui.AdActivity"</span> /&gt;  <span class="hljs-comment">//广告的Activity</span><br></code></pre></td></tr></tbody></table></figure><p>启动广告流程：<br>启动Activity-&gt;广告Activity-&gt;主页Activity</p><p>修改方法：<br>1.修改加载时间<br>2.Acitivity切换定位，修改Intent的Activity类名</p><ul><li><p>修改Intent的Activity类名示例</p><p>  1.在查找过程中我们可以直接排除他自身一个类的调用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231717814.png"></p><p>  2.观察改代码的调用逻辑</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (position) {  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent.setClass(it.getContext(), ChallengeFirst.class);  <br>        it.getContext().startActivity(intent);  <br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent2.setClass(it.getContext(), ChallengeSecond.class);  <br>        it.getContext().startActivity(intent2);  <br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <span class="hljs-comment">//new一个Intent，</span><br>        intent3.setClass(it.getContext(), AdActivity.class);  <span class="hljs-comment">//传入要切换的Acitivity的类名</span><br>        it.getContext().startActivity(intent3);  <span class="hljs-comment">//启动对应的Activity</span><br>        <span class="hljs-keyword">return</span>;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>        intent4.setClass(it.getContext(), ChallengeFourth.class);  <br>        it.getContext().startActivity(intent4);  <br>        <span class="hljs-keyword">return</span>; <br>    <span class="hljs-keyword">default</span>:  <br>        <span class="hljs-keyword">return</span>;  <br>}<br></code></pre></td></tr></tbody></table></figure><p>  3.通过观察发现AdActivity.class是插入广告的地方，我们进入该地方将传入的广告Activity切换为我们正常的页面Activity</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231712525.png"></p><p>  4.重新签名安装后就发现我们直接进入到正常的Activity页面。该方法定位到具体的代码地方修改可以避免直接在XMl文件里修改而产生的页面内容无法加载或闪退等情况。</p></li></ul><h3 id="activity切换定位法"><a href="#activity切换定位法" class="headerlink" title="activity切换定位法"></a>activity切换定位法</h3><ul><li><p>修改时间示例</p><p>  1.先打开Activity记录</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713500.png"></p><p>  2.可以查找定位到我们刚刚打开界面或自动弹出界面的Activity</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713929.png"></p><p>  3.点击复制进行查找</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713873.png"></p><p>  4.修改时间来关闭弹窗，我们发现调用时间的是loadAd()方法。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713028.png"></p><ol><li><code>0xbb8</code>是十六进制数值，对应十进制的&nbsp;3000 毫秒（3 秒）。我们可以将其修改为0x0使其读秒数变为0</li></ol><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231713307.png"></p><p>  6.保存安装后就可以发现界面仍会走到，但是因为停留时间太短可以忽略。</p></li></ul><h2 id="3-Activity生命周期"><a href="#3-Activity生命周期" class="headerlink" title="3.Activity生命周期"></a>3.<strong>Activity生命周期</strong></h2><table><thead><tr><th><strong>函数名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>onCreate()</td><td>一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td></tr><tr><td>onStart()</td><td>当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td></tr><tr><td>onResume()</td><td>这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td></tr><tr><td>onPause()</td><td>这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td></tr><tr><td>onStop()</td><td>这个方法是在Activity完全不可见的时候调用的。</td></tr><tr><td>onDestroy()</td><td>这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td></tr><tr><td>onRestart()</td><td>当Activity从停止stop状态恢进入start状态时调用状态。</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714521.png"></p><h2 id="4-弹窗定位-堆栈分析"><a href="#4-弹窗定位-堆栈分析" class="headerlink" title="4.弹窗定位&amp;堆栈分析"></a><strong>4.弹窗定位&amp;堆栈分析</strong></h2><p>修改方法：</p><ul><li><p>1.修改xml中的versiocode</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714745.png"></p></li><li><p>2.Hook弹窗(推荐算法助手开启弹窗定位)</p><p>  （1）启动模块，勾选作用域重启软件</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714395.png"></p><p>  （2）打开算法助手，找到该软件分别打开应用总开关和弹窗定位。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714171.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231714172.png"><br>  （3）启动后点击返回就可以实现返回，但在Hook之前会把返回键给劫持掉。相当于去掉弹窗。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715113.png"></p><p>  （4）也可以直接启用的关键词弹窗，直接Hook掉两个弹窗。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715712.png"></p></li><li><p>3.修改dex弹窗代码</p><p>  （1）打开日志找到最新弹窗，可以查看该弹窗的相关内容以及堆栈的调用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715655.png"></p><p>  （2）因为最终要定位到该onCreate方法，我们定位到最精准的地方进行查看。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715361.png"></p><p>  （3）会发现后面调用了show()方法来显示弹窗信息，我们可以将该段代码注释掉或删除。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715201.png"></p></li><li><p>4.抓包修改响应体(也可以路由器拦截)</p><p>  详见后面抓包内容</p></li><li><p>横幅广告</p><p>  1.使用开发助手的布局查看功能，同意其申请权限</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231715524.png"></p><p>  2.使用小放大镜选取横幅，查看其相关信息，ad_image是广告的意思</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716804.png"></p><p>  3.进一步我们查看到其id等信息</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716397.png"></p><p>  4.我们可以使用XML查找</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716426.png"></p><p>  5.到定位位置修改其界面的相关信息</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716519.png"></p><p>  6.同样也可以加入xml隐藏代码将该布局隐藏起来</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>android:visibility="gone"<br></code></pre></td></tr></tbody></table></figure><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503231716656.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓四大组件</tag>
      
      <tag>Activity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Smail</title>
    <link href="/2025/03/22/ZJ3/%E5%88%9D%E8%AF%86smail%201aba6f4b4daf80fb9bbfc0bb1c274e44/"/>
    <url>/2025/03/22/ZJ3/%E5%88%9D%E8%AF%86smail%201aba6f4b4daf80fb9bbfc0bb1c274e44/</url>
    
    <content type="html"><![CDATA[<h1 id="初识smail"><a href="#初识smail" class="headerlink" title="初识smail"></a>初识smail</h1><h1 id="1-什么是JVM、Dalvik、ART"><a href="#1-什么是JVM、Dalvik、ART" class="headerlink" title="1.什么是JVM、Dalvik、ART"></a>1.什么是JVM、Dalvik、ART</h1><p>JVM是JAVA虚拟机，运行JAVA字节码程序</p><p>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex(Dalvik executable)</p><p>Art(Android Runtime)相当于Dalvik的升级版，本质与Dalvik无异</p><ul><li><p><strong>JVM</strong>&nbsp;是 Java 生态的通用运行时，<strong>Dalvik</strong>&nbsp;是 Android 早期的移动优化方案，<strong>ART</strong>&nbsp;是更现代的 Android 运行时，通过预编译和混合模式显著提升性能。三者的演进反映了从跨平台兼容性到移动端极致性能的权衡</p><h3 id="1-JVM（Java-Virtual-Machine）"><a href="#1-JVM（Java-Virtual-Machine）" class="headerlink" title="1. JVM（Java Virtual Machine）"></a><strong>1. JVM（Java Virtual Machine）</strong></h3><ul><li><strong>定义</strong>：JVM 是 Java 平台的核心组件，负责执行&nbsp;<strong>Java 字节码</strong>（<code>.class</code>&nbsp;文件）。</li><li><strong>特点</strong>：<ul><li><strong>跨平台</strong>：遵循“一次编写，到处运行”的理念，通过字节码和 JVM 的适配实现跨平台。</li><li><strong>基于栈的架构</strong>：指令操作基于栈（操作数栈），指令更紧凑但可能执行较慢。</li><li><strong>JIT 编译</strong>（Just-In-Time）：运行时将热点代码（频繁执行的代码）动态编译为本地机器码以提高性能。</li></ul></li><li><strong>应用场景</strong>：传统 Java 应用（如桌面、服务器端程序）。</li></ul><hr><h3 id="2-Dalvik"><a href="#2-Dalvik" class="headerlink" title="2. Dalvik"></a><strong>2. Dalvik</strong></h3><ul><li><strong>定义</strong>：Dalvik 是 Android 早期（5.0 之前）使用的<strong>虚拟机</strong>，专为移动设备优化。</li><li><strong>特点</strong>：<ul><li><strong>基于寄存器架构</strong>：指令直接操作寄存器，执行效率更高（但指令更长）。</li><li><strong>运行 Dex 文件</strong>：将多个&nbsp;<code>.class</code>&nbsp;文件合并优化为单个&nbsp;<code>.dex</code>&nbsp;文件，减少体积和冗余。</li><li><strong>JIT 编译</strong>：在应用运行时动态编译字节码为机器码，但每次启动都需要重新编译。</li><li><strong>多实例设计</strong>：每个 Android 应用运行在独立的 Dalvik 进程中，实现沙盒隔离。</li></ul></li><li><strong>局限性</strong>：JIT 编译导致启动慢、内存占用高，且运行时性能不如预先编译。</li></ul><hr><h3 id="3-ART（Android-Runtime）"><a href="#3-ART（Android-Runtime）" class="headerlink" title="3. ART（Android Runtime）"></a><strong>3. ART（Android Runtime）</strong></h3><ul><li><strong>定义</strong>：ART 是 Android 5.0（Lollipop）及之后取代 Dalvik 的<strong>新一代运行时</strong>。</li><li><strong>核心改进</strong>：<ul><li><strong>AOT 编译</strong>（Ahead-Of-Time）：<strong>安装时</strong>将 Dex 字节码完全编译为本地机器码，直接执行，大幅提升运行速度和能效。</li><li><strong>性能优化</strong>：减少运行时编译开销，CPU 和内存效率更高。</li><li><strong>垃圾回收改进</strong>：减少暂停时间，支持并行处理。</li><li><strong>支持 64 位</strong>：更好地利用现代硬件。</li></ul></li><li><strong>代价</strong>：应用安装时间变长，存储占用增加（需存储编译后的机器码）。</li><li><strong>混合编译（Android 7.0+）</strong>：结合 JIT 和 AOT，安装时仅部分编译，运行时收集热点代码再优化，平衡速度和存储。</li></ul><hr><h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a><strong>对比总结</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>JVM</strong></th><th><strong>Dalvik</strong></th><th><strong>ART</strong></th></tr></thead><tbody><tr><td><strong>架构</strong></td><td>基于栈</td><td>基于寄存器</td><td>基于寄存器（兼容 Dex）</td></tr><tr><td><strong>编译方式</strong></td><td>JIT</td><td>JIT</td><td>AOT + JIT（混合模式）</td></tr><tr><td><strong>文件格式</strong></td><td><code>.class</code>&nbsp;文件</td><td><code>.dex</code>&nbsp;文件</td><td><code>.dex</code>&nbsp;→ 本地机器码</td></tr><tr><td><strong>性能</strong></td><td>适中（跨平台代价）</td><td>启动慢，运行时优化</td><td>启动快，运行高效</td></tr><tr><td><strong>存储占用</strong></td><td>低</td><td>低</td><td>较高（存储预编译机器码）</td></tr><tr><td><strong>适用场景</strong></td><td>桌面/服务器 Java 应用</td><td>早期 Android 设备</td><td>现代 Android 设备（5.0+）</td></tr></tbody></table><hr><h3 id="为什么-Android-不用-JVM？"><a href="#为什么-Android-不用-JVM？" class="headerlink" title="为什么 Android 不用 JVM？"></a><strong>为什么 Android 不用 JVM？</strong></h3><ol><li><strong>专利与授权</strong>：早期 Oracle 对 JVM 专利控制严格，Android 选择绕过。</li><li><strong>移动端优化</strong>：Dalvik/ART 针对低内存、低功耗设备设计（如寄存器架构、Dex 优化）。</li><li><strong>生态隔离</strong>：Android 通过自定义运行时避免与 Java ME 生态冲突。</li></ol></li></ul><h1 id="2-smali及其语法"><a href="#2-smali及其语法" class="headerlink" title="2.smali及其语法"></a><strong>2.smali及其语法</strong></h1><p>smali是Dalvik的寄存器语言，smali代码是dex反编译而来的。（静态修改前提条件）</p><p><a href="https://www.52pojie.cn/thread-1485681-1-1.html">【原木文章】Android改造者之路-02.初探smali功法 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-396966-1-1.html">吾爱破解安卓逆向入门教程（三）-深入Smali文件 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-397858-1-1.html">吾爱破解安卓逆向入门教程（四）-Smali函数分析 - 吾爱破解 - 52pojie.cn</a></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><strong>关键字</strong></h3><table><thead><tr><th><strong>名称</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>.class</td><td>类名</td></tr><tr><td>.super</td><td>父类名，继承的上级类名名称</td></tr><tr><td>.source</td><td>源名</td></tr><tr><td>.field</td><td>变量</td></tr><tr><td>.method</td><td>方法名</td></tr><tr><td>.register</td><td>寄存器</td></tr><tr><td>.end method</td><td>方法名的结束</td></tr><tr><td>public</td><td>公有</td></tr><tr><td>protected</td><td>半公开，只有同一家人才能用</td></tr><tr><td>private</td><td>私有，只能自己使用</td></tr><tr><td>.parameter</td><td>方法参数</td></tr><tr><td>.prologue</td><td>方法开始</td></tr><tr><td>.line xxx</td><td>位于第xxx行</td></tr></tbody></table><h3 id="数据类型对应"><a href="#数据类型对应" class="headerlink" title="数据类型对应"></a>数据类型对应</h3><table><thead><tr><th><strong>smali类型</strong></th><th><strong>java类型</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>V</td><td>void</td><td>无返回值</td></tr><tr><td>Z</td><td>boolean</td><td>布尔值类型，返回0或1</td></tr><tr><td>B</td><td>byte</td><td>字节类型，返回字节</td></tr><tr><td>S</td><td>short</td><td>短整数类型，返回数字</td></tr><tr><td>C</td><td>char</td><td>字符类型，返回字符</td></tr><tr><td>I</td><td>int</td><td>整数类型，返回数字</td></tr><tr><td>J</td><td>long （64位 需要2个寄存器存储）</td><td>长整数类型，返回数字</td></tr><tr><td>F</td><td>float</td><td>单浮点类型，返回数字</td></tr><tr><td>D</td><td>double （64位 需要2个寄存器存储）</td><td>双浮点类型，返回数字</td></tr><tr><td>string</td><td>String</td><td>文本类型，返回字符串</td></tr><tr><td>Lxxx/xxx/xxx</td><td>object</td><td>对象类型，返回对象</td></tr></tbody></table><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><table><thead><tr><th><strong>关键字</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>const</td><td>重写整数属性，真假属性内容，只能是数字类型</td></tr><tr><td>const-string</td><td>重写字符串内容</td></tr><tr><td>const-wide</td><td>重写长整数类型，多用于修改到期时间。</td></tr><tr><td>return</td><td>返回指令</td></tr><tr><td>if-eq</td><td>全称equal(a=b)，比较寄存器ab内容，相同则跳</td></tr><tr><td>if-ne</td><td>全称not equal(a!=b)，ab内容不相同则跳</td></tr><tr><td>if-eqz</td><td>全称equal zero(a=0)，z即是0的标记，a等于0则跳</td></tr><tr><td>if-nez</td><td>全称not equal zero(a!=0)，a不等于0则跳</td></tr><tr><td>if-ge</td><td>全称greater&nbsp;equal(a&gt;=b)，a大于或等于则跳</td></tr><tr><td>if-le</td><td>全称little equal(a&lt;=b)，a小于或等于则跳</td></tr><tr><td>goto</td><td>强制跳到指定位置</td></tr><tr><td>switch</td><td>分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td></tr><tr><td>iget</td><td>获取寄存器数据</td></tr></tbody></table><ul><li><p>if-eqz 另一个是if-nez 这两条指令是相对的</p><p>  (1)if-eqz vA, vB, :cond_**”&nbsp; &nbsp;如果vA等于vB则跳转到:cond_**</p><p>  (2)if-nez vA, vB, :cond_**”&nbsp; &nbsp;如果vA不等于vB则跳转到:cond_**</p></li></ul><p>其余指令可用语法工具查询</p><p>定位方法：搜索弹窗关键字、抓取按钮id</p><ul><li><p>分析示例</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个私有、静态、不可变的方法   方法名</span><br>.method <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> onCreate$lambda-<span class="hljs-number">2</span>(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z <span class="hljs-comment">//(这里面是方法的参数)这里是方法返回值类型，表示布尔值类型，返回假或真</span><br>    .registers <span class="hljs-number">7</span>  <span class="hljs-comment">//寄存器数量</span><br><br>    .line <span class="hljs-number">33</span>  <span class="hljs-comment">//代码所在的行数</span><br>    iget p0, p0, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I  <span class="hljs-comment">//读取p0(第一个参数，参考寄存器知识)中element的值赋值给p0</span><br><br>    const/<span class="hljs-number">4</span> p5, <span class="hljs-number">0x1</span>  <span class="hljs-comment">//p5赋值1</span><br><br>    const/<span class="hljs-number">16</span> v0, <span class="hljs-number">0xa</span> <span class="hljs-comment">//v0赋值10，在16进制里a表示10</span><br><br>    <span class="hljs-keyword">if</span>-ge p0, v0, :cond_15  <span class="hljs-comment">//判断p0的值是否大于或等于v0的值(即p0的值是否大于或等于10)，如果大于或等于则跳转到:cond_15</span><br><br>    .line <span class="hljs-number">34</span>  <span class="hljs-comment">//以下是常见的Toast弹窗代码</span><br>    check-cast p1, Landroid/content/Context; <span class="hljs-comment">//检查Context对象引用</span><br><br>    const-string p0, <span class="hljs-string">"请先获取10个硬币哦"</span> <span class="hljs-comment">//弹窗文本信息，把""里的字符串数据赋值给p0</span><br><br>    check-cast p0, Ljava/lang/CharSequence; <span class="hljs-comment">//检查CharSequence对象引用</span><br><br>    invoke-<span class="hljs-keyword">static</span> {p1, p0, p5}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast; <br>    <span class="hljs-comment">//将弹窗文本、显示时间等信息传给p1</span><br><br>    move-result-object p0  <span class="hljs-comment">//结果传递给p0</span><br><br>    invoke-virtual {p0}, Landroid/widget/Toast;-&gt;show()V  <span class="hljs-comment">//当看到这个Toast;-&gt;show你就应该反应过来这里是弹窗代码</span><br><br>    <span class="hljs-keyword">goto</span> :goto_31  <span class="hljs-comment">//跳转到:goto_31</span><br><br>    :cond_15 <span class="hljs-comment">//跳转的一个地址</span><br><br>    invoke-virtual {p1}, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z  <span class="hljs-comment">//判断isvip方法的返回值是否为真(即结果是否为1)</span><br><br>    move-result p0  <span class="hljs-comment">//结果赋值给p0</span><br><br>    <span class="hljs-keyword">if</span>-eqz p0, :cond_43 <span class="hljs-comment">//如果结果为0则跳转cond_43地址</span><br><br>    const p0, <span class="hljs-number">0x7f0d0018</span>  <span class="hljs-comment">//在arsc中的id索引，这个值可以进行查询</span><br><br>    .line <span class="hljs-number">37</span><br>    invoke-virtual {p2, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V <span class="hljs-comment">//设置图片资源</span><br><br>    const p0, <span class="hljs-number">0x7f0d0008</span><br><br>    .line <span class="hljs-number">38</span><br>    invoke-virtual {p3, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V<br><br>    const p0, <span class="hljs-number">0x7f0d000a</span><br><br>    .line <span class="hljs-number">39</span><br>    invoke-virtual {p4, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V<br><br>    .line <span class="hljs-number">40</span><br>    sget-object p0, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; <br><br>    check-cast p1, Landroid/content/Context;<br><br>    const/<span class="hljs-number">4</span> p2, <span class="hljs-number">0x2</span> <span class="hljs-comment">//p2赋值2</span><br><br>    const-string p3, <span class="hljs-string">"level"</span> <span class="hljs-comment">//sp的索引</span><br><br>    invoke-virtual {p0, p1, p3, p2}, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;Ljava/lang/String;I)V <span class="hljs-comment">//写入数据</span><br><br>    <span class="hljs-keyword">goto</span> :goto_50 <span class="hljs-comment">//跳转地址</span><br><br>    :cond_43<br><br>    check-cast p1, Landroid/content/Context;<br><br>    const-string p0, <span class="hljs-string">"\u8bf7\u5148\u5145\u503c\u5927\u4f1a\u5458\u54e6\uff01"</span> <span class="hljs-comment">//请先充值大会员哦！</span><br><br>    check-cast p0, Ljava/lang/CharSequence;<br><br>    invoke-<span class="hljs-keyword">static</span> {p1, p0, p5}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;<br><br>    move-result-object p0<br><br>    invoke-virtual {p0}, Landroid/widget/Toast;-&gt;show()V<br><br>    :goto_50<br>    <span class="hljs-keyword">return</span> p5  <span class="hljs-comment">//返回p5的值</span><br>.end method <span class="hljs-comment">//方法结束</span><br><br><span class="hljs-comment">//判断是否是大会员的方法</span><br>.method <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-title function_">isvip</span><span class="hljs-params">()</span>Z<br>    .registers <span class="hljs-number">2</span><br><br>    const/<span class="hljs-number">4</span> v0, <span class="hljs-number">0x0</span> <span class="hljs-comment">//v0赋值0</span><br><br>    <span class="hljs-keyword">return</span> v0 <span class="hljs-comment">//返回v0的值</span><br><br>.end method<br><br></code></pre></td></tr></tbody></table></figure><p>  <a href="https://www.52pojie.cn/thread-650395-1-1.html">https://www.52pojie.cn/thread-650395-1-1.html</a></p><p>  <a href="https://www.52pojie.cn/thread-632178-1-1.html">安卓游戏内购破解之滚动的天空 - 吾爱破解 - 52pojie.cn</a></p><p>  <a href="https://www.52pojie.cn/thread-654654-1-1.html">《教我兄弟学Android逆向03 破解第一个Android游戏 》 - 吾爱破解 - 52pojie.cn</a></p></li></ul><h1 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h1><ul><li><p>1.首先安装好核心破解，勾选后重启可以使用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222040498.png"></p></li><li><p>2.安装课程所需Demo</p><p>  <a href="https://pan.baidu.com/s/1cUInoi">https://pan.baidu.com/s/1cUInoi</a>   密码：07p9</p></li><li><p>3.在jadx中查询关键字（有时候反编译过程中会将汉字反编译为unicode编码）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041246.png"></p></li><li><p>修改代码逻辑</p><p>  将判断条件改为强制跳转</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041482.png"></p><p>  跳转后注释掉其判断条件，不管是否为真都执行下列逻辑</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041586.png"></p></li></ul><p><a href="https://www.notion.so/1b0a6f4b4daf8074a46adc1041b616a6?pvs=21">切水果大战</a></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222042093.png"></p>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>smail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识APK文件结构，双开，汉化，基础修改</title>
    <link href="/2025/03/05/ZJ2/%E5%88%9D%E8%AF%86APK%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8F%8C%E5%BC%80%EF%BC%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E5%9F%BA%E7%A1%80%E4%BF%AE%E6%94%B9%201aba6f4b4daf806ab293e060e8f7d41f/"/>
    <url>/2025/03/05/ZJ2/%E5%88%9D%E8%AF%86APK%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8F%8C%E5%BC%80%EF%BC%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E5%9F%BA%E7%A1%80%E4%BF%AE%E6%94%B9%201aba6f4b4daf806ab293e060e8f7d41f/</url>
    
    <content type="html"><![CDATA[<h1 id="初识APK文件结构，双开，汉化，基础修改"><a href="#初识APK文件结构，双开，汉化，基础修改" class="headerlink" title="初识APK文件结构，双开，汉化，基础修改"></a>初识APK文件结构，双开，汉化，基础修改</h1><h1 id="1-APK结构"><a href="#1-APK结构" class="headerlink" title="1.APK结构"></a>1.APK结构</h1><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p><table><thead><tr><th><strong>文件</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>assets目录</td><td>存放APK的静态资源文件，比如视频，音频，图片等</td></tr><tr><td>lib 目录</td><td>armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，其目录下的.so文件是c或c++编译的动态链接库文件</td></tr><tr><td>META-INF目录</td><td>保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证(验证文件是否又被修改)</td></tr><tr><td>res目录</td><td>res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</td></tr><tr><td>AndroidManifest.xml文件</td><td>APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td></tr><tr><td>classes.dex文件</td><td>classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td></tr><tr><td>resources.arsc文件</td><td>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td></tr></tbody></table><ul><li><p>APK 文件是一个压缩文件，可通过解压工具对其进行解压缩以查看其内部结构，但解压缩后的文件不能直接运行，必须重新打包并签名后才能安装到设备上。</p><h3 id="1-文件结构"><a href="#1-文件结构" class="headerlink" title="1. 文件结构"></a><strong>1. 文件结构</strong></h3><ul><li><strong>/META-INF文件夹</strong> ：包含应用程序的签名信息等元数据，如MANIFEST.MF（应用的清单文件）、CERT.SF（包含签名信息，用于校验应用包的完整性）、CERT.RSA（应用的数字证书，存储了证书信息）。</li><li><strong>/res文件夹</strong> ：存储应用程序的各种资源文件，如界面布局（布局文件，如<code>activity_main.xml</code>）、图形图像（放在\drawable- [配置]文件夹中，不同的屏幕密度有不同的目录）、字符串（<code>strings.xml</code>）、样式（<code>styles.xml</code>）、颜色（<code>colors.xml</code>）、动画（如<code>animated.xml</code>）等。</li><li><strong>/assets文件夹</strong> ：存放应用程序的任意资源，如配置文件、图片、视频等，这些文件会在编译时保留在原样，不会被处理。</li><li><strong>/lib文件夹</strong> ：用于存储应用程序的原生代码库（ <code>.so</code>文件），针对不同的处理器架构有不同的文件夹（如<code>/lib/armeabi- v7a/</code>、<code>/lib/arm64- v8a/</code>、<code>/lib/x86/</code>等）。</li><li><strong>/AndroidManifest.xml</strong> ：是应用程序的配置文件，声明了应用程序的组件（如活动、服务、广播接收器、内容提供者）、权限、图标、标签、版本等重要信息。</li><li><strong>/classes.dex文件</strong> ：是应用程序的 Java 或 Kotlin 编译生成的字节码文件，包含应用程序的执行逻辑。</li><li><strong>/resources.arsc文件</strong> ：是 Android 资源文件，包含了应用程序中的各种资源（如字符串、样式、颜色等）的索引信息。</li><li><strong>其他文件</strong> ：如证书文件（如<code>/META-INF/CERT.SF</code> 和<code>/META-INF/CERT.RSA</code>）、应用图标、应用启动屏文件等。</li></ul><h3 id="2-APK的加载过程"><a href="#2-APK的加载过程" class="headerlink" title="2. APK的加载过程"></a><strong>2. APK的加载过程</strong></h3><p>  当用户安装 APK 文件时，Android 系统会解析 APK 文件的结构，提取其中的 AndroidManifest.xml 文件和 resources.arsc 文件，识别出应用程序的组件、资源、权限等信息。之后，系统会将 classes.dex 文件中的字节码加载到内存中，并解释执行，完成应用程序的启动和运行。在运行过程中，系统会根据需要动态加载并使用其他资源文件（如 res 文件夹中的资源文件和 assets 文件夹中的文件）。</p></li></ul><h1 id="2-双开及原理"><a href="#2-双开及原理" class="headerlink" title="2.双开及原理"></a>2.双开及原理</h1><p><a href="https://blog.csdn.net/u014294681/article/details/116270479">【VirtualAPP 双开系列08】如何实现多开 - UID_virtualapp 使用-CSDN博客</a></p><p>双开：简单来说，就是手机同时运行两个或多个相同的应用，例如同时运行两个微信</p><table><thead><tr><th><strong>原理</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>修改包名</td><td>让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td></tr><tr><td>修改Framework</td><td>对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td></tr><tr><td>通过虚拟化技术实现</td><td>虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td></tr><tr><td>以插件机制运行</td><td>利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td></tr></tbody></table><h2 id="（1）通过MT管理器修改包名实现双开"><a href="#（1）通过MT管理器修改包名实现双开" class="headerlink" title="（1）通过MT管理器修改包名实现双开"></a>（1）通过MT管理器修改包名实现双开</h2><p>1.使用MT管理器提取应用的安装包</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/51cc4787-95b3-4e35-a392-92d492744021.png"></p><p>2.找到我们要提取的apk，提取定位</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/image.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221955092.png"></p><p>3.通过APK共存功能修改包名实现apk双开</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957108.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957109.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957110.png"></p><p>4.实现双开</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958621.png"></p><h2 id="（2）通过NP管理器修改包名实现双开"><a href="#（2）通过NP管理器修改包名实现双开" class="headerlink" title="（2）通过NP管理器修改包名实现双开"></a>（2）通过NP管理器修改包名实现双开</h2><p>流程与MT大致相同</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958997.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958998.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958999.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958000.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958001.png"></p><p>打开修改报名后的apk安装</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221959552.png"></p><p>就可以在手机上完成双开。因为修改报名实现双开动了应用的签名信息，如果开发者做了签名校验可能会出现安装后闪退崩溃等情况。</p><h1 id="3-汉化APK"><a href="#3-汉化APK" class="headerlink" title="3.汉化APK"></a>3.汉化APK</h1><p>使用专门的工具对外文版的软件资源进行读取，翻译，修改，回写等一系列处理，使用软件的菜单，对话框，提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化。</p><p>（需要注意，如果要直接装应用就应该先签名安装，看石否有签名校验导致的闪退。）</p><p><strong>基本上字符串都是在arsc里，建议一键汉化，然后再润色。少量没汉化到的字符串参考视频中的方法定位去逐个汉化。</strong></p><p>   <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221959189.png"></p><h2 id="（1）简单的英语字句修改"><a href="#（1）简单的英语字句修改" class="headerlink" title="（1）简单的英语字句修改"></a>（1）简单的英语字句修改</h2><ul><li><p>1.我们在管理器中点击查看</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000125.png"></p></li><li><p>2.利用MT自带的搜索功能</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000631.png"></p></li><li><p>3.点击高级搜索相当使用全局搜索（搜索应用中的全部文件）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000935.png"></p></li><li><p>4.对查询到的结果进行反编译</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001609.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001610.png"></p></li><li><p>5.对内容进行修改后保</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001075.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001076.png"></p></li><li><p>6.发现我们对内容进行了重新签名，应用与最开始安装已经是不一样的了。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222004158.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222002990.png"></p></li><li><p>7.对于卸载提示可以直接关闭处理，在设置里的APK安装检验证关闭就不会再提示</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005497.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005498.png"></p></li><li><p>8.关闭后还会出现签名不一致安装失败的现象。（可以卸载原应用或利用XP的模块核心破解来解决这类问题）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005117.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005118.png"></p></li><li><p>9.完成后我们会发现修改部分已经变为中文模式</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006665.png"></p></li></ul><h2 id="（2）利用开发者助手搜索"><a href="#（2）利用开发者助手搜索" class="headerlink" title="（2）利用开发者助手搜索"></a>（2）利用开发者助手搜索</h2><ul><li><p>1.下载安装后会有一个小图标</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006876.png"></p></li><li><p>2.我们到需要修改的app页面点击图标，点击开始资源分析</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006872.png"></p></li><li><p>3.点击需要查看的亮条部分，点击复制我们需要的文本信息，再回到MT管理器中重复上述步骤即可</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007495.png"></p></li></ul><p>也可以直接再MT浏览器中开通汉化翻译插件</p><p>我们发现第二次签名后软件可以直接安装成功，原因是MT自带的签名信息一致，不会出现签名信息冲突的情况，可以直接覆盖安装</p><h2 id="（3）放在dex文件中"><a href="#（3）放在dex文件中" class="headerlink" title="（3）放在dex文件中"></a>（3）放在dex文件中</h2><ul><li><p>1.选择dex编辑器++</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007447.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007448.png"></p></li><li><p>2.同样来搜索我们修改的字符，搜索类型可以自行选择。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008816.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008817.png"></p></li><li><p>3.很快就能的得到搜索结果</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008163.png"></p></li><li><p>4.修改后保存退出重复上述步骤</p></li></ul><h1 id="4-初识AndroidManifest-xml"><a href="#4-初识AndroidManifest-xml" class="headerlink" title="4.初识AndroidManifest.xml"></a>4.<strong>初识AndroidManifest.xml</strong></h1><p>AndroidManifest.xml文件是整个应用程序的信息描述文件，定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p><table><thead><tr><th><strong>属性</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>versionCode</td><td>版本号，主要用来更新，例如:12</td></tr><tr><td>versionName</td><td>版本名，给用户看的，例如:1.2</td></tr><tr><td>package</td><td>包名，例如：com.zj.52pj.demo</td></tr><tr><td>uses-permission android:name=””</td><td>应用权限，例如：android.permission.INTERNET 代表网络权限</td></tr><tr><td>android:label=”@string/app_name”</td><td>应用名称</td></tr><tr><td>android:icon=”@mipmap/ic_launcher”</td><td>应用图标路径</td></tr><tr><td>android:debuggable=”true”</td><td>应用是否开启debug权限</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>使用NT浏览器修改AndroidManifest.xml文件</p><ul><li><p>1.直接进入查看编译</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008126.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009665.png"></p></li><li><p>2.修改apk图标和名字，在NP管理器中使用通用编辑进行修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009864.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009865.png"></p></li><li><p>3.保存安装发现又出现签名信息不一致因为上边用的MT管理器签名，和现在NP签名不一致，按上述方法解决即可，安装后可以观察到修改成功。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009655.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009656.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009657.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APK结构</tag>
      
      <tag>双开原理</tag>
      
      <tag>APK汉化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/02/hello-world/"/>
    <url>/2025/03/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
