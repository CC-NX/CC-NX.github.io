<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初识Smail</title>
    <link href="/2025/03/22/ZJ3/%E5%88%9D%E8%AF%86smail%201aba6f4b4daf80fb9bbfc0bb1c274e44/"/>
    <url>/2025/03/22/ZJ3/%E5%88%9D%E8%AF%86smail%201aba6f4b4daf80fb9bbfc0bb1c274e44/</url>
    
    <content type="html"><![CDATA[<h1 id="初识smail"><a href="#初识smail" class="headerlink" title="初识smail"></a>初识smail</h1><h1 id="1-什么是JVM、Dalvik、ART"><a href="#1-什么是JVM、Dalvik、ART" class="headerlink" title="1.什么是JVM、Dalvik、ART"></a>1.什么是JVM、Dalvik、ART</h1><p>JVM是JAVA虚拟机，运行JAVA字节码程序</p><p>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex(Dalvik executable)</p><p>Art(Android Runtime)相当于Dalvik的升级版，本质与Dalvik无异</p><ul><li><p><strong>JVM</strong>&nbsp;是 Java 生态的通用运行时，<strong>Dalvik</strong>&nbsp;是 Android 早期的移动优化方案，<strong>ART</strong>&nbsp;是更现代的 Android 运行时，通过预编译和混合模式显著提升性能。三者的演进反映了从跨平台兼容性到移动端极致性能的权衡</p><h3 id="1-JVM（Java-Virtual-Machine）"><a href="#1-JVM（Java-Virtual-Machine）" class="headerlink" title="1. JVM（Java Virtual Machine）"></a><strong>1. JVM（Java Virtual Machine）</strong></h3><ul><li><strong>定义</strong>：JVM 是 Java 平台的核心组件，负责执行&nbsp;<strong>Java 字节码</strong>（<code>.class</code>&nbsp;文件）。</li><li><strong>特点</strong>：<ul><li><strong>跨平台</strong>：遵循“一次编写，到处运行”的理念，通过字节码和 JVM 的适配实现跨平台。</li><li><strong>基于栈的架构</strong>：指令操作基于栈（操作数栈），指令更紧凑但可能执行较慢。</li><li><strong>JIT 编译</strong>（Just-In-Time）：运行时将热点代码（频繁执行的代码）动态编译为本地机器码以提高性能。</li></ul></li><li><strong>应用场景</strong>：传统 Java 应用（如桌面、服务器端程序）。</li></ul><hr><h3 id="2-Dalvik"><a href="#2-Dalvik" class="headerlink" title="2. Dalvik"></a><strong>2. Dalvik</strong></h3><ul><li><strong>定义</strong>：Dalvik 是 Android 早期（5.0 之前）使用的<strong>虚拟机</strong>，专为移动设备优化。</li><li><strong>特点</strong>：<ul><li><strong>基于寄存器架构</strong>：指令直接操作寄存器，执行效率更高（但指令更长）。</li><li><strong>运行 Dex 文件</strong>：将多个&nbsp;<code>.class</code>&nbsp;文件合并优化为单个&nbsp;<code>.dex</code>&nbsp;文件，减少体积和冗余。</li><li><strong>JIT 编译</strong>：在应用运行时动态编译字节码为机器码，但每次启动都需要重新编译。</li><li><strong>多实例设计</strong>：每个 Android 应用运行在独立的 Dalvik 进程中，实现沙盒隔离。</li></ul></li><li><strong>局限性</strong>：JIT 编译导致启动慢、内存占用高，且运行时性能不如预先编译。</li></ul><hr><h3 id="3-ART（Android-Runtime）"><a href="#3-ART（Android-Runtime）" class="headerlink" title="3. ART（Android Runtime）"></a><strong>3. ART（Android Runtime）</strong></h3><ul><li><strong>定义</strong>：ART 是 Android 5.0（Lollipop）及之后取代 Dalvik 的<strong>新一代运行时</strong>。</li><li><strong>核心改进</strong>：<ul><li><strong>AOT 编译</strong>（Ahead-Of-Time）：<strong>安装时</strong>将 Dex 字节码完全编译为本地机器码，直接执行，大幅提升运行速度和能效。</li><li><strong>性能优化</strong>：减少运行时编译开销，CPU 和内存效率更高。</li><li><strong>垃圾回收改进</strong>：减少暂停时间，支持并行处理。</li><li><strong>支持 64 位</strong>：更好地利用现代硬件。</li></ul></li><li><strong>代价</strong>：应用安装时间变长，存储占用增加（需存储编译后的机器码）。</li><li><strong>混合编译（Android 7.0+）</strong>：结合 JIT 和 AOT，安装时仅部分编译，运行时收集热点代码再优化，平衡速度和存储。</li></ul><hr><h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a><strong>对比总结</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>JVM</strong></th><th><strong>Dalvik</strong></th><th><strong>ART</strong></th></tr></thead><tbody><tr><td><strong>架构</strong></td><td>基于栈</td><td>基于寄存器</td><td>基于寄存器（兼容 Dex）</td></tr><tr><td><strong>编译方式</strong></td><td>JIT</td><td>JIT</td><td>AOT + JIT（混合模式）</td></tr><tr><td><strong>文件格式</strong></td><td><code>.class</code>&nbsp;文件</td><td><code>.dex</code>&nbsp;文件</td><td><code>.dex</code>&nbsp;→ 本地机器码</td></tr><tr><td><strong>性能</strong></td><td>适中（跨平台代价）</td><td>启动慢，运行时优化</td><td>启动快，运行高效</td></tr><tr><td><strong>存储占用</strong></td><td>低</td><td>低</td><td>较高（存储预编译机器码）</td></tr><tr><td><strong>适用场景</strong></td><td>桌面/服务器 Java 应用</td><td>早期 Android 设备</td><td>现代 Android 设备（5.0+）</td></tr></tbody></table><hr><h3 id="为什么-Android-不用-JVM？"><a href="#为什么-Android-不用-JVM？" class="headerlink" title="为什么 Android 不用 JVM？"></a><strong>为什么 Android 不用 JVM？</strong></h3><ol><li><strong>专利与授权</strong>：早期 Oracle 对 JVM 专利控制严格，Android 选择绕过。</li><li><strong>移动端优化</strong>：Dalvik/ART 针对低内存、低功耗设备设计（如寄存器架构、Dex 优化）。</li><li><strong>生态隔离</strong>：Android 通过自定义运行时避免与 Java ME 生态冲突。</li></ol></li></ul><h1 id="2-smali及其语法"><a href="#2-smali及其语法" class="headerlink" title="2.smali及其语法"></a><strong>2.smali及其语法</strong></h1><p>smali是Dalvik的寄存器语言，smali代码是dex反编译而来的。（静态修改前提条件）</p><p><a href="https://www.52pojie.cn/thread-1485681-1-1.html">【原木文章】Android改造者之路-02.初探smali功法 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-396966-1-1.html">吾爱破解安卓逆向入门教程（三）-深入Smali文件 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-397858-1-1.html">吾爱破解安卓逆向入门教程（四）-Smali函数分析 - 吾爱破解 - 52pojie.cn</a></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><strong>关键字</strong></h3><table><thead><tr><th><strong>名称</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>.class</td><td>类名</td></tr><tr><td>.super</td><td>父类名，继承的上级类名名称</td></tr><tr><td>.source</td><td>源名</td></tr><tr><td>.field</td><td>变量</td></tr><tr><td>.method</td><td>方法名</td></tr><tr><td>.register</td><td>寄存器</td></tr><tr><td>.end method</td><td>方法名的结束</td></tr><tr><td>public</td><td>公有</td></tr><tr><td>protected</td><td>半公开，只有同一家人才能用</td></tr><tr><td>private</td><td>私有，只能自己使用</td></tr><tr><td>.parameter</td><td>方法参数</td></tr><tr><td>.prologue</td><td>方法开始</td></tr><tr><td>.line xxx</td><td>位于第xxx行</td></tr></tbody></table><h3 id="数据类型对应"><a href="#数据类型对应" class="headerlink" title="数据类型对应"></a>数据类型对应</h3><table><thead><tr><th><strong>smali类型</strong></th><th><strong>java类型</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>V</td><td>void</td><td>无返回值</td></tr><tr><td>Z</td><td>boolean</td><td>布尔值类型，返回0或1</td></tr><tr><td>B</td><td>byte</td><td>字节类型，返回字节</td></tr><tr><td>S</td><td>short</td><td>短整数类型，返回数字</td></tr><tr><td>C</td><td>char</td><td>字符类型，返回字符</td></tr><tr><td>I</td><td>int</td><td>整数类型，返回数字</td></tr><tr><td>J</td><td>long （64位 需要2个寄存器存储）</td><td>长整数类型，返回数字</td></tr><tr><td>F</td><td>float</td><td>单浮点类型，返回数字</td></tr><tr><td>D</td><td>double （64位 需要2个寄存器存储）</td><td>双浮点类型，返回数字</td></tr><tr><td>string</td><td>String</td><td>文本类型，返回字符串</td></tr><tr><td>Lxxx/xxx/xxx</td><td>object</td><td>对象类型，返回对象</td></tr></tbody></table><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><table><thead><tr><th><strong>关键字</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>const</td><td>重写整数属性，真假属性内容，只能是数字类型</td></tr><tr><td>const-string</td><td>重写字符串内容</td></tr><tr><td>const-wide</td><td>重写长整数类型，多用于修改到期时间。</td></tr><tr><td>return</td><td>返回指令</td></tr><tr><td>if-eq</td><td>全称equal(a=b)，比较寄存器ab内容，相同则跳</td></tr><tr><td>if-ne</td><td>全称not equal(a!=b)，ab内容不相同则跳</td></tr><tr><td>if-eqz</td><td>全称equal zero(a=0)，z即是0的标记，a等于0则跳</td></tr><tr><td>if-nez</td><td>全称not equal zero(a!=0)，a不等于0则跳</td></tr><tr><td>if-ge</td><td>全称greater&nbsp;equal(a&gt;=b)，a大于或等于则跳</td></tr><tr><td>if-le</td><td>全称little equal(a&lt;=b)，a小于或等于则跳</td></tr><tr><td>goto</td><td>强制跳到指定位置</td></tr><tr><td>switch</td><td>分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td></tr><tr><td>iget</td><td>获取寄存器数据</td></tr></tbody></table><ul><li><p>if-eqz 另一个是if-nez 这两条指令是相对的</p><p>  (1)if-eqz vA, vB, :cond_**”&nbsp; &nbsp;如果vA等于vB则跳转到:cond_**</p><p>  (2)if-nez vA, vB, :cond_**”&nbsp; &nbsp;如果vA不等于vB则跳转到:cond_**</p></li></ul><p>其余指令可用语法工具查询</p><p>定位方法：搜索弹窗关键字、抓取按钮id</p><ul><li><p>分析示例</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个私有、静态、不可变的方法   方法名</span><br>.method <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> onCreate$lambda-<span class="hljs-number">2</span>(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z <span class="hljs-comment">//(这里面是方法的参数)这里是方法返回值类型，表示布尔值类型，返回假或真</span><br>    .registers <span class="hljs-number">7</span>  <span class="hljs-comment">//寄存器数量</span><br><br>    .line <span class="hljs-number">33</span>  <span class="hljs-comment">//代码所在的行数</span><br>    iget p0, p0, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I  <span class="hljs-comment">//读取p0(第一个参数，参考寄存器知识)中element的值赋值给p0</span><br><br>    const/<span class="hljs-number">4</span> p5, <span class="hljs-number">0x1</span>  <span class="hljs-comment">//p5赋值1</span><br><br>    const/<span class="hljs-number">16</span> v0, <span class="hljs-number">0xa</span> <span class="hljs-comment">//v0赋值10，在16进制里a表示10</span><br><br>    <span class="hljs-keyword">if</span>-ge p0, v0, :cond_15  <span class="hljs-comment">//判断p0的值是否大于或等于v0的值(即p0的值是否大于或等于10)，如果大于或等于则跳转到:cond_15</span><br><br>    .line <span class="hljs-number">34</span>  <span class="hljs-comment">//以下是常见的Toast弹窗代码</span><br>    check-cast p1, Landroid/content/Context; <span class="hljs-comment">//检查Context对象引用</span><br><br>    const-string p0, <span class="hljs-string">"请先获取10个硬币哦"</span> <span class="hljs-comment">//弹窗文本信息，把""里的字符串数据赋值给p0</span><br><br>    check-cast p0, Ljava/lang/CharSequence; <span class="hljs-comment">//检查CharSequence对象引用</span><br><br>    invoke-<span class="hljs-keyword">static</span> {p1, p0, p5}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast; <br>    <span class="hljs-comment">//将弹窗文本、显示时间等信息传给p1</span><br><br>    move-result-object p0  <span class="hljs-comment">//结果传递给p0</span><br><br>    invoke-virtual {p0}, Landroid/widget/Toast;-&gt;show()V  <span class="hljs-comment">//当看到这个Toast;-&gt;show你就应该反应过来这里是弹窗代码</span><br><br>    <span class="hljs-keyword">goto</span> :goto_31  <span class="hljs-comment">//跳转到:goto_31</span><br><br>    :cond_15 <span class="hljs-comment">//跳转的一个地址</span><br><br>    invoke-virtual {p1}, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z  <span class="hljs-comment">//判断isvip方法的返回值是否为真(即结果是否为1)</span><br><br>    move-result p0  <span class="hljs-comment">//结果赋值给p0</span><br><br>    <span class="hljs-keyword">if</span>-eqz p0, :cond_43 <span class="hljs-comment">//如果结果为0则跳转cond_43地址</span><br><br>    const p0, <span class="hljs-number">0x7f0d0018</span>  <span class="hljs-comment">//在arsc中的id索引，这个值可以进行查询</span><br><br>    .line <span class="hljs-number">37</span><br>    invoke-virtual {p2, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V <span class="hljs-comment">//设置图片资源</span><br><br>    const p0, <span class="hljs-number">0x7f0d0008</span><br><br>    .line <span class="hljs-number">38</span><br>    invoke-virtual {p3, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V<br><br>    const p0, <span class="hljs-number">0x7f0d000a</span><br><br>    .line <span class="hljs-number">39</span><br>    invoke-virtual {p4, p0}, Landroid/widget/ImageView;-&gt;setImageResource(I)V<br><br>    .line <span class="hljs-number">40</span><br>    sget-object p0, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; <br><br>    check-cast p1, Landroid/content/Context;<br><br>    const/<span class="hljs-number">4</span> p2, <span class="hljs-number">0x2</span> <span class="hljs-comment">//p2赋值2</span><br><br>    const-string p3, <span class="hljs-string">"level"</span> <span class="hljs-comment">//sp的索引</span><br><br>    invoke-virtual {p0, p1, p3, p2}, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;Ljava/lang/String;I)V <span class="hljs-comment">//写入数据</span><br><br>    <span class="hljs-keyword">goto</span> :goto_50 <span class="hljs-comment">//跳转地址</span><br><br>    :cond_43<br><br>    check-cast p1, Landroid/content/Context;<br><br>    const-string p0, <span class="hljs-string">"\u8bf7\u5148\u5145\u503c\u5927\u4f1a\u5458\u54e6\uff01"</span> <span class="hljs-comment">//请先充值大会员哦！</span><br><br>    check-cast p0, Ljava/lang/CharSequence;<br><br>    invoke-<span class="hljs-keyword">static</span> {p1, p0, p5}, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;<br><br>    move-result-object p0<br><br>    invoke-virtual {p0}, Landroid/widget/Toast;-&gt;show()V<br><br>    :goto_50<br>    <span class="hljs-keyword">return</span> p5  <span class="hljs-comment">//返回p5的值</span><br>.end method <span class="hljs-comment">//方法结束</span><br><br><span class="hljs-comment">//判断是否是大会员的方法</span><br>.method <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-title function_">isvip</span><span class="hljs-params">()</span>Z<br>    .registers <span class="hljs-number">2</span><br><br>    const/<span class="hljs-number">4</span> v0, <span class="hljs-number">0x0</span> <span class="hljs-comment">//v0赋值0</span><br><br>    <span class="hljs-keyword">return</span> v0 <span class="hljs-comment">//返回v0的值</span><br><br>.end method<br><br></code></pre></td></tr></tbody></table></figure><p>  <a href="https://www.52pojie.cn/thread-650395-1-1.html">https://www.52pojie.cn/thread-650395-1-1.html</a></p><p>  <a href="https://www.52pojie.cn/thread-632178-1-1.html">安卓游戏内购破解之滚动的天空 - 吾爱破解 - 52pojie.cn</a></p><p>  <a href="https://www.52pojie.cn/thread-654654-1-1.html">《教我兄弟学Android逆向03 破解第一个Android游戏 》 - 吾爱破解 - 52pojie.cn</a></p></li></ul><h1 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h1><ul><li><p>1.首先安装好核心破解，勾选后重启可以使用</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222040498.png"></p></li><li><p>2.安装课程所需Demo</p><p>  <a href="https://pan.baidu.com/s/1cUInoi">https://pan.baidu.com/s/1cUInoi</a>   密码：07p9</p></li><li><p>3.在jadx中查询关键字（有时候反编译过程中会将汉字反编译为unicode编码）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041246.png"></p></li><li><p>修改代码逻辑</p><p>  将判断条件改为强制跳转</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041482.png"></p><p>  跳转后注释掉其判断条件，不管是否为真都执行下列逻辑</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222041586.png"></p></li></ul><p><a href="https://www.notion.so/1b0a6f4b4daf8074a46adc1041b616a6?pvs=21">切水果大战</a></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222042093.png"></p>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>smail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识APK文件结构，双开，汉化，基础修改</title>
    <link href="/2025/03/05/ZJ2/%E5%88%9D%E8%AF%86APK%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8F%8C%E5%BC%80%EF%BC%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E5%9F%BA%E7%A1%80%E4%BF%AE%E6%94%B9%201aba6f4b4daf806ab293e060e8f7d41f/"/>
    <url>/2025/03/05/ZJ2/%E5%88%9D%E8%AF%86APK%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8F%8C%E5%BC%80%EF%BC%8C%E6%B1%89%E5%8C%96%EF%BC%8C%E5%9F%BA%E7%A1%80%E4%BF%AE%E6%94%B9%201aba6f4b4daf806ab293e060e8f7d41f/</url>
    
    <content type="html"><![CDATA[<h1 id="初识APK文件结构，双开，汉化，基础修改"><a href="#初识APK文件结构，双开，汉化，基础修改" class="headerlink" title="初识APK文件结构，双开，汉化，基础修改"></a>初识APK文件结构，双开，汉化，基础修改</h1><h1 id="1-APK结构"><a href="#1-APK结构" class="headerlink" title="1.APK结构"></a>1.APK结构</h1><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p><table><thead><tr><th><strong>文件</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>assets目录</td><td>存放APK的静态资源文件，比如视频，音频，图片等</td></tr><tr><td>lib 目录</td><td>armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，其目录下的.so文件是c或c++编译的动态链接库文件</td></tr><tr><td>META-INF目录</td><td>保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证(验证文件是否又被修改)</td></tr><tr><td>res目录</td><td>res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</td></tr><tr><td>AndroidManifest.xml文件</td><td>APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td></tr><tr><td>classes.dex文件</td><td>classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td></tr><tr><td>resources.arsc文件</td><td>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td></tr></tbody></table><ul><li><p>APK 文件是一个压缩文件，可通过解压工具对其进行解压缩以查看其内部结构，但解压缩后的文件不能直接运行，必须重新打包并签名后才能安装到设备上。</p><h3 id="1-文件结构"><a href="#1-文件结构" class="headerlink" title="1. 文件结构"></a><strong>1. 文件结构</strong></h3><ul><li><strong>/META-INF文件夹</strong> ：包含应用程序的签名信息等元数据，如MANIFEST.MF（应用的清单文件）、CERT.SF（包含签名信息，用于校验应用包的完整性）、CERT.RSA（应用的数字证书，存储了证书信息）。</li><li><strong>/res文件夹</strong> ：存储应用程序的各种资源文件，如界面布局（布局文件，如<code>activity_main.xml</code>）、图形图像（放在\drawable- [配置]文件夹中，不同的屏幕密度有不同的目录）、字符串（<code>strings.xml</code>）、样式（<code>styles.xml</code>）、颜色（<code>colors.xml</code>）、动画（如<code>animated.xml</code>）等。</li><li><strong>/assets文件夹</strong> ：存放应用程序的任意资源，如配置文件、图片、视频等，这些文件会在编译时保留在原样，不会被处理。</li><li><strong>/lib文件夹</strong> ：用于存储应用程序的原生代码库（ <code>.so</code>文件），针对不同的处理器架构有不同的文件夹（如<code>/lib/armeabi- v7a/</code>、<code>/lib/arm64- v8a/</code>、<code>/lib/x86/</code>等）。</li><li><strong>/AndroidManifest.xml</strong> ：是应用程序的配置文件，声明了应用程序的组件（如活动、服务、广播接收器、内容提供者）、权限、图标、标签、版本等重要信息。</li><li><strong>/classes.dex文件</strong> ：是应用程序的 Java 或 Kotlin 编译生成的字节码文件，包含应用程序的执行逻辑。</li><li><strong>/resources.arsc文件</strong> ：是 Android 资源文件，包含了应用程序中的各种资源（如字符串、样式、颜色等）的索引信息。</li><li><strong>其他文件</strong> ：如证书文件（如<code>/META-INF/CERT.SF</code> 和<code>/META-INF/CERT.RSA</code>）、应用图标、应用启动屏文件等。</li></ul><h3 id="2-APK的加载过程"><a href="#2-APK的加载过程" class="headerlink" title="2. APK的加载过程"></a><strong>2. APK的加载过程</strong></h3><p>  当用户安装 APK 文件时，Android 系统会解析 APK 文件的结构，提取其中的 AndroidManifest.xml 文件和 resources.arsc 文件，识别出应用程序的组件、资源、权限等信息。之后，系统会将 classes.dex 文件中的字节码加载到内存中，并解释执行，完成应用程序的启动和运行。在运行过程中，系统会根据需要动态加载并使用其他资源文件（如 res 文件夹中的资源文件和 assets 文件夹中的文件）。</p></li></ul><h1 id="2-双开及原理"><a href="#2-双开及原理" class="headerlink" title="2.双开及原理"></a>2.双开及原理</h1><p><a href="https://blog.csdn.net/u014294681/article/details/116270479">【VirtualAPP 双开系列08】如何实现多开 - UID_virtualapp 使用-CSDN博客</a></p><p>双开：简单来说，就是手机同时运行两个或多个相同的应用，例如同时运行两个微信</p><table><thead><tr><th><strong>原理</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>修改包名</td><td>让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td></tr><tr><td>修改Framework</td><td>对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td></tr><tr><td>通过虚拟化技术实现</td><td>虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td></tr><tr><td>以插件机制运行</td><td>利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td></tr></tbody></table><h2 id="（1）通过MT管理器修改包名实现双开"><a href="#（1）通过MT管理器修改包名实现双开" class="headerlink" title="（1）通过MT管理器修改包名实现双开"></a>（1）通过MT管理器修改包名实现双开</h2><p>1.使用MT管理器提取应用的安装包</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/51cc4787-95b3-4e35-a392-92d492744021.png"></p><p>2.找到我们要提取的apk，提取定位</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/image.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221955092.png"></p><p>3.通过APK共存功能修改包名实现apk双开</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957108.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957109.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221957110.png"></p><p>4.实现双开</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958621.png"></p><h2 id="（2）通过NP管理器修改包名实现双开"><a href="#（2）通过NP管理器修改包名实现双开" class="headerlink" title="（2）通过NP管理器修改包名实现双开"></a>（2）通过NP管理器修改包名实现双开</h2><p>流程与MT大致相同</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958997.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958998.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958999.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958000.png"></p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221958001.png"></p><p>打开修改报名后的apk安装</p><p><img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221959552.png"></p><p>就可以在手机上完成双开。因为修改报名实现双开动了应用的签名信息，如果开发者做了签名校验可能会出现安装后闪退崩溃等情况。</p><h1 id="3-汉化APK"><a href="#3-汉化APK" class="headerlink" title="3.汉化APK"></a>3.汉化APK</h1><p>使用专门的工具对外文版的软件资源进行读取，翻译，修改，回写等一系列处理，使用软件的菜单，对话框，提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化。</p><p>（需要注意，如果要直接装应用就应该先签名安装，看石否有签名校验导致的闪退。）</p><p><strong>基本上字符串都是在arsc里，建议一键汉化，然后再润色。少量没汉化到的字符串参考视频中的方法定位去逐个汉化。</strong></p><p>   <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503221959189.png"></p><h2 id="（1）简单的英语字句修改"><a href="#（1）简单的英语字句修改" class="headerlink" title="（1）简单的英语字句修改"></a>（1）简单的英语字句修改</h2><ul><li><p>1.我们在管理器中点击查看</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000125.png"></p></li><li><p>2.利用MT自带的搜索功能</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000631.png"></p></li><li><p>3.点击高级搜索相当使用全局搜索（搜索应用中的全部文件）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222000935.png"></p></li><li><p>4.对查询到的结果进行反编译</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001609.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001610.png"></p></li><li><p>5.对内容进行修改后保</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001075.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222001076.png"></p></li><li><p>6.发现我们对内容进行了重新签名，应用与最开始安装已经是不一样的了。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222004158.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222002990.png"></p></li><li><p>7.对于卸载提示可以直接关闭处理，在设置里的APK安装检验证关闭就不会再提示</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005497.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005498.png"></p></li><li><p>8.关闭后还会出现签名不一致安装失败的现象。（可以卸载原应用或利用XP的模块核心破解来解决这类问题）</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005117.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222005118.png"></p></li><li><p>9.完成后我们会发现修改部分已经变为中文模式</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006665.png"></p></li></ul><h2 id="（2）利用开发者助手搜索"><a href="#（2）利用开发者助手搜索" class="headerlink" title="（2）利用开发者助手搜索"></a>（2）利用开发者助手搜索</h2><ul><li><p>1.下载安装后会有一个小图标</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006876.png"></p></li><li><p>2.我们到需要修改的app页面点击图标，点击开始资源分析</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222006872.png"></p></li><li><p>3.点击需要查看的亮条部分，点击复制我们需要的文本信息，再回到MT管理器中重复上述步骤即可</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007495.png"></p></li></ul><p>也可以直接再MT浏览器中开通汉化翻译插件</p><p>我们发现第二次签名后软件可以直接安装成功，原因是MT自带的签名信息一致，不会出现签名信息冲突的情况，可以直接覆盖安装</p><h2 id="（3）放在dex文件中"><a href="#（3）放在dex文件中" class="headerlink" title="（3）放在dex文件中"></a>（3）放在dex文件中</h2><ul><li><p>1.选择dex编辑器++</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007447.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222007448.png"></p></li><li><p>2.同样来搜索我们修改的字符，搜索类型可以自行选择。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008816.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008817.png"></p></li><li><p>3.很快就能的得到搜索结果</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008163.png"></p></li><li><p>4.修改后保存退出重复上述步骤</p></li></ul><h1 id="4-初识AndroidManifest-xml"><a href="#4-初识AndroidManifest-xml" class="headerlink" title="4.初识AndroidManifest.xml"></a>4.<strong>初识AndroidManifest.xml</strong></h1><p>AndroidManifest.xml文件是整个应用程序的信息描述文件，定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p><table><thead><tr><th><strong>属性</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>versionCode</td><td>版本号，主要用来更新，例如:12</td></tr><tr><td>versionName</td><td>版本名，给用户看的，例如:1.2</td></tr><tr><td>package</td><td>包名，例如：com.zj.52pj.demo</td></tr><tr><td>uses-permission android:name=””</td><td>应用权限，例如：android.permission.INTERNET 代表网络权限</td></tr><tr><td>android:label=”@string/app_name”</td><td>应用名称</td></tr><tr><td>android:icon=”@mipmap/ic_launcher”</td><td>应用图标路径</td></tr><tr><td>android:debuggable=”true”</td><td>应用是否开启debug权限</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>使用NT浏览器修改AndroidManifest.xml文件</p><ul><li><p>1.直接进入查看编译</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222008126.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009665.png"></p></li><li><p>2.修改apk图标和名字，在NP管理器中使用通用编辑进行修改</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009864.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009865.png"></p></li><li><p>3.保存安装发现又出现签名信息不一致因为上边用的MT管理器签名，和现在NP签名不一致，按上述方法解决即可，安装后可以观察到修改成功。</p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009655.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009656.png"></p><p>  <img src="https://raw.githubusercontent.com/CC-NX/blogImage/main//_img/202503222009657.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APK结构</tag>
      
      <tag>双开原理</tag>
      
      <tag>APK汉化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/02/hello-world/"/>
    <url>/2025/03/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
